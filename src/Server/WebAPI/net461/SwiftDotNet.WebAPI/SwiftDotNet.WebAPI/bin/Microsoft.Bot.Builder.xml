<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Bot.Builder</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Bot.Builder.Dialogs.Internals.DialogModule">
            <summary>
            Autofac module for Dialog components.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.Internals.CachingBotDataStoreConsistencyPolicy">
            <summary>
            The data consistency policy for <see cref="T:Microsoft.Bot.Builder.Dialogs.Internals.CachingBotDataStore"/>
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.Dialogs.Internals.CachingBotDataStoreConsistencyPolicy.LastWriteWins">
            <summary>
            Causes <see cref="T:Microsoft.Bot.Builder.Dialogs.Internals.CachingBotDataStore"/> to set <see cref="P:Microsoft.Bot.Connector.BotData.ETag"/> to "*" when it flushes the data to storage. 
            As a result last write will overwrite the data.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.Dialogs.Internals.CachingBotDataStoreConsistencyPolicy.ETagBasedConsistency">
            <summary>
            Causes <see cref="T:Microsoft.Bot.Builder.Dialogs.Internals.CachingBotDataStore"/> to write data with the same <see cref="P:Microsoft.Bot.Connector.BotData.ETag"/> 
            returned by <see cref="F:Microsoft.Bot.Builder.Dialogs.Internals.CachingBotDataStore.inner"/>. As a result <see cref="M:Microsoft.Bot.Builder.Dialogs.Internals.IBotDataStore`1.FlushAsync(Microsoft.Bot.Builder.Dialogs.Internals.BotDataKey,System.Threading.CancellationToken)"/>
            might fail because of ETag inconsistencies.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.Internals.CachingBotDataStore">
            <summary>
            Caches data for <see cref="T:Microsoft.Bot.Builder.Dialogs.Internals.BotDataBase`1"/> and wraps the data in <see cref="T:Microsoft.Bot.Connector.BotData"/> to be stored in <see cref="F:Microsoft.Bot.Builder.Dialogs.Internals.CachingBotDataStore.inner"/>
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.Internals.IConnectorClientFactory">
            <summary>
            Factory for IConnectorClient.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.Internals.IConnectorClientFactory.MakeConnectorClient">
            <summary>
            Make the IConnectorClient implementation.
            </summary>
            <returns>The IConnectorClient implementation.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.Internals.IConnectorClientFactory.MakeStateClient">
            <summary>
            Make the <see cref="T:Microsoft.Bot.Connector.IStateClient"/> implementation.
            </summary>
            <returns>The <see cref="T:Microsoft.Bot.Connector.IStateClient"/> implementation.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.Internals.IDialogStack">
            <summary>
            The stack of dialogs in the conversational process.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Dialogs.Internals.IDialogStack.Frames">
            <summary>
            The dialog frames active on the stack.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.Internals.IDialogStack.Wait``1(Microsoft.Bot.Builder.Dialogs.ResumeAfter{``0})">
            <summary>
            Suspend the current dialog until an external event has been sent to the bot.
            </summary>
            <param name="resume">The method to resume when the event has been received.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.Internals.IDialogStack.Call``1(Microsoft.Bot.Builder.Dialogs.IDialog{``0},Microsoft.Bot.Builder.Dialogs.ResumeAfter{``0})">
            <summary>
            Call a child dialog and add it to the top of the stack.
            </summary>
            <typeparam name="R">The type of result expected from the child dialog.</typeparam>
            <param name="child">The child dialog.</param>
            <param name="resume">The method to resume when the child dialog has completed.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.Internals.IDialogStack.Forward``2(Microsoft.Bot.Builder.Dialogs.IDialog{``0},Microsoft.Bot.Builder.Dialogs.ResumeAfter{``0},``1,System.Threading.CancellationToken)">
            <summary>
            Call a child dialog, add it to the top of the stack and post the item to the child dialog.
            </summary>
            <typeparam name="R">The type of result expected from the child dialog.</typeparam>
            <typeparam name="T">The type of the item posted to child dialog.</typeparam>
            <param name="child">The child dialog.</param>
            <param name="resume">The method to resume when the child dialog has completed.</param>
            <param name="item">The item that will be posted to child dialog.</param>
            <param name="token">A cancellation token.</param>
            <returns>A task representing the Forward operation.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.Internals.IDialogStack.Done``1(``0)">
            <summary>
            Complete the current dialog and return a result to the parent dialog.
            </summary>
            <typeparam name="R">The type of the result dialog.</typeparam>
            <param name="value">The value of the result.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.Internals.IDialogStack.Fail(System.Exception)">
            <summary>
            Fail the current dialog and return an exception to the parent dialog.
            </summary>
            <param name="error">The error.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.Internals.IDialogStack.PollAsync(System.Threading.CancellationToken)">
            <summary>
            Poll the dialog task for any work to be done.
            </summary>
            <param name="token">A cancellation token.</param>
            <returns>A task representing the poll operation.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.Internals.IDialogStack.Reset">
            <summary>
            Resets the stack.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.Internals.IPostToBot">
            <summary>
            Methods to send a message from the user to the bot.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.Internals.IPostToBot.PostAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            Post an item (e.g. message or other external event) to the bot.
            </summary>
            <param name="item">The item for the bot.</param>
            <param name="token">The cancellation token.</param>
            <returns>A task that represents the post operation.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.Internals.IBotData">
            <summary>
            Private bot data.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Dialogs.Internals.IBotData.UserData">
            <summary>
            Private bot data associated with a user (across all channels and conversations).
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Dialogs.Internals.IBotData.ConversationData">
            <summary>
            Private bot data associated with a conversation.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Dialogs.Internals.IBotData.PrivateConversationData">
            <summary>
            Private bot data associated with a user in a conversation.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.Internals.IBotData.LoadAsync(System.Threading.CancellationToken)">
            <summary>
            Loads the bot data from <see cref="T:Microsoft.Bot.Builder.Dialogs.Internals.IBotDataStore`1"/>
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.Internals.IBotData.FlushAsync(System.Threading.CancellationToken)">
            <summary>
            Flushes the bot data to <see cref="T:Microsoft.Bot.Builder.Dialogs.Internals.IBotDataStore`1"/>
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.Internals.IBotToUser">
            <summary>
            Methods to send a message from the bot to the user. 
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.Internals.IBotToUser.PostAsync(Microsoft.Bot.Connector.IMessageActivity,System.Threading.CancellationToken)">
            <summary>
            Post a message to be sent to the user.
            </summary>
            <param name="message">The message for the user.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task that represents the post operation.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.Internals.IBotToUser.MakeMessage">
            <summary>
            Make a message.
            </summary>
            <returns>The new message.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.CommandDialog`1">
            <summary> Dialog that dispatches based on a regex matching input. </summary>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.CommandDialog`1.Command">
            <summary>   A single command. </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Dialogs.CommandDialog`1.Command.CommandId">
            <summary>   Gets or sets the command ID used for persisting currently running command handler. </summary>
            <value> Command ID. </value>
        </member>
        <member name="P:Microsoft.Bot.Builder.Dialogs.CommandDialog`1.Command.Expression">
            <summary>   Gets or sets the regular expression for matching command. </summary>
            <value> The regular expression. </value>
        </member>
        <member name="P:Microsoft.Bot.Builder.Dialogs.CommandDialog`1.Command.CommandHandler">
            <summary>   Gets or sets the command handler. </summary>
            <value> The command handler. </value>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.CommandDialog`1.ResultHandler``1(Microsoft.Bot.Builder.Dialogs.IDialogContext,Microsoft.Bot.Builder.Dialogs.IAwaitable{``0})">
            <summary>
            The result handler of the command dialog passed to the child dialogs. 
            </summary>
            <typeparam name="U"> The type of the result returned by the child dialog. </typeparam>
            <param name="context"> Dialog context. </param>
            <param name="result"> The result retured by the child dialog. </param>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.CommandDialog`1.On``1(System.Text.RegularExpressions.Regex,Microsoft.Bot.Builder.Dialogs.ResumeAfter{Microsoft.Bot.Connector.IMessageActivity},Microsoft.Bot.Builder.Dialogs.ResumeAfter{``0})">
            <summary> Define a handler that is fired on a regular expression match of a message. </summary>
            <typeparam name="U"> Type of input to result handler. </typeparam>
            <param name="expression"> Regular expression to match. </param>
            <param name="handler"> Handler to call on match. </param>
            <param name="resultHandler"> Optional result handler to be called if handler is creating a chaild dialog. </param>
            <returns> A commandDialog. </returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.CommandDialog`1.OnDefault``1(Microsoft.Bot.Builder.Dialogs.ResumeAfter{Microsoft.Bot.Connector.IMessageActivity},Microsoft.Bot.Builder.Dialogs.ResumeAfter{``0})">
            <summary> Define the default action if no match. </summary>
            <typeparam name="U"> Type of input to result handler. </typeparam>
            <param name="handler"> Handler to call if no match. </param>
            <param name="resultHandler"> Optional result handler to be called if handler is creating a chaild dialog. </param>
            <returns> A CommandDialog. </returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.Conversation">
            <summary>
            The top level composition root for the SDK.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.Conversation.SendAsync(Microsoft.Bot.Connector.IMessageActivity,System.Func{Microsoft.Bot.Builder.Dialogs.IDialog{System.Object}},System.Threading.CancellationToken)">
            <summary>
            Process an incoming message within the conversation.
            </summary>
            <remarks>
            This method:
            1. Instantiates and composes the required components.
            2. Deserializes the dialog state (the dialog stack and each dialog's state) from the <paramref name="toBot"/> <see cref="T:Microsoft.Bot.Connector.IMessageActivity"/>.
            3. Resumes the conversation processes where the dialog suspended to wait for a <see cref="T:Microsoft.Bot.Connector.IMessageActivity"/>.
            4. Queues <see cref="T:Microsoft.Bot.Connector.IMessageActivity"/>s to be sent to the user.
            5. Serializes the updated dialog state in the messages to be sent to the user.
            
            The <paramref name="MakeRoot"/> factory method is invoked for new conversations only,
            because existing conversations have the dialog stack and state serialized in the <see cref="T:Microsoft.Bot.Connector.IMessageActivity"/> data.
            </remarks>
            <param name="toBot">The message sent to the bot.</param>
            <param name="MakeRoot">The factory method to make the root dialog.</param>
            <param name="token">The cancellation token.</param>
            <returns>A task that represents the message to send inline back to the user.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.Conversation.ResumeAsync``1(Microsoft.Bot.Builder.Dialogs.ResumptionCookie,``0,System.Threading.CancellationToken)">
            <summary>
            Resume a conversation and post the data to the dialog waiting.
            </summary>
            <typeparam name="T"> Type of the data. </typeparam>
            <param name="resumptionCookie"> The id of the bot.</param>
            <param name="toBot"> The data sent to bot.</param>
            <param name="token"> The cancellation token.</param>
            <returns> A task that represent the message to send back to the user after resumption of the conversation.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.Chain">
            <summary>
            A fluent, chainable interface for IDialogs.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.Chain.Continutation`2">
            <summary>
            When the antecedent <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1"/> has completed, execute this continuation method to construct the next <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1"/>.
            </summary>
            <typeparam name="T">The type of the antecedent dialog.</typeparam>
            <typeparam name="R">The type of the next dialog.</typeparam>
            <param name="context">The bot context.</param>
            <param name="item">The result of the previous <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1"/>.</param>
            <returns>A task that represents the next <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1"/>.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.Chain.From``1(System.Func{Microsoft.Bot.Builder.Dialogs.IDialog{``0}})">
            <summary>
            Construct a <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1"/> that will make a new copy of another <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1"/> when started.
            </summary>
            <typeparam name="T">The type of the dialog.</typeparam>
            <param name="MakeDialog">The dialog factory method.</param>
            <returns>The new dialog.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.Chain.Do``1(Microsoft.Bot.Builder.Dialogs.IDialog{``0},System.Func{Microsoft.Bot.Builder.Dialogs.IBotContext,Microsoft.Bot.Builder.Dialogs.IAwaitable{``0},System.Threading.Tasks.Task})">
            <summary>
            Execute a side-effect after a <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1"/> completes.
            </summary>
            <typeparam name="T">The type of the dialog.</typeparam>
            <param name="antecedent">The antecedent <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1"/>.</param>
            <param name="callback">The callback method.</param>
            <returns>The antecedent dialog.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.Chain.PostToUser``1(Microsoft.Bot.Builder.Dialogs.IDialog{``0})">
            <summary>
            Post to the user the result of a <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1"/>.
            </summary>
            <typeparam name="T">The type of the dialog.</typeparam>
            <param name="antecedent">The antecedent <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1"/>.</param>
            <returns>The antecedent dialog.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.Chain.WaitToBot``1(Microsoft.Bot.Builder.Dialogs.IDialog{``0})">
            <summary>
            Post to the chain the message to the bot after the antecedent completes.
            </summary>
            <typeparam name="T">The type of the dialog.</typeparam>
            <param name="antecedent">The antecedent <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1"/>.</param>
            <returns>The dialog representing the message sent to the bot.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.Chain.PostToChain">
            <summary>
            Post the message from the user to Chain.
            </summary>
            <remarks>
            The returned <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1"/> can be used as the root dialog for a chain.
            </remarks>
            <returns> The dialog that dispatches the incoming message from the user to chain.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.Chain.ContinueWith``2(Microsoft.Bot.Builder.Dialogs.IDialog{``0},Microsoft.Bot.Builder.Dialogs.Chain.Continutation{``0,``1})">
            <summary>
            When the antecedent <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1"/> has completed, execute the continuation to produce the next <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1"/>.
            </summary>
            <typeparam name="T">The type of the antecedent dialog.</typeparam>
            <typeparam name="R">The type of the next dialog.</typeparam>
            <param name="antecedent">The antecedent <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1"/>.</param>
            <param name="continuation">The continuation to produce the next <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1"/>.</param>
            <returns>The next <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1"/>.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.Chain.Select``2(Microsoft.Bot.Builder.Dialogs.IDialog{``0},System.Func{``0,``1})">
            <summary>
            When the antecedent <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1"/> has completed, project the result into a new <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1"/>.
            </summary>
            <typeparam name="T">The type of the antecedent dialog.</typeparam>
            <typeparam name="R">The type of the projected dialog.</typeparam>
            <param name="antecedent">The antecedent dialog <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1"/>.</param>
            <param name="selector">The projection function from <typeparamref name="T"/> to <typeparamref name="R"/>.</param>
            <returns>The result <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1"/>.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.Chain.Where``1(Microsoft.Bot.Builder.Dialogs.IDialog{``0},System.Func{``0,System.Boolean})">
            <summary>
            When the antecedent <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1"/> has completed, evaluate the predicate and decide whether to continue.
            </summary>
            <typeparam name="T">The type of the antecedent dialog.</typeparam>
            <param name="antecedent">The antecedent dialog <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1"/>.</param>
            <param name="predicate">The predicate to decide whether to continue the chain.</param>
            <returns>The result from the antecedent <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1"/> or its cancellation, wrapped in a <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1"/>.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.Chain.Unwrap``1(Microsoft.Bot.Builder.Dialogs.IDialog{Microsoft.Bot.Builder.Dialogs.IDialog{``0}})">
            <summary>
            When the antecedent <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1"/> where T is <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1"/> completes, unwrap the result into a new <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1"/>.
            </summary>
            <typeparam name="T">The type of the antecedent dialog.</typeparam>
            <param name="antecedent">The antecedent dialog <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1"/> where T is <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1"/>.</param>
            <returns>An <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1"/>.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.Chain.SelectMany``3(Microsoft.Bot.Builder.Dialogs.IDialog{``0},System.Func{``0,Microsoft.Bot.Builder.Dialogs.IDialog{``1}},System.Func{``0,``1,``2})">
            <summary>
            When the antecedent <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1"/> has completed, execute the next <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1"/>, and use the projection to combine the results.
            </summary>
            <typeparam name="T">The type of the antecedent dialog.</typeparam>
            <typeparam name="C">The type of the intermediate dialog.</typeparam>
            <typeparam name="R">The type of the projected dialog.</typeparam>
            <param name="antecedent">The antecedent dialog <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1"/>.</param>
            <param name="function">The factory method to create the next dialog <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1"/>.</param>
            <param name="projection">The projection function for the combination of the two dialogs.</param>
            <returns>The result <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1"/>.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.Chain.Loop``1(Microsoft.Bot.Builder.Dialogs.IDialog{``0})">
            <summary>
            Loop the <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1"/> forever.
            </summary>
            <param name="antecedent">The antecedent <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1"/>.</param>
            <returns>The looping dialog.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.Chain.Void``2(Microsoft.Bot.Builder.Dialogs.IDialog{``0})">
            <summary>
            Call the voided <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1"/>, ignore the result, then restart the original dialog wait.
            </summary>
            <typeparam name="T">The type of the voided dialog.</typeparam>
            <typeparam name="R">The type of the original dialog wait.</typeparam>
            <param name="antecedent">The voided dialog.</param>
            <returns>The dialog that produces the item to satisfy the original wait.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.Chain.DefaultIfException``2(Microsoft.Bot.Builder.Dialogs.IDialog{``0})">
            <summary>
            When the antecedent <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1"/> has completed, stop the propagation of an exception of <typeparamref name="E"/>.
            </summary>
            <typeparam name="T">The type returned by the antecedent dialog.</typeparam>
            <typeparam name="E">The type of exception to swallow.</typeparam>
            <param name="antecedent"> The antecedent dialog <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1"/>.</param>
            <returns>The default value of <typeparamref name="T"/> if there is an exception of type <typeparamref name="E"/>.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.Chain.DefaultIfException``1(Microsoft.Bot.Builder.Dialogs.IDialog{``0})">
            <summary>
            When the antecedent <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1"/> has completed, stop the propagation of Exception.
            </summary>
            <typeparam name="T">The type returned by the antecedent dialog.</typeparam>
            <param name="antecedent"> The antecedent dialog <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1"/>.</param>
            <returns>The default value of <typeparamref name="T"/> if there is an Exception.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.Chain.Switch``2(Microsoft.Bot.Builder.Dialogs.IDialog{``0},Microsoft.Bot.Builder.Dialogs.ICase{``0,``1}[])">
            <summary>
            When the antecedent <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1"/> has completed, go through each <see cref="T:Microsoft.Bot.Builder.Dialogs.ICase`2"/> 
            and run the <see cref="T:Microsoft.Bot.Builder.Dialogs.ContextualSelector`2"/>" of the first <see cref="T:Microsoft.Bot.Builder.Dialogs.ICase`2"/> that 
            the returned value by the antecedent dialog satisfies.
            </summary>
            <typeparam name="T"> The type of the antecedent dialog.</typeparam>
            <typeparam name="R"> The type of the Dialog returned by <see cref="T:Microsoft.Bot.Builder.Dialogs.ContextualSelector`2"/></typeparam>
            <param name="antecedent"> The antecedent dialog <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1"/>.</param>
            <param name="cases"> Cases for the switch</param>
            <returns>The result <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1"/>.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.Chain.Return``1(``0)">
            <summary>
            Creates a <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1"/> that returns a value.
            </summary>
            <remarks>
            The type of the value should be serializable.
            </remarks>
            <typeparam name="T"> Type of the value.</typeparam>
            <param name="item"> The value to be wrapped.</param>
            <returns> The <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1"/> that wraps the value.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.Chain.While``1(Microsoft.Bot.Builder.Dialogs.IDialog{``0},System.Func{``0,Microsoft.Bot.Builder.Dialogs.IDialog{System.Boolean}},System.Func{``0,Microsoft.Bot.Builder.Dialogs.IDialog{``0}})">
            <summary>
            Create a <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1"/> that represents a while loop.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="initial">The value if <paramref name="test"/> is never true.</param>
            <param name="test">The test to enter the while loop <paramref name="body"/>.</param>
            <param name="body">The body of the while loop.</param>
            <returns>Zero or the last value returned by the <paramref name="body"/> of the while loop.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.Chain.Fold``1(Microsoft.Bot.Builder.Dialogs.IDialog{System.Collections.Generic.IEnumerable{Microsoft.Bot.Builder.Dialogs.IDialog{``0}}},System.Func{``0,``0,``0})">
            <summary>
            Fold items from an enumeration of dialogs.
            </summary>
            <typeparam name="T"> The type of the dialogs in the enumeration produced by the antecedent dialog.</typeparam>
            <param name="antecedent">The antecedent dialog that produces an enumeration of <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1"/>.</param>
            <param name="folder">The accumulator for the dialog enumeration.</param>
            <returns>The accumulated result.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.Chain.Case``2(System.Func{``0,System.Boolean},Microsoft.Bot.Builder.Dialogs.ContextualSelector{``0,``1})">
            <summary>
            Constructs a case. 
            </summary>
            <typeparam name="T"> The type of incoming value to case.</typeparam>
            <typeparam name="R"> The type of the object returned by selector.</typeparam>
            <param name="condition"> The condition of the case.</param>
            <param name="selector"> The contextual selector of the case.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.Chain.Case``1(System.Text.RegularExpressions.Regex,Microsoft.Bot.Builder.Dialogs.ContextualSelector{System.String,``0})">
            <summary>
            Constructs a case based on a regular expression.
            </summary>
            <typeparam name="R"> The type of the object returned by selector.</typeparam>
            <param name="regex"> The regex for condition.</param>
            <param name="selector"> The contextual selector for the case.</param>
            <returns>The case.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.Chain.Default``2(Microsoft.Bot.Builder.Dialogs.ContextualSelector{``0,``1})">
            <summary>
            Constructs a case to use as the default.
            </summary>
            <typeparam name="T"> The type of incoming value to case.</typeparam>
            <typeparam name="R"> The type of the object returned by selector.</typeparam>
            <param name="selector"> The contextual selector of the case.</param>
            <returns>The case.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.Chain.WhereCanceledException">
            <summary>
            The exception that is thrown when the where is canceled.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.Chain.WhereCanceledException.#ctor">
            <summary>
            Construct the exception.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.Chain.WhereCanceledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This is the serialization constructor.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.Chain.ReturnDialog`1">
            <summary>
            A Dialog that wraps a value of type T.
            </summary>
            <remarks>
            The type of the value should be serializable.
            </remarks>
            <typeparam name="T">The result type of the Dialog. </typeparam>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.ContextualSelector`2">
            <summary>
            The contextual selector function.
            </summary>
            <typeparam name="T"> The type of value passed to selector.</typeparam>
            <typeparam name="R"> The returned type of the selector.</typeparam>
            <param name="context"> <see cref="T:Microsoft.Bot.Builder.Dialogs.IBotContext"/> passed to selector.</param>
            <param name="item"> The value passed to selector.</param>
            <returns> The value returned by selector.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.ICase`2">
            <summary>
            The interface for cases evaluated by switch.
            </summary>
            <typeparam name="T"> The type of incoming value to case.</typeparam>
            <typeparam name="R"> The type of the object returned by selector.</typeparam>
        </member>
        <member name="P:Microsoft.Bot.Builder.Dialogs.ICase`2.Condition">
            <summary>
            The condition field of the case.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Dialogs.ICase`2.Selector">
            <summary>
            The selector that will be invoked if condition is met.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.Case`2">
            <summary>
            The default implementation of <see cref="T:Microsoft.Bot.Builder.Dialogs.ICase`2"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.Case`2.#ctor(System.Func{`0,System.Boolean},Microsoft.Bot.Builder.Dialogs.ContextualSelector{`0,`1})">
            <summary>
            Constructs a case. 
            </summary>
            <param name="condition"> The condition of the case.</param>
            <param name="selector"> The contextual selector of the case.</param>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.RegexCase`1">
            <summary>
            The regex case for switch.
            </summary>
            <remarks>
            The condition will be true if the regex matches the text.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.RegexCase`1.#ctor(System.Text.RegularExpressions.Regex,Microsoft.Bot.Builder.Dialogs.ContextualSelector{System.String,`0})">
            <summary>
            Constructs a case based on a regular expression.
            </summary>
            <param name="regex"> The regex for condition.</param>
            <param name="selector"> The contextual selector for the case.</param>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.DefaultCase`2">
            <summary>
            The default case for switch. <see cref="T:Microsoft.Bot.Builder.Dialogs.ICase`2"/>
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.DefaultCase`2.#ctor(Microsoft.Bot.Builder.Dialogs.ContextualSelector{`0,`1})">
            <summary>
            Constructs the default case for switch.
            </summary>
            <param name="selector"> The contextual selector that will be called in default case.</param>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.DialogStackException">
            <summary>
            The root of the exception hierarchy related to <see cref="T:Microsoft.Bot.Builder.Dialogs.Internals.IDialogStack"/> .
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.DialogStackException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the DialogStackException class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.NoResumeHandlerException">
            <summary>
            The exception representing no resume handler specified for the dialog stack.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.NoResumeHandlerException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the NoResumeHandlerException class.
            </summary>
            <param name="inner">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.MultipleResumeHandlerException">
            <summary>
            The exception representing multiple resume handlers specified for the dialog stack.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.MultipleResumeHandlerException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the MultipleResumeHandlerException class.
            </summary>
            <param name="inner">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.PromptException">
            <summary>
            The root of the exception hierarchy related to prompts.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.PromptException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the PromptException class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.TooManyAttemptsException">
            <summary>
            The exception representing too many attempts by the user to answer the question asked by the prompt.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.TooManyAttemptsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the TooManyAttemptsException class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.ResumptionCookie">
            <summary>
            The resumption cookie that can be used to resume a conversation with a user. 
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Dialogs.ResumptionCookie.UserId">
            <summary>
            The user Id.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Dialogs.ResumptionCookie.UserName">
            <summary>
            The user name.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Dialogs.ResumptionCookie.ChannelId">
            <summary>
            The channelId.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Dialogs.ResumptionCookie.BotId">
            <summary>
            The bot Id. 
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Dialogs.ResumptionCookie.ServiceUrl">
            <summary>
            The service url.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Dialogs.ResumptionCookie.IsTrustedServiceUrl">
            <summary>
            True if the <see cref="P:Microsoft.Bot.Builder.Dialogs.ResumptionCookie.ServiceUrl"/> is trusted; False otherwise.
            </summary>
            <remarks> <see cref="M:Microsoft.Bot.Builder.Dialogs.Conversation.ResumeAsync``1(Microsoft.Bot.Builder.Dialogs.ResumptionCookie,``0,System.Threading.CancellationToken)"/> adds 
            the host of the <see cref="P:Microsoft.Bot.Builder.Dialogs.ResumptionCookie.ServiceUrl"/> to <see cref="F:Microsoft.Bot.Connector.MicrosoftAppCredentials.TrustedHostNames"/> if this flag is True.
            </remarks>
        </member>
        <member name="P:Microsoft.Bot.Builder.Dialogs.ResumptionCookie.IsGroup">
            <summary>
            The IsGroup flag for conversation.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Dialogs.ResumptionCookie.ConversationId">
            <summary>
            The Id of the conversation that will be resumed.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Dialogs.ResumptionCookie.Locale">
            <summary>
            The locale of message.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.ResumptionCookie.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates an instance of the resumption cookie. 
            </summary>
            <param name="userId"> The user Id.</param>
            <param name="botId"> The bot Id.</param>
            <param name="conversationId"> The conversation Id.</param>
            <param name="channelId"> The channel Id of the conversation.</param>
            <param name="serviceUrl"> The service url of the conversation.</param>
            <param name="locale"> The locale of the message.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.ResumptionCookie.#ctor(Microsoft.Bot.Connector.IMessageActivity)">
            <summary>
            Creates an instance of resumption cookie form a <see cref="T:Microsoft.Bot.Connector.IMessageActivity"/>
            </summary>
            <param name="msg"> The message.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.ResumptionCookie.GetMessage">
            <summary>
            Creates a message from the resumption cookie.
            </summary>
            <returns> The message that can be sent to bot based on the resumption cookie</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.ResumptionCookie.GZipDeserialize(System.String)">
            <summary>
            Deserializes the GZip serialized <see cref="T:Microsoft.Bot.Builder.Dialogs.ResumptionCookie"/> using <see cref="M:Microsoft.Bot.Builder.Dialogs.Extensions.GZipSerialize(Microsoft.Bot.Builder.Dialogs.ResumptionCookie)"/>.
            </summary>
            <param name="str"> The Base64 encoded string.</param>
            <returns> An instance of <see cref="T:Microsoft.Bot.Builder.Dialogs.ResumptionCookie"/></returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.Extensions">
            <summary>
            Helper methods.
            </summary>
            <summary>
            Helper methods.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.Extensions.GZipSerialize(Microsoft.Bot.Builder.Dialogs.ResumptionCookie)">
            <summary>
            Binary serializes <see cref="T:Microsoft.Bot.Builder.Dialogs.ResumptionCookie"/> using <see cref="T:System.IO.Compression.GZipStream"/>.
            </summary>
            <param name="resumptionCookie"> The resumption cookie.</param>
            <returns> A Base64 encoded string.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.Extensions.Get``1(Microsoft.Bot.Builder.Dialogs.IBotDataBag,System.String)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <typeparam name="T">The type of the value to get.</typeparam>
            <param name="bag">The bot data bag.</param>
            <param name="key">The key of the value to get or set.</param>
            <returns>The value associated with the specified key. If the specified key is not found, a get operation throws a KeyNotFoundException.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.Extensions.PostAsync(Microsoft.Bot.Builder.Dialogs.Internals.IBotToUser,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Post a message to be sent to the bot, using previous messages to establish a conversation context.
            </summary>
            <remarks>
            If the locale parameter is not set, locale of the incoming message will be used for reply.
            </remarks>
            <param name="botToUser">Communication channel to use.</param>
            <param name="text">The message text.</param>
            <param name="locale">The locale of the text.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task that represents the post operation.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.Extensions.Wait(Microsoft.Bot.Builder.Dialogs.Internals.IDialogStack,Microsoft.Bot.Builder.Dialogs.ResumeAfter{Microsoft.Bot.Connector.IMessageActivity})">
            <summary>
            Suspend the current dialog until the user has sent a message to the bot.
            </summary>
            <param name="stack">The dialog stack.</param>
            <param name="resume">The method to resume when the message has been received.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.Extensions.AddHeroCard``1(Microsoft.Bot.Connector.IMessageActivity,System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Generates buttons from options and add them to the message.
            </summary>
            <remarks>
            <typeparamref name="T"/> should implement ToString().
            </remarks>
            <typeparam name="T"> Type of the options.</typeparam>
            <param name="message"> The message that the buttons will be added to.</param>
            <param name="text"> The text in the <see cref="T:Microsoft.Bot.Connector.HeroCard"/>.</param>
            <param name="options"> The options that cause generation of buttons.</param>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.IBotDataBag">
            <summary>
            A property bag of bot data.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Dialogs.IBotDataBag.Count">
            <summary>
            Gets the number of key/value pairs contained in the <see cref="T:Microsoft.Bot.Builder.Dialogs.IBotDataBag"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.IBotDataBag.TryGetValue``1(System.String,``0@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <typeparam name="T">The type of the value to set.</typeparam>
            <param name="key">The key of the value to get.</param>
            <param name="value">
            When this method returns, contains the value associated with the specified key, if the key is found;
            otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.
            </param>
            <returns>true if the <see cref="T:Microsoft.Bot.Builder.Dialogs.IBotDataBag"/> contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.IBotDataBag.SetValue``1(System.String,``0)">
            <summary>
            Adds the specified key and value to the bot data bag.
            </summary>
            <typeparam name="T">The type of the value to get.</typeparam>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add. The value can be null for reference types.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.IBotDataBag.RemoveValue(System.String)">
            <summary>
            Removes the specified key from the bot data bag.
            </summary>
            <param name="key">They key of the element to remove</param>
            <returns>True if removal of the key is successful; otherwise, false</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.IBotDataBag.Clear">
            <summary>
            Removes all of the values from data bag.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.IChannelCapability">
            <summary>
            Capability for a specific channel
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Dialogs.IChannelCapability.SupportButtons">
            <summary>
            True if the channel support buttons, false otherwise.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.IDetectChannelCapability">
            <summary>
            Channel capability detector.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.IDetectChannelCapability.Detect">
            <summary>
            Detects channel capabilities.
            </summary>
            <returns>
            Capabilities of a channel.
            </returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.LuisIntentAttribute">
            <summary>
            Associate a LUIS intent with a dialog method.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.Dialogs.LuisIntentAttribute.IntentName">
            <summary>
            The LUIS intent name.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.LuisIntentAttribute.#ctor(System.String)">
            <summary>
            Construct the association between the LUIS intent and a dialog method.
            </summary>
            <param name="intentName">The LUIS intent name.</param>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.IntentHandler">
            <summary>
            The handler for a LUIS intent.
            </summary>
            <param name="context">The dialog context.</param>
            <param name="luisResult">The LUIS result.</param>
            <returns>A task representing the completion of the intent processing.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.IntentActivityHandler">
            <summary>
            The handler for a LUIS intent.
            </summary>
            <param name="context">The dialog context.</param>
            <param name="message">The dialog message.</param>
            <param name="luisResult">The LUIS result.</param>
            <returns>A task representing the completion of the intent processing.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.InvalidIntentHandlerException">
            <summary>
            An exception for invalid intent handlers.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.LuisServiceResult">
            <summary>
            Matches a LuisResult object with the best scored IntentRecommendation of the LuisResult.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.LuisDialog`1">
            <summary>
            A dialog specialized to handle intents and entities from LUIS.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.Dialogs.LuisDialog`1.handlerByIntent">
            <summary>   Mapping from intent string to the appropriate handler. </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.LuisDialog`1.#ctor(Microsoft.Bot.Builder.Luis.ILuisService[])">
            <summary>
            Construct the LUIS dialog.
            </summary>
            <param name="services">The LUIS service.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.LuisDialog`1.BestIntentFrom(Microsoft.Bot.Builder.Luis.Models.LuisResult)">
            <summary>
            Calculates the best scored <see cref="T:Microsoft.Bot.Builder.Luis.Models.IntentRecommendation" /> from a <see cref="T:Microsoft.Bot.Builder.Luis.Models.LuisResult" />.
            </summary>
            <param name="result">A result of a LUIS service call.</param>
            <returns>The best scored <see cref="T:Microsoft.Bot.Builder.Luis.Models.IntentRecommendation" />, or null if <paramref name="result" /> doesn't contain any intents.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.LuisDialog`1.BestResultFrom(System.Collections.Generic.IEnumerable{Microsoft.Bot.Builder.Luis.Models.LuisResult})">
            <summary>
            Calculates the best scored <see cref="T:Microsoft.Bot.Builder.Luis.Models.IntentRecommendation" /> across some <see cref="T:Microsoft.Bot.Builder.Luis.Models.LuisResult" /> objects.
            </summary>
            <param name="results">Results of multiple LUIS services calls.</param>
            <returns>A <see cref="T:Microsoft.Bot.Builder.Dialogs.LuisServiceResult" /> with the best scored <see cref="T:Microsoft.Bot.Builder.Luis.Models.IntentRecommendation" /> and related <see cref="T:Microsoft.Bot.Builder.Luis.Models.LuisResult" />,
            or null if no one of <paramref name="results" /> contains any intents.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.LuisDialog.EnumerateHandlers(System.Object)">
            <summary>
            Enumerate the handlers based on the attributes on the dialog instance.
            </summary>
            <param name="dialog">The dialog.</param>
            <returns>An enumeration of handlers.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.UrlToken">
            <summary>
            Allow object instances to serialized to URLs.  Base64 can not be stored in URLs due to special characters.
            </summary>
            <remarks>
            We use Bson and Gzip to make it small enough to fit within the maximum character limit of URLs.
            http://stackoverflow.com/a/32999062 suggests HttpServerUtility's UrlTokenEncode and UrlTokenDecode
            is not standards-compliant, but they seem to do the job.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.UrlToken.Encode``1(``0)">
            <summary>
            Encode an item to be stored in a url.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="item">The item instance.</param>
            <returns>The encoded token.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.UrlToken.Decode``1(System.String)">
            <summary>
            Decode an item from a url token.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="token">The item token.</param>
            <returns>The item instance.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.IDialog`1">
            <summary>
            A <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1"/> is a suspendable conversational process that produces a result of type <typeparamref name="T"/>.
            </summary>
            <remarks>
            Dialogs can call child dialogs or send messages to a user.
            Dialogs are suspended when waiting for a message from the user to the bot.
            Dialogs are resumed when the bot receives a message from the user.
            </remarks>
            <typeparam name="T">The result type.</typeparam>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.IDialog`1.StartAsync(Microsoft.Bot.Builder.Dialogs.IDialogContext)">
            <summary>
            The start of the code that represents the conversational dialog.
            </summary>
            <param name="context">The dialog context.</param>
            <returns>A task that represents the dialog start.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.IDialog">
            <summary>
            A <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog"/> is a suspendable conversational process that produces an ignored result.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.ResumeAfter`1">
            <summary>
            Encapsulates a method that represents the code to execute after a result is available.
            </summary>
            <remarks>
            The result is often a message from the user.
            </remarks>
            <typeparam name="T">The type of the result.</typeparam>
            <param name="context">The dialog context.</param>
            <param name="result">The result.</param>
            <returns>A task that represents the code that will resume after the result is available.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.StartAsync">
            <summary>
            Encapsulate a method that represents the code to start a dialog.
            </summary>
            <param name="context">The dialog context.</param>
            <returns>A task that represents the start code for a dialog.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.IBotContext">
            <summary>
            The context for the bot.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.IDialogContext">
            <summary>
            The context for the execution of a dialog's conversational process.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.PromptStyle">
            <summary>
            The style of generated prompt
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.Dialogs.PromptStyle.Auto">
            <summary>
            Generate buttons for choices and let connector generate the right style based on channel capabilities
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.Dialogs.PromptStyle.AutoText">
            <summary>
            Show choices as Text.
            </summary>
            <remarks> The prompt decides if it should generate the text inline or perline based on number of choices.</remarks>
        </member>
        <member name="F:Microsoft.Bot.Builder.Dialogs.PromptStyle.Inline">
            <summary>
            Show choices on the same line.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.Dialogs.PromptStyle.PerLine">
            <summary>
            Show choices with one per line.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.Dialogs.PromptStyle.None">
            <summary>
            Do not show possible choices in the prompt
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.PromptOptions`1">
            <summary>
            Options for <see cref="T:Microsoft.Bot.Builder.Dialogs.PromptDialog"/>.
            </summary>
            <typeparam name="T"> The type of the options.</typeparam>
        </member>
        <member name="F:Microsoft.Bot.Builder.Dialogs.PromptOptions`1.Prompt">
            <summary>
            The prompt.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.Dialogs.PromptOptions`1.Retry">
            <summary>
            What to display on retry.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.Dialogs.PromptOptions`1.Options">
            <summary>
            The prompt choices.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.Dialogs.PromptOptions`1.TooManyAttempts">
            <summary>
            What to display when user didn't say a valid response after <see cref="P:Microsoft.Bot.Builder.Dialogs.PromptOptions`1.Attempts"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Dialogs.PromptOptions`1.Attempts">
            <summary>
            Maximum number of attempts.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.Dialogs.PromptOptions`1.PromptStyler">
            <summary>
            Styler of the prompt <see cref="T:Microsoft.Bot.Builder.Dialogs.PromptStyler"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Dialogs.PromptOptions`1.DefaultRetry">
            <summary>
            Default retry prompt that is used if <see cref="F:Microsoft.Bot.Builder.Dialogs.PromptOptions`1.Retry"/> is null.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Dialogs.PromptOptions`1.DefaultTooManyAttempts">
            <summary>
            Default <see cref="F:Microsoft.Bot.Builder.Dialogs.PromptOptions`1.TooManyAttempts"/> string that is used if <see cref="F:Microsoft.Bot.Builder.Dialogs.PromptOptions`1.TooManyAttempts"/> is null.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.PromptOptions`1.#ctor(System.String,System.String,System.String,System.Collections.Generic.IList{`0},System.Int32,Microsoft.Bot.Builder.Dialogs.PromptStyler)">
            <summary>
            Constructs the prompt options.
            </summary>
            <param name="prompt"> The prompt.</param>
            <param name="retry"> What to display on retry.</param>
            <param name="tooManyAttempts"> What to display when user didn't say a valid response after <see cref="P:Microsoft.Bot.Builder.Dialogs.PromptOptions`1.Attempts"/>.</param>
            <param name="options"> The prompt choices.</param>
            <param name="attempts"> Maximum number of attempts.</param>
            <param name="promptStyler"> The prompt styler.</param>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.PromptStyler">
            <summary>
            Styles a prompt
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.Dialogs.PromptStyler.PromptStyle">
            <summary>
            Style of the prompt <see cref="T:Microsoft.Bot.Builder.Dialogs.PromptStyle"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.PromptStyler.Apply``1(Microsoft.Bot.Connector.IMessageActivity@,System.String,System.Collections.Generic.IList{``0},Microsoft.Bot.Builder.Dialogs.PromptStyle)">
            <summary>
            <see cref="M:Microsoft.Bot.Builder.Dialogs.PromptStyler.Apply(Microsoft.Bot.Connector.IMessageActivity@,System.String)"/>.
            </summary>
            <typeparam name="T"> The type of the options.</typeparam>
            <param name="message"> The message.</param>
            <param name="prompt"> The prompt.</param>
            <param name="options"> The options.</param>
            <param name="promptStyle"> The prompt style.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.PromptStyler.Apply(Microsoft.Bot.Connector.IMessageActivity@,System.String)">
            <summary>
            Style a prompt and populate the <see cref="P:Microsoft.Bot.Connector.IMessageActivity.Text"/>.
            </summary>
            <param name="message"> The message that will contain the prompt.</param>
            <param name="prompt"> The prompt.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.PromptStyler.Apply``1(Microsoft.Bot.Connector.IMessageActivity@,System.String,System.Collections.Generic.IList{``0})">
            <summary>
            Style a prompt and populate the message based on <see cref="F:Microsoft.Bot.Builder.Dialogs.PromptStyler.PromptStyle"/>.
            </summary>
            <typeparam name="T"> The type of the options.</typeparam>
            <param name="message"> The message that will contain the prompt.</param>
            <param name="prompt"> The prompt.</param>
            <param name="options"> The options.</param>
            <remarks>
            <typeparamref name="T"/> should implement <see cref="M:System.Object.ToString"/>.
            </remarks>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.PromptDialog">
            <summary>   Dialog factory for simple prompts. </summary>
            <remarks>The exception <see cref="T:Microsoft.Bot.Builder.Dialogs.TooManyAttemptsException"/> will be thrown if the number of allowed attempts is exceeded.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.PromptDialog.Text(Microsoft.Bot.Builder.Dialogs.IDialogContext,Microsoft.Bot.Builder.Dialogs.ResumeAfter{System.String},System.String,System.String,System.Int32)">
            <summary>   Prompt for a string. </summary>
            <param name="context">  The context. </param>
            <param name="resume">   Resume handler. </param>
            <param name="prompt">   The prompt to show to the user. </param>
            <param name="retry">    What to show on retry. </param>
            <param name="attempts"> The number of times to retry. </param>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.PromptDialog.Confirm(Microsoft.Bot.Builder.Dialogs.IDialogContext,Microsoft.Bot.Builder.Dialogs.ResumeAfter{System.Boolean},System.String,System.String,System.Int32,Microsoft.Bot.Builder.Dialogs.PromptStyle)">
            <summary>   Ask a yes/no question. </summary>
            <param name="context">  The context. </param>
            <param name="resume">   Resume handler. </param>
            <param name="prompt">   The prompt to show to the user. </param>
            <param name="retry">    What to show on retry. </param>
            <param name="attempts"> The number of times to retry. </param>
            <param name="promptStyle"> Style of the prompt <see cref="T:Microsoft.Bot.Builder.Dialogs.PromptStyle" /> </param>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.PromptDialog.Confirm(Microsoft.Bot.Builder.Dialogs.IDialogContext,Microsoft.Bot.Builder.Dialogs.ResumeAfter{System.Boolean},Microsoft.Bot.Builder.Dialogs.PromptOptions{System.String})">
            <summary>
            Ask a yes/no questions.
            </summary>
            <param name="context"> The dialog context.</param>
            <param name="resume"> Resume handler.</param>
            <param name="promptOptions"> The options for the prompt, <see cref="T:Microsoft.Bot.Builder.Dialogs.PromptOptions`1"/>.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.PromptDialog.Number(Microsoft.Bot.Builder.Dialogs.IDialogContext,Microsoft.Bot.Builder.Dialogs.ResumeAfter{System.Int64},System.String,System.String,System.Int32)">
            <summary>   Prompt for a long. </summary>
            <param name="context">  The context. </param>
            <param name="resume">   Resume handler. </param>
            <param name="prompt">   The prompt to show to the user. </param>
            <param name="retry">    What to show on retry. </param>
            <param name="attempts"> The number of times to retry. </param>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.PromptDialog.Number(Microsoft.Bot.Builder.Dialogs.IDialogContext,Microsoft.Bot.Builder.Dialogs.ResumeAfter{System.Double},System.String,System.String,System.Int32)">
            <summary>   Prompt for a double. </summary>
            <param name="context">  The context. </param>
            <param name="resume">   Resume handler. </param>
            <param name="prompt">   The prompt to show to the user. </param>
            <param name="retry">    What to show on retry. </param>
            <param name="attempts"> The number of times to retry. </param>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.PromptDialog.Choice``1(Microsoft.Bot.Builder.Dialogs.IDialogContext,Microsoft.Bot.Builder.Dialogs.ResumeAfter{``0},System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.Int32,Microsoft.Bot.Builder.Dialogs.PromptStyle)">
            <summary>   Prompt for one of a set of choices. </summary>
            <param name="context">  The context. </param>
            <param name="resume">   Resume handler. </param>
            <param name="options">  The possible options all of which must be convertible to a string.</param>
            <param name="prompt">   The prompt to show to the user. </param>
            <param name="retry">    What to show on retry. </param>
            <param name="attempts"> The number of times to retry. </param>
            <param name="promptStyle"> Style of the prompt <see cref="T:Microsoft.Bot.Builder.Dialogs.PromptStyle" /> </param>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.PromptDialog.Choice``1(Microsoft.Bot.Builder.Dialogs.IDialogContext,Microsoft.Bot.Builder.Dialogs.ResumeAfter{``0},Microsoft.Bot.Builder.Dialogs.PromptOptions{``0})">
            <summary>
            Prompt for one of a set of choices.
            </summary>
            <remarks><typeparamref name="T"/> should implement <see cref="M:System.Object.ToString"/></remarks>
            <typeparam name="T"> The type of the options.</typeparam>
            <param name="context"> The dialog context.</param>
            <param name="resume"> Resume handler.</param>
            <param name="promptOptions"> The prompt options.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.PromptDialog.Attachment(Microsoft.Bot.Builder.Dialogs.IDialogContext,Microsoft.Bot.Builder.Dialogs.ResumeAfter{System.Collections.Generic.IEnumerable{Microsoft.Bot.Connector.Attachment}},System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Int32)">
            <summary>
            Prompt for an attachment
            </summary>
            <param name="context"> The dialog context. </param>
            <param name="resume"> Resume handler. </param>
            <param name="prompt"> The prompt to show to the user. </param>
            <param name="contentTypes">The optional content types the attachment type should be part of</param>
            <param name="retry"> What to show on retry</param>
            <param name="attempts"> The number of times to retry</param>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.PromptDialog.PromptString">
            <summary>   Prompt for a text string. </summary>
            <remarks>   Normally used through <see cref="M:Microsoft.Bot.Builder.Dialogs.PromptDialog.Text(Microsoft.Bot.Builder.Dialogs.IDialogContext,Microsoft.Bot.Builder.Dialogs.ResumeAfter{System.String},System.String,System.String,System.Int32)"/>.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.PromptDialog.PromptString.#ctor(System.String,System.String,System.Int32)">
            <summary>   Constructor for a prompt string dialog. </summary>
            <param name="prompt">   The prompt. </param>
            <param name="retry">    What to display on retry. </param>
            <param name="attempts"> Maximum number of attempts. </param>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.PromptDialog.PromptConfirm">
            <summary>   Prompt for a confirmation. </summary>
            <remarks>   Normally used through <see cref="M:Microsoft.Bot.Builder.Dialogs.PromptDialog.Confirm(Microsoft.Bot.Builder.Dialogs.IDialogContext,Microsoft.Bot.Builder.Dialogs.ResumeAfter{System.Boolean},System.String,System.String,System.Int32,Microsoft.Bot.Builder.Dialogs.PromptStyle)"/>.</remarks>
        </member>
        <member name="F:Microsoft.Bot.Builder.Dialogs.PromptDialog.PromptConfirm.Yes">
            <summary>
            Index of yes descriptions.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.Dialogs.PromptDialog.PromptConfirm.No">
            <summary>
            Index of no descriptions.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Dialogs.PromptDialog.PromptConfirm.Options">
            <summary>
            The yes, no options for confirmation prompt
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Dialogs.PromptDialog.PromptConfirm.Patterns">
            <summary>
            The patterns for matching yes/no responses in the confirmation prompt.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.PromptDialog.PromptConfirm.#ctor(System.String,System.String,System.Int32,Microsoft.Bot.Builder.Dialogs.PromptStyle)">
            <summary>   Constructor for a prompt confirmation dialog. </summary>
            <param name="prompt">   The prompt. </param>
            <param name="retry">    What to display on retry. </param>
            <param name="attempts"> Maximum number of attempts. </param>
            <param name="promptStyle"> Style of the prompt <see cref="T:Microsoft.Bot.Builder.Dialogs.PromptStyle" /> </param>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.PromptDialog.PromptConfirm.#ctor(Microsoft.Bot.Builder.Dialogs.PromptOptions{System.String})">
            <summary>
            Constructor for a prompt confirmation dialog.
            </summary>
            <param name="promptOptions"> THe prompt options.</param>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.PromptDialog.PromptInt64">
            <summary>   Prompt for a confirmation. </summary>
            <remarks>   Normally used through <see cref="M:Microsoft.Bot.Builder.Dialogs.PromptDialog.Number(Microsoft.Bot.Builder.Dialogs.IDialogContext,Microsoft.Bot.Builder.Dialogs.ResumeAfter{System.Int64},System.String,System.String,System.Int32)"/>.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.PromptDialog.PromptInt64.#ctor(System.String,System.String,System.Int32)">
            <summary>   Constructor for a prompt int64 dialog. </summary>
            <param name="prompt">   The prompt. </param>
            <param name="retry">    What to display on retry. </param>
            <param name="attempts"> Maximum number of attempts. </param>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.PromptDialog.PromptDouble">
            <summary>   Prompt for a double. </summary>
            <remarks>   Normally used through <see cref="M:Microsoft.Bot.Builder.Dialogs.PromptDialog.Number(Microsoft.Bot.Builder.Dialogs.IDialogContext,Microsoft.Bot.Builder.Dialogs.ResumeAfter{System.Double},System.String,System.String,System.Int32)"/>.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.PromptDialog.PromptDouble.#ctor(System.String,System.String,System.Int32)">
            <summary>   Constructor for a prompt double dialog. </summary>
            <param name="prompt">   The prompt. </param>
            <param name="retry">    What to display on retry. </param>
            <param name="attempts"> Maximum number of attempts. </param>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.PromptDialog.PromptChoice`1">
            <summary>   Prompt for a choice from a set of choices. </summary>
            <remarks>   Normally used through <see cref="M:Microsoft.Bot.Builder.Dialogs.PromptDialog.Choice``1(Microsoft.Bot.Builder.Dialogs.IDialogContext,Microsoft.Bot.Builder.Dialogs.ResumeAfter{``0},System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.Int32,Microsoft.Bot.Builder.Dialogs.PromptStyle)"/>.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.PromptDialog.PromptChoice`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.String,System.String,System.Int32,Microsoft.Bot.Builder.Dialogs.PromptStyle)">
            <summary>   Constructor for a prompt choice dialog. </summary>
            <param name="options">Enumerable of the options to choose from.</param>
            <param name="prompt">   The prompt. </param>
            <param name="retry">    What to display on retry. </param>
            <param name="attempts"> Maximum number of attempts. </param>
            <param name="promptStyle"> Style of the prompt <see cref="T:Microsoft.Bot.Builder.Dialogs.PromptStyle" /> </param>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.PromptDialog.PromptChoice`1.#ctor(Microsoft.Bot.Builder.Dialogs.PromptOptions{`0})">
            <summary>
            Constructs a choice dialog.
            </summary>
            <param name="promptOptions"> The prompt options</param>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.PromptDialog.PromptAttachment">
            <summary> Prompt for an attachment</summary>
            <remarks> Normally used through <see cref="M:Microsoft.Bot.Builder.Dialogs.PromptDialog.Attachment(Microsoft.Bot.Builder.Dialogs.IDialogContext,Microsoft.Bot.Builder.Dialogs.ResumeAfter{System.Collections.Generic.IEnumerable{Microsoft.Bot.Connector.Attachment}},System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Int32)"/>.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.PromptDialog.PromptAttachment.#ctor(System.String,System.String,System.Int32,System.Collections.Generic.IEnumerable{System.String})">
            <summary>   Constructor for a prompt attachment dialog. </summary> 
            <param name="prompt">   The prompt. </param> 
            <param name="retry">    What to display on retry. </param> 
            <param name="attempts"> The optional content types the attachment type should be part of.</param>
            <param name="contentTypes"> The content types that is used to filter the attachments. Null implies any content type.</param>
        </member>
        <member name="T:Microsoft.Bot.Builder.Dialogs.IAwaitable`1">
            <summary>
            Explicit interface to support the compiling of async/await.
            </summary>
            <typeparam name="T">The type of the contained value.</typeparam>
        </member>
        <member name="M:Microsoft.Bot.Builder.Dialogs.IAwaitable`1.GetAwaiter">
            <summary>
            Get the awaiter for this awaitable item.
            </summary>
            <returns>The awaiter.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.Internals.Fibers.FiberModule">
            <summary>
            Autofac module for Fiber components.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Internals.Fibers.FiberModule.DoNotSerialize(Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
            Eagerly enumerate the services keyed with <see cref="F:Microsoft.Bot.Builder.Internals.Fibers.FiberModule.Key_DoNotSerialize"/> that will not be serialized.
            </summary>
            <remarks>
            Services marked with <see cref="F:Microsoft.Bot.Builder.Internals.Fibers.FiberModule.Key_DoNotSerialize"/> will not serialize their dependencies either.
            </remarks>
        </member>
        <member name="T:Microsoft.Bot.Builder.Internals.Fibers.FiberModule`1">
            <summary>
            Autofac module for Fiber components.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Builder.Internals.Fibers.IScope`1">
            <summary>
            Provide an abstraction to serialize access to an item for a using-block scope of code.
            </summary>
            <typeparam name="T">The item type.</typeparam>
        </member>
        <member name="M:Microsoft.Bot.Builder.Internals.Fibers.IScope`1.WithScopeAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Enter a scope of code keyed by item.
            </summary>
            <param name="item">The item.</param>
            <param name="token">The cancellation token.</param>
            <returns>A task whose completion produces an IDisposable for the scope.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.Internals.Fibers.Serialization.ISurrogateProvider">
            <summary>
            Extend <see cref="T:System.Runtime.Serialization.ISerializationSurrogate"/> with a "tester" method used by <see cref="T:Microsoft.Bot.Builder.Internals.Fibers.Serialization.SurrogateSelector"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Internals.Fibers.Serialization.ISurrogateProvider.Handles(System.Type,System.Runtime.Serialization.StreamingContext,System.Int32@)">
            <summary>
            Determine whether this surrogate provider handles this type.
            </summary>
            <param name="type">The query type.</param>
            <param name="context">The serialization context.</param>
            <param name="priority">The priority of this provider.</param>
            <returns>True if this provider handles this type, false otherwise.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.Advanced.FieldReflector`1">
            <summary>   Fill in field information through reflection.</summary>
            <remarks>   The resulting information can be overriden through the fluent interface.</remarks>
            <typeparam name="T">    The form state. </typeparam>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.FieldReflector`1.#ctor(System.String,System.Boolean)">
            <summary>   Construct an <see cref="T:Microsoft.Bot.Builder.FormFlow.Advanced.IField`1"/> through reflection. </summary>
            <param name="name">                 Path to the field in your form state. </param>
            <param name="ignoreAnnotations">    True to ignore annotations. </param>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.Advanced.FieldReflector`1._ignoreAnnotations">
            <summary>   True to ignore annotations. </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.Advanced.FieldReflector`1._path">
            <summary>   Path to field value in state. </summary>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.Advanced.Localizer">
            <summary>   A resource localizer. </summary>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.Advanced.Confirmation`1">
            <summary>
            Confirmation 
            </summary>
            <typeparam name="T">Form state.</typeparam>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.Confirmation`1.#ctor(Microsoft.Bot.Builder.FormFlow.PromptAttribute,Microsoft.Bot.Builder.FormFlow.ActiveDelegate{`0},System.Collections.Generic.IEnumerable{System.String},Microsoft.Bot.Builder.FormFlow.IForm{`0})">
            <summary>
            Construct a confirmation.
            </summary>
            <param name="prompt">Confirmation prompt expressed using \ref patterns.</param>
            <param name="condition">Delegate for whether confirmation applies.</param>
            <param name="dependencies">Fields that must have values before confirmation can run.</param>
            <param name="form">Form that contains confirmation.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.Confirmation`1.#ctor(Microsoft.Bot.Builder.FormFlow.MessageDelegate{`0},Microsoft.Bot.Builder.FormFlow.ActiveDelegate{`0},System.Collections.Generic.IEnumerable{System.String},Microsoft.Bot.Builder.FormFlow.IForm{`0})">
            <summary>
            Construct a confirmation dynamically.
            </summary>
            <param name="generateMessage">Delegate for building confirmation.</param>
            <param name="condition">Delegate to see if confirmation is active.</param>
            <param name="dependencies">Fields that must have values before confirmation can run.</param>
            <param name="form">Form that contains confirmation.</param>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.Advanced.DefineAsyncDelegate`1">
            <summary>   Define field delegate. </summary>
            <typeparam name="T">    Form state type. </typeparam>
            <param name="state">    Form state. </param>
            <param name="field">Field being dynamically defined.</param>
            <returns>True if field is defined.</returns>
            <remarks>Delegate for dynamically defining a field prompt and recognizer.  You can make use of the fluent methods
                     on <see cref="T:Microsoft.Bot.Builder.FormFlow.Advanced.Field`1"/> to change the characteristics of the field.</remarks>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.Advanced.NextDelegate`1">
            <summary>
            A delegate for deciding on the next step in the form to execute.
            </summary>
            <typeparam name="T">Form state type.</typeparam>
            <param name="value">Value just entered for field.</param>
            <param name="state">Current state object.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.Advanced.Field`1">
            <summary>Base class with declarative implementation of IField. </summary>
            <typeparam name="T">Underlying form state.</typeparam>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.Field`1.#ctor(System.String,Microsoft.Bot.Builder.FormFlow.Advanced.FieldRole)">
            <summary>   Construct field. </summary>
            <param name="name"> Name of field. </param>
            <param name="role"> Role field plays in form. </param>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.Field`1.SetFieldDescription(System.String)">
            <summary>Set the field description. </summary>
            <param name="description">Field description. </param>
            <returns>   A <see cref="T:Microsoft.Bot.Builder.FormFlow.Advanced.Field`1"/>. </returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.Field`1.SetFieldDescription(Microsoft.Bot.Builder.FormFlow.DescribeAttribute)">
            <summary>
            Set the full field description.
            </summary>
            <param name="description">The field description.</param>
            <returns>A <see cref="T:Microsoft.Bot.Builder.FormFlow.Advanced.Field`1"/>. </returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.Field`1.SetFieldTerms(System.String[])">
            <summary>   Set the terms associated with the field. </summary>
            <param name="terms">    The terms. </param>
            <returns>   A <see cref="T:Microsoft.Bot.Builder.FormFlow.Advanced.Field`1"/>. </returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.Field`1.AddDescription(System.Object,System.String,System.String,System.String)">
            <summary>   Adds a description for a value. </summary>
            <param name="value">        The value. </param>
            <param name="description">  Description of the value. </param>
            <param name="image">Image to use for value as button.</param>
            <param name="message">Message to return when button is pressed.</param>
            <returns>   A <see cref="T:Microsoft.Bot.Builder.FormFlow.Advanced.Field`1"/>. </returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.Field`1.AddDescription(System.Object,Microsoft.Bot.Builder.FormFlow.DescribeAttribute)">
            <summary>   Adds a full description for a value. </summary>
            <param name="value">        The value. </param>
            <param name="description">  Description of the value. </param>
            <returns>   A <see cref="T:Microsoft.Bot.Builder.FormFlow.Advanced.Field`1"/>. </returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.Field`1.AddTerms(System.Object,System.String[])">
            <summary>   Adds terms for a value. </summary>
            <param name="value">    The value. </param>
            <param name="terms">    The terms. </param>
            <returns>   A <see cref="T:Microsoft.Bot.Builder.FormFlow.Advanced.Field`1"/>. </returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.Field`1.AddTerms(System.Object,Microsoft.Bot.Builder.FormFlow.TermsAttribute)">
            <summary>   Adds terms for a value. </summary>
            <param name="value">    The value. </param>
            <param name="terms">    The terms to add. </param>
            <returns>   A <see cref="T:Microsoft.Bot.Builder.FormFlow.Advanced.Field`1"/>. </returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.Field`1.RemoveValue(System.Object)">
            <summary>   Removes the description and terms associated with a value. </summary>
            <param name="value">    The value to remove. </param>
            <returns>   A <see cref="T:Microsoft.Bot.Builder.FormFlow.Advanced.Field`1"/>. </returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.Field`1.RemoveValues">
            <summary>   Removes all values and their associated descriptions and terms. </summary>
            <returns>   A <see cref="T:Microsoft.Bot.Builder.FormFlow.Advanced.Field`1"/>.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.Field`1.SetType(System.Type)">
            <summary>   Sets the type of the underlying field state. </summary>
            <param name="type"> The field type. </param>
            <returns>   A <see cref="T:Microsoft.Bot.Builder.FormFlow.Advanced.Field`1"/>. </returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.Field`1.SetOptional(System.Boolean)">
            <summary>   Set whether or not a field is optional. </summary>
            <param name="optional"> True if field is optional. </param>
            <returns>   A <see cref="T:Microsoft.Bot.Builder.FormFlow.Advanced.Field`1"/>. </returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.Field`1.SetAllowsMultiple(System.Boolean)">
            <summary>   Sets whether or not multiple values are allowed. </summary>
            <param name="multiple"> True if multiple values are allowed. </param>
            <returns>   A <see cref="T:Microsoft.Bot.Builder.FormFlow.Advanced.Field`1"/>. </returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.Field`1.SetIsNullable(System.Boolean)">
            <summary>   Set whether or not field is nullable. </summary>
            <param name="nullable"> True if field is nullable. </param>
            <returns>   A <see cref="T:Microsoft.Bot.Builder.FormFlow.Advanced.Field`1"/>. </returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.Field`1.SetActive(Microsoft.Bot.Builder.FormFlow.ActiveDelegate{`0})">
            <summary>   Define a delegate for checking state to see if field applies. </summary>
            <param name="condition">    The condition delegate. </param>
            <returns>   A <see cref="T:Microsoft.Bot.Builder.FormFlow.Advanced.Field`1"/>. </returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.Field`1.SetDefine(Microsoft.Bot.Builder.FormFlow.Advanced.DefineAsyncDelegate{`0})">
            <summary>   Define a delegate for dynamically defining field. </summary>
            <param name="definition">   The definition delegate. </param>
            <returns>   A <see cref="T:Microsoft.Bot.Builder.FormFlow.Advanced.Field`1"/>. </returns>
            <remarks>When you dynamically define a field through this delegate you can use all of the fluent methods
                     defined on <see cref="T:Microsoft.Bot.Builder.FormFlow.Advanced.Field`1"/> to change the descriptions and terms dynamically.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.Field`1.SetPrompt(Microsoft.Bot.Builder.FormFlow.PromptAttribute)">
            <summary>   Sets the field prompt. </summary>
            <param name="prompt">   The prompt. </param>
            <returns>   A <see cref="T:Microsoft.Bot.Builder.FormFlow.Advanced.Field`1"/>. </returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.Field`1.SetRecognizer(Microsoft.Bot.Builder.FormFlow.Advanced.IRecognize{`0})">
            <summary> Sets the recognizer for the field. </summary>
            <param name="recognizer">   The recognizer for the field. </param>
            <returns>   A <see cref="T:Microsoft.Bot.Builder.FormFlow.Advanced.Field`1"/>. </returns>
            <remarks>
            This should only be called when you are dynamically defining a field using a <see cref="T:Microsoft.Bot.Builder.FormFlow.Advanced.DefineAsyncDelegate`1"/> because
            recognizers usually require the field and often change if the localization changes.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.Field`1.ReplaceTemplate(Microsoft.Bot.Builder.FormFlow.TemplateAttribute)">
            <summary>   Replace a template in the field. </summary>
            <param name="template"> The template. </param>
            <returns>   A <see cref="T:Microsoft.Bot.Builder.FormFlow.Advanced.Field`1"/>. </returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.Field`1.SetValidate(Microsoft.Bot.Builder.FormFlow.ValidateAsyncDelegate{`0})">
            <summary>   Set the field validation. </summary>
            <param name="validate"> The validator. </param>
            <returns>   A <see cref="T:Microsoft.Bot.Builder.FormFlow.Advanced.Field`1"/>. </returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.Field`1.SetLimits(System.Double,System.Double)">
            <summary>   Set numeric limits. </summary>
            <param name="min">  The minimum. </param>
            <param name="max">  The maximum. </param>
            <returns>   A <see cref="T:Microsoft.Bot.Builder.FormFlow.Advanced.Field`1"/>. </returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.Field`1.SetPattern(System.String)">
            <summary>
            Regular expression for validating strings.
            </summary>
            <param name="pattern">Validation regular expression.</param>
            <returns>   A <see cref="T:Microsoft.Bot.Builder.FormFlow.Advanced.Field`1"/>. </returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.Field`1.SetDependencies(System.String[])">
            <summary>   Define the fields this field depends on. </summary>
            <param name="dependencies"> A variable-length parameters list containing dependencies. </param>
            <returns>   A <see cref="T:Microsoft.Bot.Builder.FormFlow.Advanced.Field`1"/>. </returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.Field`1.SetNext(Microsoft.Bot.Builder.FormFlow.Advanced.NextDelegate{`0})">
            <summary>
            Delegate for deciding on the next form step to execute.
            </summary>
            <returns>A <see cref="T:Microsoft.Bot.Builder.FormFlow.Advanced.Field`1"/>.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.Advanced.Fields`1">
            <summary>
            Dictionary of all fields indexed by name.
            </summary>
            <typeparam name="T">Underlying form state.</typeparam>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.Advanced.Fields`1._fields">
            <summary>   Mapping from field name to field definition. </summary>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.Advanced.IFieldState`1">
            <summary>
            Interface that defines basic access to a field.
            </summary>
            <typeparam name="T">The form state that is read or written to.</typeparam>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.IFieldState`1.GetValue(`0)">
            <summary>
            Get this field value from form state.
            </summary>
            <param name="state">Form state to get field value from.</param>
            <returns>Current value found in state.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.IFieldState`1.SetValue(`0,System.Object)">
            <summary>
            Set this field value in form state.
            </summary>
            <param name="state">Form state to set field value in.</param>
            <param name="value">New value.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.IFieldState`1.IsUnknown(`0)">
            <summary>
            Test to see if the field value form state has a value.
            </summary>
            <param name="state">Form state to check.</param>
            <returns>True if value is unknown.</returns>
            <remarks>
            For value types (numbers, bools, date time) a value is unknown only if the field is nullable and it is null.
            For enum based values (both simple and enumerated) they can also be nullable or the 0 enum value if not nullable.
            For non value types like string the test is to see if the field is actually null.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.IFieldState`1.SetUnknown(`0)">
            <summary>
            Set this field value in form state to unknown.
            </summary>
            <param name="state">Form state with field value to set to unknown.</param>
            <remarks>
            For value types (numbers, bools, date time) the value is set to null if nullable.
            For enum types it is set to null if nullable or 0 if not.  
            For non value types like string set the value to null.
            </remarks>
        </member>
        <member name="P:Microsoft.Bot.Builder.FormFlow.Advanced.IFieldState`1.Type">
            <summary>   Gets the type of the field. </summary>
            <value> The type. </value>
        </member>
        <member name="P:Microsoft.Bot.Builder.FormFlow.Advanced.IFieldState`1.Optional">
            <summary>
            Test to see if field is optional which means that an unknown value is legal.
            </summary>
            <returns>True if field is optional.</returns>
        </member>
        <member name="P:Microsoft.Bot.Builder.FormFlow.Advanced.IFieldState`1.IsNullable">
            <summary>
            Test to see if field is nullable. 
            </summary>
            <returns>True if field is nullable.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.IFieldState`1.Limits(System.Double@,System.Double@)">
            <summary>
            Limits of numeric values.
            </summary>
            <param name="min">Minimum possible value.</param>
            <param name="max">Maximum possible value.</param>
            <returns>True if limits limit the underlying data type.</returns>
            <remarks>
            This typically reflects the result of setting <see cref="T:Microsoft.Bot.Builder.FormFlow.NumericAttribute"/> limits on the possible values.</remarks>
        </member>
        <member name="P:Microsoft.Bot.Builder.FormFlow.Advanced.IFieldState`1.Pattern">
            <summary>
            Regular expression for validating a string.
            </summary>
            <returns>Validation regular expression.</returns>
            <remarks> This typically reflects the result of setting <see cref="T:Microsoft.Bot.Builder.FormFlow.PatternAttribute"/>.</remarks>
        </member>
        <member name="P:Microsoft.Bot.Builder.FormFlow.Advanced.IFieldState`1.Dependencies">
            <summary>
            Returns the other fields this one depends on.
            </summary>
            <returns>List of field names this one depends on.</returns>
            <remarks>This is mainly useful for <see cref="T:Microsoft.Bot.Builder.FormFlow.Advanced.Confirmation`1"/> fields.</remarks>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.Advanced.FieldRole">
            <summary>
            The role the field plays in a form.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.Advanced.FieldRole.Value">
            <summary>
            Field is used to get a value to set in the form state.
            </summary>
            <remarks>This is the kind of field generated by <see cref="M:Microsoft.Bot.Builder.FormFlow.IFormBuilder`1.Field(Microsoft.Bot.Builder.FormFlow.Advanced.IField{`0})"/>.</remarks>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.Advanced.FieldRole.Confirm">
            <summary>
            Field is used to confirm some settings during the dialog.
            </summary>
            <remarks>
            This is the kind of field generated by <see cref="M:Microsoft.Bot.Builder.FormFlow.IFormBuilder`1.Confirm(System.String,Microsoft.Bot.Builder.FormFlow.ActiveDelegate{`0},System.Collections.Generic.IEnumerable{System.String})"/>.
            </remarks>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.Advanced.IFieldDescription">
            <summary>
            Describe the information displayed about a field and its values.
            </summary>
            <remarks>
            Throughout this class Description refers to the name of a field or a value
            whereas "terms" tell what people can type to match the field or terms in it.
            When generating terms it is a good idea to include anything that might be reasonable
            for someone to type.  The form dialog itself will help clarify any ambiguity.  One
            way to do this is to use <see cref="P:Microsoft.Bot.Builder.FormFlow.TermsAttribute.MaxPhrase"/> which ensures that <see cref="M:Microsoft.Bot.Builder.FormFlow.Advanced.Language.GenerateTerms(System.String,System.Int32)"/>
            is called on your base terms.
            </remarks>
        </member>
        <member name="P:Microsoft.Bot.Builder.FormFlow.Advanced.IFieldDescription.Role">
            <summary>
            Role field plays in a form.
            </summary>
            <returns>Role field plays in form.</returns>
        </member>
        <member name="P:Microsoft.Bot.Builder.FormFlow.Advanced.IFieldDescription.FieldDescription">
            <summary>
            Decription of the field itself.
            </summary>
            <returns>Field description.</returns>
            <remarks>
            This is the value that will be used in \ref patterns by {&amp;}, choices with {||} or buttons.
            </remarks>
        </member>
        <member name="P:Microsoft.Bot.Builder.FormFlow.Advanced.IFieldDescription.FieldTerms">
            <summary>
            Terms for matching this field.
            </summary>
            <returns>List of term regex for matching the field name.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.IFieldDescription.ValueDescription(System.Object)">
            <summary>
            Return the description of a specific value.
            </summary>
            <param name="value">Value being described.</param>
            <returns>Description of value.</returns>
        </member>
        <member name="P:Microsoft.Bot.Builder.FormFlow.Advanced.IFieldDescription.ValueDescriptions">
            <summary>
            Return all possible value descriptions in order to support enumeration.
            </summary>
            <returns>All possible value descriptions.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.IFieldDescription.Terms(System.Object)">
            <summary>
            Given a value return terms that can be used in a dialog to match the object.
            </summary>
            <param name="value">Value that would result from a match.</param>
            <returns>Enumeration of regex.</returns>
        </member>
        <member name="P:Microsoft.Bot.Builder.FormFlow.Advanced.IFieldDescription.Values">
            <summary>
            All possible values or null if it is a data type like number.
            </summary>
            <returns>All possible values.</returns>
        </member>
        <member name="P:Microsoft.Bot.Builder.FormFlow.Advanced.IFieldDescription.AllowsMultiple">
            <summary>
            Are multiple matches allowed.
            </summary>
            <returns>True if more than one value is allowed.</returns>
            <remarks>This is true is you have a list of enumerated values.</remarks>
        </member>
        <member name="P:Microsoft.Bot.Builder.FormFlow.Advanced.IFieldDescription.AllowDefault">
            <summary>
            Allow the default value as an option.
            </summary>
            <returns>True if default values are allowed.</returns>
        </member>
        <member name="P:Microsoft.Bot.Builder.FormFlow.Advanced.IFieldDescription.AllowNumbers">
            <summary>
            Allow user input to match numbers shown with enumerated choices. 
            </summary>
            <returns>True if numbers are allowed as input.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.Advanced.IFieldResources">
            <summary>   Interface for saving/localizing generated resources. </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.IFieldResources.SaveResources">
            <summary>   Adds any string resources to form localizer. </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.IFieldResources.Localize">
            <summary>   Loads any string resources from the form localizer. </summary>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.Advanced.StepDirection">
            <summary>
            Direction for next step.
            </summary>
            <remarks>
            As each step in a form completes, the step can determine the next step to take.
            Usually this is just to move onto the next active, uncompleted step, but you can 
            also move back or present a list of choices to the user.
            A step is active if <see cref="M:Microsoft.Bot.Builder.FormFlow.Advanced.IFieldPrompt`1.Active(`0)"/> returns true on the current state.
            A step is ready if it has not already been successfully completed.
            </remarks>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.Advanced.StepDirection.Complete">
            <summary>
            The form is complete and <see cref="M:Microsoft.Bot.Builder.FormFlow.IFormBuilder`1.OnCompletion(Microsoft.Bot.Builder.FormFlow.OnCompletionAsyncDelegate{`0})"/> should be called.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.Advanced.StepDirection.Named">
            <summary>
            Move to a named step.  If there is more than one name, the user will be asked to choose.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.Advanced.StepDirection.Next">
            <summary>
            Move to the next step that is <see cref="M:Microsoft.Bot.Builder.FormFlow.Advanced.IFieldPrompt`1.Active(`0)"/> and uncompleted.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.Advanced.StepDirection.Previous">
            <summary>
            Move to the previously executed step.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.Advanced.StepDirection.Quit">
            <summary>
            Quit the form and return failure to the parent dialog.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.Advanced.StepDirection.Reset">
            <summary>
            Reset the form to start over.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.Advanced.NextStep">
            <summary>
            Next step to take.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.NextStep.#ctor">
            <summary>
            By default move on to the next active, uncompleted step.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.NextStep.#ctor(Microsoft.Bot.Builder.FormFlow.Advanced.StepDirection)">
            <summary>
            Move as specified in direction.
            </summary>
            <param name="direction">What step to do next.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.NextStep.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Ask the user which of the fields to move to next.
            </summary>
            <param name="names">Enumeration of possible next steps.</param>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.Advanced.NextStep.Direction">
            <summary>
            Direction for next step.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.Advanced.NextStep.Names">
            <summary>
            If this is a named step, one or more named steps to move to.  If there are more than one, the user will choose.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.Advanced.IFieldPrompt`1">
            <summary>
            This provides control information about a field.
            </summary>
            <typeparam name="T">Form state that is being completed.</typeparam>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.IFieldPrompt`1.Active(`0)">
            <summary>
            Test to see if field is currently active based on the current state.
            </summary>
            <returns>True if field is active.</returns>
            <remarks>
            One way to control this is to supply a <see cref="T:Microsoft.Bot.Builder.FormFlow.ActiveDelegate`1"/> to the 
            <see cref="M:Microsoft.Bot.Builder.FormFlow.IFormBuilder`1.Field(Microsoft.Bot.Builder.FormFlow.Advanced.IField{`0})"/> or <see cref="M:Microsoft.Bot.Builder.FormFlow.IFormBuilder`1.Confirm(System.String,Microsoft.Bot.Builder.FormFlow.ActiveDelegate{`0},System.Collections.Generic.IEnumerable{System.String})"/> steps.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.IFieldPrompt`1.Template(Microsoft.Bot.Builder.FormFlow.TemplateUsage)">
            <summary>
            Return a template for building a prompt.
            </summary>
            <param name="usage">Kind of template we are looking for.</param>
            <returns>NULL if no template, otherwise a template annotation.</returns>
        </member>
        <member name="P:Microsoft.Bot.Builder.FormFlow.Advanced.IFieldPrompt`1.Prompt">
            <summary>   Returns the prompt description. </summary>
            <returns>   An <see cref="T:Microsoft.Bot.Builder.FormFlow.Advanced.IPrompt`1"/> describing prompt and recognizer. </returns>
            <remarks>If a prompt is dyhamically computed this should be null until <see cref="M:Microsoft.Bot.Builder.FormFlow.Advanced.IFieldPrompt`1.DefineAsync(`0)"/> is called.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.IFieldPrompt`1.DefineAsync(`0)">
            <summary>
            Build the prompt and recognizer for dynamically defined fields.
            </summary>
            <returns>True if field is defined.</returns>
            <remarks>
                     This method is called before asking for <see cref="P:Microsoft.Bot.Builder.FormFlow.Advanced.IFieldPrompt`1.Prompt"/>.
                     This provides an opportunity to dynamically define the field based on the current
                     state or external information.  The <see cref="P:Microsoft.Bot.Builder.FormFlow.Advanced.IFieldState`1.Dependencies"/> method 
                     identifies fields that this one depends on.  All of them will be complete before the field
                     will be shown to the user, but this method might be called earlier in order to define the field
                     for things like status and initial matching or validation.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.IFieldPrompt`1.ValidateAsync(`0,System.Object)">
            <summary>
            Validate value to be set on state and return feedback if not valid.
            </summary>
            <param name="state">State before setting value.</param>
            <param name="value">Value to be set in field.</param>
            <returns>Result including feedback and if valid.</returns>
            <remarks>
            One way to control this is to supply a <see cref="T:Microsoft.Bot.Builder.FormFlow.ValidateAsyncDelegate`1"/> to the 
            <see cref="M:Microsoft.Bot.Builder.FormFlow.IFormBuilder`1.Field(Microsoft.Bot.Builder.FormFlow.Advanced.IField{`0})"/> or <see cref="M:Microsoft.Bot.Builder.FormFlow.IFormBuilder`1.Confirm(System.String,Microsoft.Bot.Builder.FormFlow.ActiveDelegate{`0},System.Collections.Generic.IEnumerable{System.String})"/> steps.
            </remarks>
        </member>
        <member name="P:Microsoft.Bot.Builder.FormFlow.Advanced.IFieldPrompt`1.Help">
            <summary>
            Return the help description for this field.
            </summary>
            <returns>The prompt to use for generating help.</returns>
            <remarks>
            Help is a mixture of field specific help, what a recognizer understands and available commands.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.IFieldPrompt`1.Next(System.Object,`0)">
            <summary>
            Next step to execute.
            </summary>
            <param name="value">Value in response to prompt.</param>
            <param name="state">Current form state.</param>
            <returns>Next step to execute.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.Advanced.IField`1">
            <summary>
            Interface for all the information about a specific field.
            </summary>
            <typeparam name="T">Form state interface applies to.</typeparam>
        </member>
        <member name="P:Microsoft.Bot.Builder.FormFlow.Advanced.IField`1.Name">
            <summary>
            Name of this field.
            </summary>
            <returns>Name of this field.</returns>
            <remarks>
            For a value field this is the path in the form state that leads to the value being filled in.
            For a confirm field this is a randomly generated name.
            </remarks>
        </member>
        <member name="P:Microsoft.Bot.Builder.FormFlow.Advanced.IField`1.Form">
            <summary>
            Form that owns this field
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.Advanced.IFields`1">
            <summary>
            Interface to track all of the fields in a form.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.IFields`1.Field(System.String)">
            <summary>
            Return a specific field or null if not present.
            </summary>
            <param name="name">Name of field to find.</param>
            <returns>Field description for name or null.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.Advanced.ILocalizer">
            <summary>   Interface for localizing string resources. </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.FormFlow.Advanced.ILocalizer.Culture">
            <summary>
            Return the localizer culture.
            </summary>
            <returns>Current culture.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.ILocalizer.Add(System.String,System.String)">
            <summary>
            Add a key and its translation.
            </summary>
            <param name="key">Key for indexing translation.</param>
            <param name="translation">Translation for key.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.ILocalizer.Add(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Add a key and a list of translations seperated by semi-colon.
            </summary>
            <param name="key">Key for indexing translation list.</param>
            <param name="list">List of translated terms.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.ILocalizer.Add(System.String,System.Collections.Generic.IReadOnlyDictionary{System.Object,Microsoft.Bot.Builder.FormFlow.DescribeAttribute})">
            <summary>   Adds value from dictionary under object if enumeration and prefix;object otherwise. </summary>
            <param name="prefix">       The resource prefix. </param>
            <param name="dictionary">   The dictionary to add. </param>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.ILocalizer.Add(System.String,System.Collections.Generic.IReadOnlyDictionary{System.Object,Microsoft.Bot.Builder.FormFlow.TermsAttribute})">
            <summary>   Adds values from dictionary seperated by semi-colons under object if enumeration and prefix;object otherwise.</summary>
            <param name="prefix">       The resource prefix. </param>
            <param name="dictionary">   The dictionary to add. </param>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.ILocalizer.Add(System.String,System.Collections.Generic.IReadOnlyDictionary{Microsoft.Bot.Builder.FormFlow.TemplateUsage,Microsoft.Bot.Builder.FormFlow.TemplateAttribute})">
            <summary>   Adds patterns from template seperated by semi-colons under prefix;usage. </summary>
            <param name="prefix">       The resource prefix. </param>
            <param name="templates">    The template dictionary to add. </param>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.ILocalizer.Add(System.String,Microsoft.Bot.Builder.FormFlow.TemplateAttribute)">
            <summary>   Adds patterns from template seperated by semi-colons under prefix;usage.</summary>
            <param name="prefix">       The resource prefix. </param>
            <param name="template">     The template to add. </param>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.ILocalizer.Lookup(System.String,System.String@)">
            <summary>
            Translate a key to a translation.
            </summary>
            <param name="key">Key to lookup.</param>
            <param name="value">Value to set if present.</param>
            <returns>True if value is found. </returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.ILocalizer.LookupValues(System.String,System.String[]@)">
            <summary>
            Translate a key to an array of values.
            </summary>
            <param name="key">Key to lookup.</param>
            <param name="values">Array value to set if present.</param>
            <returns>True if value is found. </returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.ILocalizer.LookupDictionary(System.String,System.Collections.Generic.IDictionary{System.Object,Microsoft.Bot.Builder.FormFlow.DescribeAttribute})">
            <summary>   Look up prefix;object from dictionary and replace value from localizer. </summary>
            <param name="prefix">       The prefix. </param>
            <param name="dictionary">   Dictionary with existing values. </param>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.ILocalizer.LookupDictionary(System.String,System.Collections.Generic.IDictionary{System.Object,Microsoft.Bot.Builder.FormFlow.TermsAttribute})">
            <summary>   Look up prefix;object from dictionary and replace values from localizer. </summary>
            <param name="prefix">       The prefix. </param>
            <param name="dictionary">   Dictionary with existing values. </param>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.ILocalizer.LookupTemplates(System.String,System.Collections.Generic.IDictionary{Microsoft.Bot.Builder.FormFlow.TemplateUsage,Microsoft.Bot.Builder.FormFlow.TemplateAttribute})">
            <summary>   Looks up prefix;usage and replace patterns in template from localizer. </summary>
            <param name="prefix">       The prefix. </param>
            <param name="templates">    Template dictionary with existing values. </param>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.ILocalizer.Remove(System.String)">
            <summary>
            Remove a key from the localizer.
            </summary>
            <param name="key">Key to remove.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.ILocalizer.Save(System.Resources.IResourceWriter)">
            <summary>
            Save localizer resources to stream.
            </summary>
            <param name="writer">Where to write resources.</param>
            <remarks>
            Resource values are all strings.  The key and value can have different parts seperated by semi-colons.
            Key | Value | Description
            ----|-------|------------
            key;VALUE | string | Simple value.
            key;LIST | string[;string]* | List of values.
            usage;field[;field]*;TEMPLATE | pattern[;pattern]* | List of template patterns.  Key includes fields that use template.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.ILocalizer.Load(System.Collections.IDictionaryEnumerator,System.Collections.Generic.IEnumerable{System.String}@,System.Collections.Generic.IEnumerable{System.String}@)">
            <summary>
            Load the localizer from a stream.
            </summary>
            <param name="reader">Dictionary with resources.</param>
            <param name="missing">Keys found in current localizer that are not in loaded localizer.</param>
            <param name="extra">Keys found in loaded localizer that were not in current localizer.</param>
            <returns>New localizer from reader.</returns>
            <remarks>
            <see cref="M:Microsoft.Bot.Builder.FormFlow.Advanced.ILocalizer.Save(System.Resources.IResourceWriter)"/> to see resource format.
            </remarks>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.Advanced.Language">
            <summary>
            Language related utilities.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.Advanced.Language.StopWords">
            <summary>
            Language stop words.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.Advanced.Language.Articles">
            <summary>
            Language articles.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.Language.NonWord(System.String)">
            <summary>
            Test to see if word is all punctuation or white space.
            </summary>
            <param name="word">Word to check.</param>
            <returns>True if word is all punctuation or white space.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.Language.NoiseWord(System.String)">
            <summary>
            Test to see if a word is all noise.
            </summary>
            <param name="word">Word to test.</param>
            <returns>True if word is a number, a <see cref="M:Microsoft.Bot.Builder.FormFlow.Advanced.Language.NonWord(System.String)"/> or a <see cref="F:Microsoft.Bot.Builder.FormFlow.Advanced.Language.StopWords"/>.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.Language.NoiseResponse(System.String)">
            <summary>
            Test to see if a word can be ignored in a resposne.
            </summary>
            <param name="word">Word to test.</param>
            <returns>True if word is a <see cref="M:Microsoft.Bot.Builder.FormFlow.Advanced.Language.NonWord(System.String)"/> or a <see cref="F:Microsoft.Bot.Builder.FormFlow.Advanced.Language.StopWords"/>.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.Language.ArticleOrNone(System.String)">
            <summary>
            Test a word for articles or noise.
            </summary>
            <param name="word">Word to test.</param>
            <returns>True if word is <see cref="M:Microsoft.Bot.Builder.FormFlow.Advanced.Language.NonWord(System.String)"/> or <see cref="F:Microsoft.Bot.Builder.FormFlow.Advanced.Language.Articles"/>.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.Language.NonNoiseWords(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Test words to see if they are all ignorable in a response.
            </summary>
            <param name="words"></param>
            <returns></returns>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.Advanced.Language.WordBreaker">
            <summary>
            Regular expression to break a string into words.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.Language.WordBreak(System.String)">
            <summary>
            Break input into words.
            </summary>
            <param name="input">String to be broken.</param>
            <returns>Enumeration of words.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.Language.CamelCase(System.String)">
            <summary>
            Break a string into words based on _ and case changes.
            </summary>
            <param name="original">Original string.</param>
            <returns>String with words on case change or _ boundaries.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.Language.OptionalPlurals(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Make sure all words end with an optional s.
            </summary>
            <param name="words">Words to pluralize.</param>
            <returns>Enumeration of plural word regex.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.Language.GenerateTerms(System.String,System.Int32)">
            <summary>
            Generate regular expressions to match word sequences in original string.
            </summary>
            <param name="phrase">Original string to be processed.</param>
            <param name="maxLength">Maximum phrase length to support.</param>
            <returns>Array of regular expressions to match subsequences in input.</returns>
            <remarks>
            This function will call <see cref="M:Microsoft.Bot.Builder.FormFlow.Advanced.Language.CamelCase(System.String)"/> and then will generate sub-phrases up to maxLength.  
            For example an enumeration of AngusBeefAndGarlicPizza would generate: 'angus?', 'beefs?', 'garlics?', 'pizzas?', 'angus? beefs?', 'garlics? pizzas?' and 'angus beef and garlic pizza'.
            You can call it directly, or it is used when <see cref="T:Microsoft.Bot.Builder.FormFlow.Advanced.FieldReflector`1"/> generates terms or when <see cref="T:Microsoft.Bot.Builder.FormFlow.TermsAttribute"/> is used with a <see cref="P:Microsoft.Bot.Builder.FormFlow.TermsAttribute.MaxPhrase"/> argument.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.Language.ANormalization(System.String)">
            <summary>
            Switch 'a' before consonants and 'an' before vowels.
            </summary>
            <param name="input">String to fix.</param>
            <returns>String with 'a' and 'an' normalized.</returns>
            <remarks>
            This is not perfect because English is complex, but does a reasonable job.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.Language.BuildList(System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>
            Given a list of string values generate a proper English list.
            </summary>
            <param name="values">Value in list.</param>
            <param name="separator">Separator between all elements except last.</param>
            <param name="lastSeparator">Last element separator.</param>
            <returns>Value in a proper English list.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.Language.Normalize(System.String,Microsoft.Bot.Builder.FormFlow.CaseNormalization)">
            <summary>   Normalize a string. </summary>
            <param name="value">            The value to normalize. </param>
            <param name="normalization">    The normalization to apply. </param>
            <returns>   A normalized string. </returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.Advanced.RecognizeEnumeration`1">
            <summary>
            Recognizer for enumerated values.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.Advanced.RecognizeEnumeration`1.DescriptionDelegate">
            <summary>
            Delegate for mapping from a C# value to it's description.
            </summary>
            <param name="value">C# value to get description for.</param>
            <returns>Description of C# value.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.Advanced.RecognizeEnumeration`1.TermsDelegate">
            <summary>
            Delegate to return the terms to match on for a C# value.
            </summary>
            <param name="value">C# value to get terms for.</param>
            <returns>Enumeration of regular expressions to match on for value.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.RecognizeEnumeration`1.#ctor(Microsoft.Bot.Builder.FormFlow.Advanced.IField{`0})">
            <summary>
            Constructor based on <see cref="T:Microsoft.Bot.Builder.FormFlow.Advanced.IField`1"/>.
            </summary>
            <param name="field">Field with enumerated values.</param>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.Advanced.RecognizePrimitive`1">
            <summary>
            Abstract class for constructing primitive value recognizers.
            </summary>
            <typeparam name="T">Form state.</typeparam>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.RecognizePrimitive`1.#ctor(Microsoft.Bot.Builder.FormFlow.Advanced.IField{`0})">
            <summary>
            Constructor using <see cref="T:Microsoft.Bot.Builder.FormFlow.Advanced.IField`1"/>.
            </summary>
            <param name="field">Field to build recognizer for.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.RecognizePrimitive`1.Parse(System.String)">
            <summary>
            Abstract method for parsing input.
            </summary>
            <param name="input">Input to match.</param>
            <returns>TermMatch if input is a match.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.RecognizePrimitive`1.HelpArgs(`0,System.Object)">
            <summary>
            Return the help template args for current choice and no preference.
            </summary>
            <param name="state">Form state.</param>
            <param name="defaultValue">Current value of field.</param>
            <returns></returns>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.Advanced.RecognizePrimitive`1._field">
            <summary>
            Field being filled information.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.Advanced.RecognizeBool`1">
            <summary>
            Recognize a boolean value.
            </summary>
            <typeparam name="T">Form state.</typeparam>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.RecognizeBool`1.#ctor(Microsoft.Bot.Builder.FormFlow.Advanced.IField{`0})">
            <summary>
            Construct a boolean recognizer for a field.
            </summary>
            <param name="field">Boolean field.</param>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.Advanced.RecognizeString`1">
            <summary>
            Recognize a string field.
            </summary>
            <typeparam name="T">Form state.</typeparam>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.RecognizeString`1.#ctor(Microsoft.Bot.Builder.FormFlow.Advanced.IField{`0})">
            <summary>
            Construct a string recognizer for a field.
            </summary>
            <param name="field">String field.</param>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.Advanced.RecognizeNumber`1">
            <summary>
            Recognize a numeric field.
            </summary>
            <typeparam name="T">Form state.</typeparam>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.RecognizeNumber`1.#ctor(Microsoft.Bot.Builder.FormFlow.Advanced.IField{`0})">
            <summary>
            Construct a numeric recognizer for a field.
            </summary>
            <param name="field">Numeric field.</param>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.Advanced.RecognizeDouble`1">
            <summary>
            Recognize a double or float field.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.RecognizeDouble`1.#ctor(Microsoft.Bot.Builder.FormFlow.Advanced.IField{`0})">
            <summary>
            Construct a double or float recognizer for a field.
            </summary>
            <param name="field">Float or double field.</param>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.Advanced.RecognizeDateTime`1">
            <summary>
            Recognize a date/time expression.
            </summary>
            <typeparam name="T">Form state.</typeparam>
            <remarks>
            Expressions recognized are based the C# Chronic parser for English and
            the C# DateTime parser otherwise.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.RecognizeDateTime`1.#ctor(Microsoft.Bot.Builder.FormFlow.Advanced.IField{`0})">
            <summary>
            Construct a date/time recognizer.
            </summary>
            <param name="field">DateTime field.</param>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.Advanced.TemplateBaseAttribute">
            <summary>
            Abstract base class used by all attributes that use \ref patterns.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.FormFlow.Advanced.TemplateBaseAttribute.AllowDefault">
            <summary>
            When processing choices {||} in a \ref patterns string, provide a choice for the default value if present.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.FormFlow.Advanced.TemplateBaseAttribute.ChoiceCase">
            <summary>  
            Control case when showing choices in {||} references in a \ref patterns string. 
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.FormFlow.Advanced.TemplateBaseAttribute.ChoiceFormat">
            <summary>
            Format string used for presenting each choice when showing {||} choices in a \ref patterns string.
            </summary>
            <remarks>The choice format is passed two arguments, {0} is the number of the choice and {1} is the field name.</remarks>
        </member>
        <member name="P:Microsoft.Bot.Builder.FormFlow.Advanced.TemplateBaseAttribute.ChoiceLastSeparator">
            <summary>   
            When constructing inline lists of choices using {||} in a \ref patterns string, the string used before the last choice. 
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.FormFlow.Advanced.TemplateBaseAttribute.ChoiceParens">
            <summary>  
            When constructing inline choice lists for {||} in a \ref patterns string controls whether to include parentheses around choices. 
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.FormFlow.Advanced.TemplateBaseAttribute.ChoiceSeparator">
            <summary>
            When constructing inline lists using {||} in a \ref patterns string, the string used between all choices except the last. 
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.FormFlow.Advanced.TemplateBaseAttribute.ChoiceStyle">
            <summary>
            How to display choices {||} when processed in a \ref patterns string.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.FormFlow.Advanced.TemplateBaseAttribute.Feedback">
            <summary>
            Control what kind of feedback the user gets after each input.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.FormFlow.Advanced.TemplateBaseAttribute.FieldCase">
            <summary>
            Control case when showing {&amp;} field name references in a \ref patterns string.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.FormFlow.Advanced.TemplateBaseAttribute.LastSeparator">
            <summary>
            When constructing lists using {[]} in a \ref patterns string, the string used before the last value in the list.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.FormFlow.Advanced.TemplateBaseAttribute.Separator">
            <summary>
            When constructing lists using {[]} in a \ref patterns string, the string used between all values except the last.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.FormFlow.Advanced.TemplateBaseAttribute.ValueCase">
            <summary>
            Control case when showing {} value references in a \ref patterns string.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.TemplateBaseAttribute.Pattern">
            <summary>
            The pattern to use when generating a string using <see cref="T:Microsoft.Bot.Builder.FormFlow.Advanced.IPrompt`1"/>.
            </summary>
            <remarks>If multiple patterns were specified, then each call to this function will return a random pattern.</remarks>
            <returns>Pattern to use.</returns>
        </member>
        <member name="P:Microsoft.Bot.Builder.FormFlow.Advanced.TemplateBaseAttribute.Patterns">
            <summary>
            All possible templates.
            </summary>
            <returns>The possible templates.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.TemplateBaseAttribute.ApplyDefaults(Microsoft.Bot.Builder.FormFlow.Advanced.TemplateBaseAttribute)">
            <summary>
            Any default values in this template will be overridden by the supplied <paramref name="defaultTemplate"/>.
            </summary>
            <param name="defaultTemplate">Default template to use to override default values.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.TemplateBaseAttribute.#ctor(System.String[])">
            <summary>
            Initialize with multiple patterns that will be chosen from randomly.
            </summary>
            <param name="patterns">Possible patterns.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.TemplateBaseAttribute.#ctor(Microsoft.Bot.Builder.FormFlow.Advanced.TemplateBaseAttribute)">
            <summary>
            Initialize from another template.
            </summary>
            <param name="other">The template to copy from.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.Extensions.IsICollection(System.Type)">
            <summary>
            Type implements ICollection.
            </summary>
            <param name="type">Type to check.</param>
            <returns>True if implements ICollection.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.Extensions.IsIEnumerable(System.Type)">
            <summary>
            Type implements IEnumerable.
            </summary>
            <param name="type">Type to check.</param>
            <returns>True if implements IEnumerable.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.Extensions.IsIList(System.Type)">
            <summary>
            Type implements IList.
            </summary>
            <param name="type">Type to check.</param>
            <returns>True if implements IList.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.Extensions.IsGenericCollectionType(System.Type)">
            <summary>
            Type implements generic ICollection.
            </summary>
            <param name="type">Type to check.</param>
            <returns>True if implements generic ICollection.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.Extensions.IsGenericEnumerableType(System.Type)">
            <summary>
            Type implements generic IEnumerable.
            </summary>
            <param name="type">Type to check.</param>
            <returns>True if implements generic IEnumerable.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.Extensions.IsIntegral(System.Type)">
            <summary>
            Type is integral.
            </summary>
            <param name="type">Type to check.</param>
            <returns>True if integral.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.Extensions.IsDouble(System.Type)">
            <summary>
            Type is float or double.
            </summary>
            <param name="type">Type to check.</param>
            <returns>True if float or double.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.Extensions.IsListCollectionType(System.Type)">
            <summary>
            Type implements generic IList.
            </summary>
            <param name="type">Type to check.</param>
            <returns>True if implements generic IList.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.Extensions.IsNullable(System.Type)">
            <summary>
            Type is nullable.
            </summary>
            <param name="type">Type to check.</param>
            <returns>True if nullable.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.Extensions.GetGenericElementType(System.Type)">
            <summary>
            Return the underlying type of generic IEnumerable.
            </summary>
            <param name="type">Type to check.</param>
            <returns>True if implements generic IEnumerable.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.Advanced.IPrompt`1">
            <summary>
            Interface for a prompt and its associated recognizer.
            </summary>
            <typeparam name="T">Form state.</typeparam>
            <remarks>
            This interface allows taking a \ref patterns expression and making it into a string with the template parts filled in.
            </remarks>
        </member>
        <member name="P:Microsoft.Bot.Builder.FormFlow.Advanced.IPrompt`1.Annotation">
            <summary>
            Description of the prompt and how to generate it.
            </summary>
            <returns>Attribute describing how to generate prompt.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.IPrompt`1.Prompt(`0,Microsoft.Bot.Builder.FormFlow.Advanced.IField{`0},System.Object[])">
            <summary>
            Return prompt to send to user.
            </summary>
            <param name="state">Current form state.</param>
            <param name="field">Current field being processed.</param>
            <param name="args">Optional arguments.</param>
            <returns>Message to user.</returns>
        </member>
        <member name="P:Microsoft.Bot.Builder.FormFlow.Advanced.IPrompt`1.Recognizer">
            <summary>
            Associated recognizer if any.
            </summary>
            <returns>Recognizer for matching user input.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.Advanced.FormPrompt">
            <summary>
            The prompt that is returned by form prompter. 
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.FormFlow.Advanced.FormPrompt.Prompt">
            <summary>
            The text prompt that corresponds to Message.Text.
            </summary>
            <remarks>When generating cards this will be the card title.</remarks>
        </member>
        <member name="P:Microsoft.Bot.Builder.FormFlow.Advanced.FormPrompt.Description">
            <summary>
            Description information for generating cards.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.FormFlow.Advanced.FormPrompt.Buttons">
            <summary>
            The buttons that will be mapped to Message.Attachments.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.Advanced.FormPrompt.Style">
            <summary>
            Desired prompt style.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.FormPrompt.Clone">
            <summary>
            Deep clone the FormPrompt.
            </summary>
            <returns> A deep cloned instance of FormPrompt.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.Advanced.FormButton">
            <summary>
            A Form button that will be mapped to Connector.Action.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.FormFlow.Advanced.FormButton.Image">
            <summary>
            Picture which will appear on the button.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.FormFlow.Advanced.FormButton.Message">
            <summary>
            Message that will be sent to bot when this button is clicked.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.FormFlow.Advanced.FormButton.Title">
            <summary>
            Label of the button.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.FormFlow.Advanced.FormButton.Url">
            <summary>
            URL which will be opened in the browser built-into Client application.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.FormButton.Clone">
            <summary>
            Clone the FormButton
            </summary>
            <returns> A new cloned instance of object.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.FormButton.ToString">
            <summary>
            ToString() override. 
            </summary>
            <returns> Title of the button.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.Advanced.PromptAsyncDelegate">
            <summary>
            A delegate for styling and posting a prompt.
            </summary>
            <param name="context">Message context.</param>
            <param name="prompt">Prompt to be posted.</param>
            <returns>Prompt that was posted.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.Advanced.Prompter`1">
            <summary>   A prompt and recognizer packaged together. </summary>
            <typeparam name="T">    UNderlying form type. </typeparam>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.Prompter`1.#ctor(Microsoft.Bot.Builder.FormFlow.Advanced.TemplateBaseAttribute,Microsoft.Bot.Builder.FormFlow.IForm{`0},Microsoft.Bot.Builder.FormFlow.Advanced.IRecognize{`0},Microsoft.Bot.Builder.FormFlow.Advanced.IFields{`0})">
            <summary>
            Construct a prompter.
            </summary>
            <param name="annotation">Annotation describing the \ref patterns and formatting for prompt.</param>
            <param name="form">Current form.</param>
            <param name="recognizer">Recognizer if any.</param>
            <param name="fields">Fields name lookup.  (Defaults to forms.)</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.Prompter`1.ValidatePattern(Microsoft.Bot.Builder.FormFlow.IForm{`0},System.String,Microsoft.Bot.Builder.FormFlow.Advanced.IField{`0},System.Int32)">
            <summary>   Validate pattern by ensuring they refer to real fields. </summary>
            <param name="form">     The form. </param>
            <param name="pattern">  Specifies the pattern. </param>
            <param name="field"> Base field for pattern. </param>
            <param name="argLimit"> The number of arguments passed to the pattern. </param>
            <returns>   true if it succeeds, false if it fails. </returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.Advanced.SpecialValues">
            <summary>
            Enumeration of special kinds of matches.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.Advanced.SpecialValues.Field">
            <summary>
            Match corresponds to a field, not a specific value in the field.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.Advanced.TermMatch">
            <summary>
            Describe a possible match in the user input.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.TermMatch.#ctor(System.Int32,System.Int32,System.Double,System.Object)">
            <summary>
            Construct a match.
            </summary>
            <param name="start">Start of match in input string.</param>
            <param name="length">Length of match in input string.</param>
            <param name="confidence">Confidence of match, 0-1.0.</param>
            <param name="value">The underlying C# value for the match.</param>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.Advanced.TermMatch.Start">
            <summary>
            Start of match in input string.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.FormFlow.Advanced.TermMatch.End">
            <summary>
            End of match in input string.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.Advanced.TermMatch.Length">
            <summary>
            Length of match in input string.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.Advanced.TermMatch.Confidence">
            <summary>
            Confidence of match, 0-1.0.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.Advanced.TermMatch.Value">
            <summary>
            Underlying C# value.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.TermMatch.Same(Microsoft.Bot.Builder.FormFlow.Advanced.TermMatch)">
            <summary>
            Check to see if this covers the same span as match.
            </summary>
            <param name="match">TermMatch to compare.</param>
            <returns>True if both cover the same span.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.TermMatch.Covers(Microsoft.Bot.Builder.FormFlow.Advanced.TermMatch)">
            <summary>
            Check to see if this completely covers match.
            </summary>
            <param name="match">TermMatch to compare.</param>
            <returns>True if this covers all of match.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.TermMatch.Overlaps(Microsoft.Bot.Builder.FormFlow.Advanced.TermMatch)">
            <summary>
            Check to see if this overlaps with match in input.
            </summary>
            <param name="match">TermMatch to compare.</param>
            <returns>True if the matches overlap in the input.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.Advanced.IRecognize`1">
            <summary>
            Interface for recognizers that look for matches in user input.
            </summary>
            <typeparam name="T">Underlying form state.</typeparam>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.IRecognize`1.PromptArgs">
             <summary>   Return the arguments to pass to the prompt. </summary>
            <remarks>For example a numeric recognizer might pass min and max values.</remarks>
             <returns>   An array of arguments.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.IRecognize`1.Values">
            <summary>
            Return all possible values or null if a primitive type.
            </summary>
            <returns>All possible values.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.IRecognize`1.ValueDescriptions">
            <summary>
            Return all possible value descriptions in order to support enumeration.
            </summary>
            <returns>All possible value descriptions.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.IRecognize`1.ValueDescription(System.Object)">
            <summary>
            Return the description of a specific value.
            </summary>
            <param name="value">Value to get description of.</param>
            <returns>Description of the value.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.IRecognize`1.ValidInputs(System.Object)">
            <summary>
            Return valid inputs to describe a particular value.
            </summary>
            <param name="value">Value being checked.</param>
            <returns>Valid inputs for describing value.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.IRecognize`1.Help(`0,System.Object)">
            <summary>
            Return the help string describing what are valid inputs to the recognizer.
            </summary>
            <returns>Help on what the recognizer accepts.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.Advanced.IRecognize`1.Matches(System.String,System.Object)">
            <summary>
            Return the matches found in the input.
            </summary>
            <param name="input">The input string being matched.</param>
            <param name="defaultValue">The default value or null if none.</param>
            <returns>Match records.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.FormDialog">
            <summary>
            Static factory methods for creating form dialogs.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.FormDialog.FromType``1(Microsoft.Bot.Builder.FormFlow.FormOptions)">
            <summary>
            Create an <see cref="T:Microsoft.Bot.Builder.FormFlow.IFormDialog`1"/> using the default <see cref="T:Microsoft.Bot.Builder.FormFlow.BuildFormDelegate`1"/>.
            </summary>
            <typeparam name="T">The form type.</typeparam>
            <param name="options">The form options.</param>
            <returns>The form dialog.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.FormDialog.FromForm``1(Microsoft.Bot.Builder.FormFlow.BuildFormDelegate{``0},Microsoft.Bot.Builder.FormFlow.FormOptions)">
            <summary>
            Create an <see cref="T:Microsoft.Bot.Builder.FormFlow.IFormDialog`1"/> using the <see cref="T:Microsoft.Bot.Builder.FormFlow.BuildFormDelegate`1"/> parameter.
            </summary>
            <typeparam name="T">The form type.</typeparam>
            <param name="buildForm">The delegate to build the form.</param>
            <param name="options">The form options.</param>
            <returns>The form dialog.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.FormOptions">
            <summary>
            Options for form execution.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.FormOptions.None">
            <summary>
            No options.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.FormOptions.PromptInStart">
            <summary>
            Prompt when the dialog starts.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.FormOptions.PromptFieldsWithValues">
            <summary>  
            Prompt for fields that already have a value in the initial state when processing form.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.BuildFormDelegate`1">
            <summary>
            Delegate for building the form.
            </summary>
            <typeparam name="T">The form state type.</typeparam>
            <returns>An <see cref="T:Microsoft.Bot.Builder.FormFlow.IForm`1"/>.</returns>
            <remarks>This is a delegate so that we can rebuild the form and don't have to serialize
            the form definition with every message.</remarks>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.FormDialog`1">
            <summary>
            Form dialog to fill in your state.
            </summary>
            <typeparam name="T">The type to fill in.</typeparam>
            <remarks>
            This is the root class for managing a FormFlow dialog. It is usually created
            through the factory methods <see cref="M:Microsoft.Bot.Builder.FormFlow.FormDialog.FromForm``1(Microsoft.Bot.Builder.FormFlow.BuildFormDelegate{``0},Microsoft.Bot.Builder.FormFlow.FormOptions)"/>
            or <see cref="M:Microsoft.Bot.Builder.FormFlow.FormDialog.FromType``1(Microsoft.Bot.Builder.FormFlow.FormOptions)"/>. 
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.FormDialog`1.#ctor(`0,Microsoft.Bot.Builder.FormFlow.BuildFormDelegate{`0},Microsoft.Bot.Builder.FormFlow.FormOptions,System.Collections.Generic.IEnumerable{Microsoft.Bot.Builder.Luis.Models.EntityRecommendation},System.Globalization.CultureInfo)">
            <summary>   Constructor for creating a FormFlow dialog. </summary>
            <param name="state">        The intial state. </param>
            <param name="buildForm">    A delegate for building the form. </param>
            <param name="options">      Options for controlling the form. </param>
            <param name="entities">     Optional entities to process into the form. </param>
            <param name="cultureInfo">  The culture to use. </param>
            <remarks>For building forms <see cref="T:Microsoft.Bot.Builder.FormFlow.IFormBuilder`1"/>.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.FormDialog`1.MoveToNext(Microsoft.Bot.Builder.FormFlow.Advanced.NextStep)">
            <summary>
            Find the next step to execute.
            </summary>
            <param name="next">What step to execute next.</param>
            <returns>True if can switch to step.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.FormBuilderBase`1">
            <summary>Abstract base class for Form Builders.</summary>
            <typeparam name="T">Form state class. </typeparam>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.FormBuilder`1">
            <summary>   Build a form by specifying messages, fields and confirmations via reflection or programatically.</summary>
            <typeparam name="T">Form state class. </typeparam>
            <remarks>
            Fields will be defined through reflection over the type <typeparamref name="T"/> and attributes like 
            <see cref="T:Microsoft.Bot.Builder.FormFlow.DescribeAttribute"/>,
            <see cref="T:Microsoft.Bot.Builder.FormFlow.NumericAttribute"/>, 
            <see cref="T:Microsoft.Bot.Builder.FormFlow.OptionalAttribute"/>
            <see cref="T:Microsoft.Bot.Builder.FormFlow.PatternAttribute"/>, 
            <see cref="T:Microsoft.Bot.Builder.FormFlow.PromptAttribute"/>, 
            <see cref="T:Microsoft.Bot.Builder.FormFlow.TermsAttribute"/> and 
            <see cref="T:Microsoft.Bot.Builder.FormFlow.TemplateAttribute"/>.   
            For all of the attributes, resonable defaults will be generated.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.FormBuilder`1.#ctor(System.Boolean)">
            <summary>
            Create a new form builder for building a form using reflection.
            </summary>
            <param name="ignoreAnnotations">True to ignore any attributes on the form class.</param>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.MessageDelegate`1">
            <summary>   Given <paramref name="state"/> return a <see cref="T:Microsoft.Bot.Builder.FormFlow.PromptAttribute"/> with a template for the message to display. </summary>
            <typeparam name="T">    Form state type. </typeparam>
            <param name="state">    Form state. </param>
            <returns>   A PromptAttribute describing the message to display. </returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.IFormBuilder`1">
            <summary>   Interface for building a form. </summary>
            <remarks>   
            A form consists of a series of steps that can be one of:
            <list type="list">
            <item>A message to the user.</item>
            <item>A prompt sent to the user where the response is to fill in a form state value.</item>
            <item>A confirmation of the current state with the user.</item>
            </list>
            By default the steps are executed in the order of the <see cref="M:Microsoft.Bot.Builder.FormFlow.IFormBuilder`1.Message(System.String,Microsoft.Bot.Builder.FormFlow.ActiveDelegate{`0},System.Collections.Generic.IEnumerable{System.String})"/>, <see cref="M:Microsoft.Bot.Builder.FormFlow.IFormBuilder`1.Field(Microsoft.Bot.Builder.FormFlow.Advanced.IField{`0})"/> and <see cref="M:Microsoft.Bot.Builder.FormFlow.IFormBuilder`1.Confirm(System.String,Microsoft.Bot.Builder.FormFlow.ActiveDelegate{`0},System.Collections.Generic.IEnumerable{System.String})"/> calls.
            If you do not take explicit control, the steps will be executed in the order defined in the 
            form state with a final confirmation.
            This interface allows you to flently build a form by composing together fields,
            messages and confirmation.  The fluent building blocks provide common patterns
            like fields being based on your state class, but you can also build up your
            own definition of a form by using Advanced.IField.  
            If you want to build a form using C# reflection over your state class use FormBuilder.  
            To declaratively build a form through JSON Schema you can use Json.FormBuilderJson.
            
            Forms are sensitive to the current thread UI culture.  The Microsoft.Bot.Builder strings will localize
            to that culture if available.  You can also localize the strings generated for your form by calling IForm.SaveResources
            or by using the RView tool and adding that resource to your project.  For strings in dynamic fields, messages or confirmations you will
            need to use the normal C# mechanisms to localize them.  Look in the overview documentation for more information.
            </remarks>
            <typeparam name="T">Form state.</typeparam>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.IFormBuilder`1.Build(System.Reflection.Assembly,System.String)">
            <summary>
            Build the form based on the methods called on the builder.
            </summary>
            <param name="resourceAssembly">Assembly for localization resources.</param>
            <param name="resourceName">Name of resources to use for localization.</param>
            <returns>The constructed form.</returns>
            <remarks>
            The default assembly is the one that contains <typeparamref name="T"/>
            and the default resourceName if the name of that type.
            </remarks>
        </member>
        <member name="P:Microsoft.Bot.Builder.FormFlow.IFormBuilder`1.Configuration">
            <summary>
            The form configuration supplies default templates and settings.
            </summary>
            <returns>The current form configuration.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.IFormBuilder`1.Message(System.String,Microsoft.Bot.Builder.FormFlow.ActiveDelegate{`0},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Show a message that does not require a response.
            </summary>
            <param name="message">A \ref patterns string to fill in and send.</param>
            <param name="condition">Whether or not this step is active.</param>
            <param name="dependencies">Fields message depends on.</param>
            <returns>Modified IFormBuilder.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.IFormBuilder`1.Message(Microsoft.Bot.Builder.FormFlow.PromptAttribute,Microsoft.Bot.Builder.FormFlow.ActiveDelegate{`0},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Show a message with more format control that does not require a response.
            </summary>
            <param name="prompt">Message to fill in and send.</param>
            <param name="condition">Whether or not this step is active.</param>
            <param name="dependencies">Fields message depends on.</param>
            <returns>Modified IFormBuilder.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.IFormBuilder`1.Message(Microsoft.Bot.Builder.FormFlow.MessageDelegate{`0},Microsoft.Bot.Builder.FormFlow.ActiveDelegate{`0},System.Collections.Generic.IEnumerable{System.String})">
            <summary>   Generate a message using a delegate to dynamically build the message. </summary>
            <param name="generateMessage">  Delegate for building message. </param>
            <param name="condition">        Whether or not this step is active. </param>
            <param name="dependencies">Fields message depends on.</param>
            <returns>Modified IFormBuilder.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.IFormBuilder`1.Field(Microsoft.Bot.Builder.FormFlow.Advanced.IField{`0})">
            <summary>
            Derfine a field step by supplying your own field definition.
            </summary>
            <param name="field">Field definition to use.</param>
            <returns>Modified IFormBuilder.</returns>
            <remarks>
            You can provide your own implementation of <see cref="T:Microsoft.Bot.Builder.FormFlow.Advanced.IField`1"/> or you can 
            use the <see cref="T:Microsoft.Bot.Builder.FormFlow.Advanced.Field`1"/> class to provide fluent values, 
            <see cref="T:Microsoft.Bot.Builder.FormFlow.Advanced.FieldReflector`1"/> to use reflection or Json.FieldJson to use JSON Schema.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.IFormBuilder`1.Field(System.String,Microsoft.Bot.Builder.FormFlow.ActiveDelegate{`0},Microsoft.Bot.Builder.FormFlow.ValidateAsyncDelegate{`0})">
            <summary>
            Define a step for filling in a particular value in the form state.
            </summary>
            <param name="name">Path in the form state to the value being filled in.</param>
            <param name="active">Delegate to test form state to see if step is active.</param>
            <param name="validate">Delegate to validate the field value.</param>
            <returns>Modified IFormBuilder.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.IFormBuilder`1.Field(System.String,System.String,Microsoft.Bot.Builder.FormFlow.ActiveDelegate{`0},Microsoft.Bot.Builder.FormFlow.ValidateAsyncDelegate{`0})">
            <summary>
            Define a step for filling in a particular value in the form state.
            </summary>
            <param name="name">Path in the form state to the value being filled in.</param>
            <param name="prompt">Simple \ref patterns to describe prompt for field.</param>
            <param name="active">Delegate to test form state to see if step is active.n</param>
            <param name="validate">Delegate to validate the field value.</param>
            <returns>Modified IFormBuilder.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.IFormBuilder`1.Field(System.String,Microsoft.Bot.Builder.FormFlow.PromptAttribute,Microsoft.Bot.Builder.FormFlow.ActiveDelegate{`0},Microsoft.Bot.Builder.FormFlow.ValidateAsyncDelegate{`0})">
            <summary>
            Define a step for filling in a particular value in the form state.
            </summary>
            <param name="name">Path in the form state to the value being filled in.</param>
            <param name="prompt">Prompt pattern with more formatting control to describe prompt for field.</param>
            <param name="active">Delegate to test form state to see if step is active.n</param>
            <param name="validate">Delegate to validate the field value.</param>
            <returns>Modified IFormBuilder.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.IFormBuilder`1.AddRemainingFields(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Add all fields not already added to the form.
            </summary>
            <param name="exclude">Fields not to include.</param>
            <returns>Modified IFormBuilder.</returns>
            <remarks>
            This will add all fields defined in your form that have not already been
            added if the fields are supported.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.IFormBuilder`1.Confirm(System.String,Microsoft.Bot.Builder.FormFlow.ActiveDelegate{`0},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Add a confirmation step.
            </summary>
            <param name="prompt">Prompt to use for confirmation.</param>
            <param name="condition">Delegate to test if confirmation applies to the current form state.</param>
            <param name="dependencies">What fields this confirmation depends on.</param>
            <returns>Modified IFormBuilder.</returns>
            <remarks>
            If prompt is not supplied the \ref patterns element {*} will be used to confirm.
            Dependencies will by default be all active steps defined before this confirmation.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.IFormBuilder`1.Confirm(Microsoft.Bot.Builder.FormFlow.PromptAttribute,Microsoft.Bot.Builder.FormFlow.ActiveDelegate{`0},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Add a confirmation step.
            </summary>
            <param name="prompt">Prompt to use for confirmation.</param>
            <param name="condition">Delegate to test if confirmation applies to the current form state.</param>
            <param name="dependencies">What fields this confirmation depends on.</param>
            <returns>Modified IFormBuilder.</returns>
            <remarks>
            Dependencies will by default be all active steps defined before this confirmation.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.IFormBuilder`1.Confirm(Microsoft.Bot.Builder.FormFlow.MessageDelegate{`0},Microsoft.Bot.Builder.FormFlow.ActiveDelegate{`0},System.Collections.Generic.IEnumerable{System.String})">
            <summary>   Generate a confirmation using a delegate to dynamically build the message. </summary>
            <param name="generateMessage">  Delegate for building message. </param>
            <param name="condition">        Whether or not this step is active. </param>
            <param name="dependencies">What fields this confirmation depends on.</param>
            <returns>Modified IFormBuilder.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.IFormBuilder`1.Prompter(Microsoft.Bot.Builder.FormFlow.Advanced.PromptAsyncDelegate)">
            <summary>
            Delegate to send prompt to user.
            </summary>
            <param name="prompter">Delegate.</param>
            <returns>Modified IFormBuilder.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.IFormBuilder`1.OnCompletion(Microsoft.Bot.Builder.FormFlow.OnCompletionAsyncDelegate{`0})">
            <summary>
            Delegate to call when form is completed.
            </summary>
            <param name="callback">Delegate to call on completion.</param>
            <returns>Modified IFormBuilder.</returns>
            <remarks>
            This should only be used for side effects such as calling your service with
            the form state results.  In any case the completed form state will be passed
            to the parent dialog.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.IFormBuilder`1.HasField(System.String)">
            <summary>
            Test to see if there is already a field with <paramref name="name"/>.
            </summary>
            <param name="name"></param>
            <returns>True if field is already present.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.FormConfiguration">
            <summary>
            Default values for the form.
            </summary>
            <remarks>
            These defaults can all be overriden when you create a form and before you add steps.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.FormConfiguration.#ctor">
            <summary>
            Construct configuration.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.FormConfiguration.DefaultPrompt">
            <summary>
            Default prompt and template format settings.
            </summary>
            <remarks>
            When you specify a <see cref="T:Microsoft.Bot.Builder.FormFlow.PromptAttribute"/> or <see cref="T:Microsoft.Bot.Builder.FormFlow.TemplateAttribute"/>, any format 
            value you do not specify will come from this default.
            </remarks>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.FormConfiguration.NoPreference">
            <summary>
            Enumeration of strings for interpreting a user response as setting an optional field to be unspecified.
            </summary>
            <remarks>
            The first string is also used to describe not having a preference for an optional field.
            </remarks>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.FormConfiguration.CurrentChoice">
            <summary>
            Enumeration of strings for interpreting a user response as asking for the current value.
            </summary>
            <remarks>
            The first value is also used to describe the option of keeping the current value.
            </remarks>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.FormConfiguration.Yes">
            <summary>
            Enumeration of values for a "yes" response for boolean fields or confirmations.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.FormConfiguration.No">
            <summary>
            Enumeration of values for a "no" response for boolean fields or confirmations.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.FormConfiguration.Navigation">
            <summary>
            String for naming the "navigation" field.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.FormConfiguration.Confirmation">
            <summary>
            String for naming "Confirmation" fields.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.FormConfiguration.Templates">
            <summary>
            Default templates to use if not override on the class or field level.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.FormConfiguration.Commands">
            <summary>
            Definitions of the built-in commands.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.FormConfiguration.Template(Microsoft.Bot.Builder.FormFlow.TemplateUsage)">
            <summary>
            Look up a particular template.
            </summary>
            <param name="usage">Desired template.</param>
            <returns>Matching template.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.IForm`1">
            <summary>   Form definition interface. </summary>
            <typeparam name="T">    Form state. </typeparam>
        </member>
        <member name="P:Microsoft.Bot.Builder.FormFlow.IForm`1.Fields">
            <summary>
            Fields that make up form.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.IForm`1.SaveResources(System.Resources.IResourceWriter)">
            <summary>   Save all string resources to binary stream for future localization. </summary>
            <param name="writer">   Where to write resources. </param>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.IForm`1.Localize(System.Collections.IDictionaryEnumerator,System.Collections.Generic.IEnumerable{System.String}@,System.Collections.Generic.IEnumerable{System.String}@)">
            <summary>   Localize all string resources from binary stream. </summary>
            <param name="reader">   Where to read resources. </param>
            <param name="missing">  [out] Any values in the form, but missing from the stream. </param>
            <param name="extra">    [out] Any values in the stream, but missing from the form. </param>
            <remarks>When you localize all form string resources will be overridden if present in the stream.
                     Otherwise the value will remain unchanged.
            </remarks>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.FormFlowAttribute">
            <summary>
            Abstract base class for FormFlow attributes.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.FormFlow.FormFlowAttribute.IsLocalizable">
            <summary>
            True if attribute is localizable.
            </summary>
            <remarks>
            Attributes that are used on classes, fields and properties should have this set.
            That way those attributes will be in the localization files that are generated.
            </remarks>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.DescribeAttribute">
            <summary>
            Attribute to override the default description of a field, property or enum value.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.DescribeAttribute.Description">
            <summary>
            Description of the field, property or enum to use in templates and choices.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.DescribeAttribute.Title">
            <summary>
            Title when a card is generated from description.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.DescribeAttribute.SubTitle">
            <summary>
            SubTitle when a card is generated from description.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.DescribeAttribute.Image">
            <summary>
            URL of image to use when creating cards or buttons.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.DescribeAttribute.Message">
            <summary>
            Message to return when a button is pressed in a card.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.DescribeAttribute.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Description for field, property or enum value.
            </summary>
            <param name="description">Description of field, property or enum value.</param>
            <param name="image">URL of image to use when generating buttons.</param>
            <param name="message">Message to return from button.</param>
            <param name="title">Text if generating card.</param>
            <param name="subTitle">SubTitle if generating card.</param>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.TermsAttribute">
            <summary>
            Attribute to override the default terms used to match a field, property or enum value to user input.
            </summary>
            <remarks>
            By default terms are generated by calling the <see cref="M:Microsoft.Bot.Builder.FormFlow.Advanced.Language.GenerateTerms(System.String,System.Int32)"/> method with a max phrase length of 3
            on the name of the field, property or enum value.  Using this attribute you can specify your own regular expressions to match or if you specify the 
            <see cref="P:Microsoft.Bot.Builder.FormFlow.TermsAttribute.MaxPhrase"/> attribute you can cause <see cref="M:Microsoft.Bot.Builder.FormFlow.Advanced.Language.GenerateTerms(System.String,System.Int32)"/> to be called on your strings with the
            maximum phrase length you specify.
            </remarks>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.TermsAttribute.Alternatives">
            <summary>
            Regular expressions for matching user input.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.FormFlow.TermsAttribute.MaxPhrase">
            <summary>
            The maximum pharse length to use when calling <see cref="M:Microsoft.Bot.Builder.FormFlow.Advanced.Language.GenerateTerms(System.String,System.Int32)"/> on your supplied terms.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.TermsAttribute.#ctor(System.String[])">
            <summary>
            Regular expressions or terms used when matching user input.
            </summary>
            <remarks>
            If <see cref="P:Microsoft.Bot.Builder.FormFlow.TermsAttribute.MaxPhrase"/> is specified the supplied alternatives will be passed to <see cref="M:Microsoft.Bot.Builder.FormFlow.Advanced.Language.GenerateTerms(System.String,System.Int32)"/> to generate regular expressions
            with a maximum phrase size of <see cref="P:Microsoft.Bot.Builder.FormFlow.TermsAttribute.MaxPhrase"/>.
            </remarks>
            <param name="alternatives">Regular expressions or terms.</param>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.ChoiceStyleOptions">
            <summary>
            Specifies how to show choices generated by {||} in a \ref patterns string.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.ChoiceStyleOptions.Default">
            <summary>
            Use the default <see cref="P:Microsoft.Bot.Builder.FormFlow.Advanced.TemplateBaseAttribute.ChoiceStyle"/> from the <see cref="F:Microsoft.Bot.Builder.FormFlow.FormConfiguration.DefaultPrompt"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.ChoiceStyleOptions.Auto">
            <summary>
            Automatically choose how to render choices.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.ChoiceStyleOptions.AutoText">
            <summary>
            Automatically generate text and switch between the <see cref="F:Microsoft.Bot.Builder.FormFlow.ChoiceStyleOptions.Inline"/> and <see cref="F:Microsoft.Bot.Builder.FormFlow.ChoiceStyleOptions.PerLine"/> styles based on the number of choices.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.ChoiceStyleOptions.Inline">
            <summary>
            Show choices on the same line.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.ChoiceStyleOptions.PerLine">
            <summary>
            Show choices with one per line.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.ChoiceStyleOptions.InlineNoParen">
            <summary>   Show choices on the same line without surrounding parentheses. </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.ChoiceStyleOptions.Buttons">
            <summary>
            Show choices as buttons if possible.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.ChoiceStyleOptions.Carousel">
            <summary>
            Show choices as a carousel if possibe.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.CaseNormalization">
            <summary>
            How to normalize the case of words.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.CaseNormalization.Default">
            <summary>
            Use the default from the <see cref="F:Microsoft.Bot.Builder.FormFlow.FormConfiguration.DefaultPrompt"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.CaseNormalization.InitialUpper">
            <summary>
            First letter of each word is capitalized
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.CaseNormalization.Lower">
            <summary>
            Normalize words to lower case.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.CaseNormalization.Upper">
            <summary>
            Normalize words to upper case.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.CaseNormalization.None">
            <summary>
            Don't normalize words.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.BoolDefault">
            <summary>
            Three state boolean value.
            </summary>
            <remarks>
            This is necessary because C# attributes do not support nullable properties.
            </remarks>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.BoolDefault.Default">
            <summary>
            Use the default from the <see cref="F:Microsoft.Bot.Builder.FormFlow.FormConfiguration.DefaultPrompt"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.BoolDefault.True">
            <summary>
            Boolean true.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.BoolDefault.False">
            <summary>
            Boolean false.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.FeedbackOptions">
            <summary>
            Control how the user gets feedback after each entry.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.FeedbackOptions.Default">
            <summary>
            Use the default from the <see cref="F:Microsoft.Bot.Builder.FormFlow.FormConfiguration.DefaultPrompt"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.FeedbackOptions.Auto">
            <summary>
            Provide feedback using the <see cref="F:Microsoft.Bot.Builder.FormFlow.TemplateUsage.Feedback"/> template only if part of the user input was not understood.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.FeedbackOptions.Always">
            <summary>
            Provide feedback after every user input.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.FeedbackOptions.Never">
            <summary>
            Never provide feedback.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.PromptAttribute">
            <summary>
            Define the prompt template used when asking about a field.
            </summary>
            <remarks>
            Prompts use \ref Templates to provide control over what goes into a prompt.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.PromptAttribute.#ctor(System.String[])">
            <summary>
            Define a prompt with one or more \ref patterns patterns to choose from randomly.
            </summary>
            <param name="patterns">Patterns to select from.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.PromptAttribute.#ctor(Microsoft.Bot.Builder.FormFlow.TemplateAttribute)">
            <summary>
            Define a prompt based on a <see cref="T:Microsoft.Bot.Builder.FormFlow.TemplateAttribute"/>.
            </summary>
            <param name="pattern">Template to use.</param>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.TemplateUsage">
            <summary>
            All of the built-in templates.
            </summary>
            <remarks>
            A good way to understand these is to look at the default templates defined in <see cref="F:Microsoft.Bot.Builder.FormFlow.FormConfiguration.Templates"/>
            </remarks>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.TemplateUsage.None">
            <summary>   An enum constant representing the none option. </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.TemplateUsage.Bool">
            <summary>
            How to ask for a boolean.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.TemplateUsage.BoolHelp">
            <summary>
            What you can enter when entering a bool.
            </summary>
            <remarks>
            Within this template {0} is the current choice if any and {1} is no preference if optional. 
            </remarks>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.TemplateUsage.Clarify">
            <summary>
            Clarify an ambiguous choice.
            </summary>
            <remarks>This template can use {0} to capture the term that was ambiguous.</remarks>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.TemplateUsage.Confirmation">
            <summary>
            Default confirmation.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.TemplateUsage.CurrentChoice">
            <summary>
            Show the current choice.
            </summary>
            <remarks>
            This is how the current choice is represented as an option.  
            If you change this, you should also change <see cref="F:Microsoft.Bot.Builder.FormFlow.FormConfiguration.CurrentChoice"/>
            so that what people can type matches what you show.
            </remarks>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.TemplateUsage.DateTime">
            <summary>
            How to ask for a <see cref="F:Microsoft.Bot.Builder.FormFlow.TemplateUsage.DateTime"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.TemplateUsage.DateTimeHelp">
            <summary>
            What you can enter when entering a <see cref="F:Microsoft.Bot.Builder.FormFlow.TemplateUsage.DateTime"/>.
            </summary>
            <remarks>
            Within this template {0} is the current choice if any and {1} is no preference if optional. 
            </remarks>
            <remarks>
            This template can use {0} to get the current choice or {1} for no preference if field is optional.
            </remarks>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.TemplateUsage.Double">
            <summary>
            How to ask for a double.
            </summary>
            <remarks>
            Within this template if numerical limits are specified using <see cref="T:Microsoft.Bot.Builder.FormFlow.NumericAttribute"/>, 
            {0} is the minimum possible value and {1} is the maximum possible value.
            </remarks>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.TemplateUsage.DoubleHelp">
            <summary>
            What you can enter when entering a double.
            </summary>
            <remarks>
            Within this template {0} is the current choice if any and {1} is no preference if optional. 
            If limits are specified through <see cref="T:Microsoft.Bot.Builder.FormFlow.NumericAttribute"/>, then {2} will be the minimum possible value 
            and {3} the maximum possible value.
            </remarks>
            <remarks>
            Within this template, {0} is current choice if any, {1} is no preference for optional  and {1} and {2} are min/max if specified.
            </remarks>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.TemplateUsage.EnumOneNumberHelp">
            <summary>
            What you can enter when selecting a single value from a numbered enumeration.
            </summary>
            <remarks>
            Within this template, {0} is the minimum choice. {1} is the maximum choice and {2} is a description of all the possible words.
            </remarks>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.TemplateUsage.EnumManyNumberHelp">
            <summary>
             What you can enter when selecting multiple values from a numbered enumeration.
            </summary>
            <remarks>
            Within this template, {0} is the minimum choice. {1} is the maximum choice and {2} is a description of all the possible words.
            </remarks>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.TemplateUsage.EnumOneWordHelp">
            <summary>
            What you can enter when selecting one value from an enumeration.
            </summary>
            <remarks>
            Within this template, {2} is a list of the possible values.
            </remarks>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.TemplateUsage.EnumManyWordHelp">
            <summary>
            What you can enter when selecting mutiple values from an enumeration.
            </summary>
            <remarks>
            Within this template, {2} is a list of the possible values.
            </remarks>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.TemplateUsage.EnumSelectOne">
            <summary>
            How to ask for one value from an enumeration.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.TemplateUsage.EnumSelectMany">
            <summary>
            How to ask for multiple values from an enumeration.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.TemplateUsage.Feedback">
            <summary>
            How to show feedback after user input.
            </summary>
            <remarks>
            Within this template, unmatched input is available through {0}, but it should be wrapped in an optional {?} in \ref patterns in case everything was matched. 
            </remarks>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.TemplateUsage.Help">
            <summary>
            What to display when asked for help.
            </summary>
            <remarks>
            This template controls the overall help experience.  {0} will be recognizer specific help and {1} will be command help.
            </remarks>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.TemplateUsage.HelpClarify">
            <summary>
            What to display when asked for help while clarifying. 
            </summary>
            <remarks>
            This template controls the overall help experience.  {0} will be recognizer specific help and {1} will be command help.
            </remarks>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.TemplateUsage.HelpConfirm">
            <summary>
            What to display when asked for help while in a confirmation.
            </summary>
            <remarks>
            This template controls the overall help experience.  {0} will be recognizer specific help and {1} will be command help.
            </remarks>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.TemplateUsage.HelpNavigation">
            <summary>
            What to display when asked for help while navigating.
            </summary>
            <remarks>
            This template controls the overall help experience.  {0} will be recognizer specific help and {1} will be command help.
            </remarks>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.TemplateUsage.Integer">
            <summary>
            How to ask for an integer.
            </summary>
            <remarks>
            Within this template if numerical limits are specified using <see cref="T:Microsoft.Bot.Builder.FormFlow.NumericAttribute"/>, 
            {0} is the minimum possible value and {1} is the maximum possible value.
            </remarks>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.TemplateUsage.IntegerHelp">
            <summary>
            What you can enter while entering an integer.
            </summary>
            <remarks>
            Within this template, {0} is current choice if any, {1} is no preference for optional  and {1} and {2} are min/max if specified.
            </remarks>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.TemplateUsage.Navigation">
            <summary>
            How to ask for a navigation.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.TemplateUsage.NavigationCommandHelp">
            <summary>
            Help pattern for navigation commands. 
            </summary>
            <remarks>
            Within this template, {0} has the list of possible field names.
            </remarks>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.TemplateUsage.NavigationFormat">
            <summary>
            Navigation format for one line in navigation choices.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.TemplateUsage.NavigationHelp">
            <summary>
            What you can enter when navigating.
            </summary>
            <remarks>
            Within this template, if numeric choies are allowed {0} is the minimum possible choice 
            and {1} the maximum possible choice. 
            </remarks>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.TemplateUsage.NoPreference">
            <summary>
            How to show no preference in an optional field.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.TemplateUsage.NotUnderstood">
            <summary>
            Response when an input is not understood.
            </summary>
            <remarks>
            When no input is matched this template is used and gets {0} for what the user entered.
            </remarks>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.TemplateUsage.StatusFormat">
            <summary>
            Format for one entry in status.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.TemplateUsage.String">
            <summary>
            How to ask for a string.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.TemplateUsage.StringHelp">
            <summary>
            What to display when asked for help when entering a string. 
            </summary>
            <remarks>
            Within this template {0} is the current choice if any and {1} is no preference if optional. 
            </remarks>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.TemplateUsage.Unspecified">
            <summary>
            How to represent a value that has not yet been specified.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.TemplateAttribute">
            <summary>
            Define a template for generating strings.
            </summary>
            <remarks>
            Templates provide a pattern that uses the template language defined in \ref patterns.  See <see cref="T:Microsoft.Bot.Builder.FormFlow.TemplateUsage"/> to see a description of all the different kinds of templates.
            You can also look at <see cref="F:Microsoft.Bot.Builder.FormFlow.FormConfiguration.Templates"/> to see all the default templates that are provided.  Templates can be overriden at the form, class/struct of field level.  
            They also support randomly selecting between templates which is a good way to introduce some variation in your responses.
            </remarks>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.TemplateAttribute.Usage">
            <summary>
            What kind of template this is.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.TemplateAttribute.#ctor(Microsoft.Bot.Builder.FormFlow.TemplateUsage,System.String[])">
            <summary>
            Specify a set of templates to randomly choose between for a particular usage.
            </summary>
            <param name="usage">How the template will be used.</param>
            <param name="patterns">The set of \ref patterns to randomly choose from.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.TemplateAttribute.#ctor(Microsoft.Bot.Builder.FormFlow.TemplateAttribute)">
            <summary>   Initialize from another template. </summary>
            <param name="other">    The other template. </param>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.OptionalAttribute">
            <summary>
            Define a field or property as optional.
            </summary>
            <remarks>
            An optional field is one where having no value is an acceptable response.  By default every field is considered required and must be filled in to complete the form.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.OptionalAttribute.#ctor">
            <summary>
            Mark a field or property as optional.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.NumericAttribute">
            <summary>
            Provide limits on the possible values in a numeric field or property.
            </summary>
            <remarks>
            By default the limits are the min and max of the underlying field type.
            </remarks>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.NumericAttribute.Min">
            <summary>
            Min possible value.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.NumericAttribute.Max">
            <summary>
            Max possible value.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.NumericAttribute.#ctor(System.Double,System.Double)">
            <summary>
            Specify the range of possible values for a number field.
            </summary>
            <param name="min">Min value allowed.</param>
            <param name="max">Max value allowed.</param>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.PatternAttribute">
            <summary>
            Provide a regular expression to validate a string field.
            </summary>
            <remarks>
            If the regular expression is not matched the <see cref="F:Microsoft.Bot.Builder.FormFlow.TemplateUsage.NotUnderstood"/> template will be used for feedback.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.PatternAttribute.#ctor(System.String)">
            <summary>
            Regular expression for validating the content of a string field.
            </summary>
            <param name="pattern">Regular expression for validation.</param>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.ActiveDelegate`1">
            <summary>
            A delegate for testing a form state to see if a particular step is active.
            </summary>
            <typeparam name="T">Form state type.</typeparam>
            <param name="state">Form state to test.</param>
            <returns>True if step is active given the current form state.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.Choice">
            <summary>
            Choice for clarifying an amiguous value in <see cref="T:Microsoft.Bot.Builder.FormFlow.ValidateResult"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.Choice.Value">
            <summary>
            Value to return if choice is selected.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.Choice.Description">
            <summary>
            Description of value.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.Choice.Terms">
            <summary>
            Terms to match value.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.ValidateResult">
            <summary>   Encapsulates the result of a <see cref="T:Microsoft.Bot.Builder.FormFlow.ValidateAsyncDelegate`1"/> </summary>
            <remarks>
                     If <see cref="F:Microsoft.Bot.Builder.FormFlow.ValidateResult.IsValid"/> is true, then the field will be set to <see cref="F:Microsoft.Bot.Builder.FormFlow.ValidateResult.Value"/>.
                     Otherwise if <see cref="F:Microsoft.Bot.Builder.FormFlow.ValidateResult.Choices"/> is  non-null they will be used to select a clarifying value.
                     if <see cref="F:Microsoft.Bot.Builder.FormFlow.ValidateResult.FeedbackCard"/> is non-null the resulting card will be displayed.
                     Otherwise the <see cref="F:Microsoft.Bot.Builder.FormFlow.ValidateResult.Feedback"/> string will be shown to provide feedback on the value.
                     </remarks>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.ValidateResult.Feedback">
            <summary>   Feedback to provide back to the user on the input. </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.ValidateResult.FeedbackCard">
            <summary>
            Fully specified feedback card.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.ValidateResult.IsValid">
            <summary>   True if value is a valid response. </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.ValidateResult.Value">
            <summary>
            Value to put in the field if result is valid.
            </summary>
            <remarks>This provides an opportunity for validation to compute the final value.</remarks>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.ValidateResult.Choices">
            <summary>
            Choices for clarifying response.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.ValidateAsyncDelegate`1">
            <summary>
            A delegate for validating a particular response to a prompt.
            </summary>
            <typeparam name="T">Form state type.</typeparam>
            <param name="state">Form state to test.</param>
            <param name="value">Response value to validate.</param>
            <returns>Null if value is valid otherwise feedback on what is wrong.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.OnCompletionAsyncDelegate`1">
            <summary>
            A delegate called when a form is completed.
            </summary>
            <typeparam name="T">Form state type.</typeparam>
            <param name="context">Session where form dialog is taking place.</param>
            <param name="state">Completed form state.</param>
            <remarks>
            This delegate gives an opportunity to take an action on a completed form
            such as sending it to your service.  It cannot be used to create a new
            dialog or return a value to the parent dialog.
            </remarks>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.IFormDialog`1">
            <summary>
            Interface for controlling a FormFlow dialog.
            </summary>
            <typeparam name="T">Form state type.</typeparam>
            <remarks>
            <see cref="T:Microsoft.Bot.Builder.FormFlow.FormDialog`1"/> is an implementation of this interface.
            </remarks>
            <exception cref="T:Microsoft.Bot.Builder.FormFlow.FormCanceledException`1">Thrown when the user quits while filling in a form, or there is an underlying exception in the code.</exception>
        </member>
        <member name="P:Microsoft.Bot.Builder.FormFlow.IFormDialog`1.Form">
            <summary>
            The form specification.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.FormCommand">
            <summary>
            Commands supported in form dialogs.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.FormCommand.Backup">
            <summary>
            Move back to the previous step.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.FormCommand.Help">
            <summary>
            Ask for help on responding to the current field.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.FormCommand.Quit">
            <summary>
            Quit filling in the current form and return failure to parent dialog.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.FormCommand.Reset">
            <summary>
            Reset the status of the form dialog.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.FormCommand.Status">
            <summary>
            Provide feedback to the user on the current form state.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.CommandDescription">
            <summary>
            Description of all the information needed for a built-in command.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.CommandDescription.Description">
            <summary>
            Description of the command.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.CommandDescription.Terms">
            <summary>
            Regexs for matching the command.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.FormFlow.CommandDescription.Help">
            <summary>
            Help string for the command.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.CommandDescription.#ctor(System.String,System.String[],System.String)">
            <summary>
            Construct the description of a built-in command.
            </summary>
            <param name="description">Description of the command.</param>
            <param name="terms">Terms that match the command.</param>
            <param name="help">Help on what the command does.</param>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.FormCanceledException">
            <summary>   Exception generated when form filling is canceled by user quit or exception. </summary>
            <remarks>In the case of user quit or an exception the strongly typed exception <see cref="T:Microsoft.Bot.Builder.FormFlow.FormCanceledException`1"/>
                     is actually thrown, but this provides simple access to the Last step.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.FormCanceledException.#ctor(System.String,System.Exception)">
            <summary>   Constructor with message and inner exception. </summary>
            <param name="message">Exception message.</param>
            <param name="inner">Inner exception.</param>
            <remarks>In the case of quit by the user, the inner exception will be null.</remarks>
        </member>
        <member name="P:Microsoft.Bot.Builder.FormFlow.FormCanceledException.Completed">
            <summary>   The names of completed steps. </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.FormFlow.FormCanceledException.Last">
            <summary>   Name of the step that quit or threw an exception. </summary>
        </member>
        <member name="T:Microsoft.Bot.Builder.FormFlow.FormCanceledException`1">
            <summary>   Exception generated when form filling is canceled by user quit or exception. </summary>
            <typeparam name="T">    Underlying form type. </typeparam>
        </member>
        <member name="M:Microsoft.Bot.Builder.FormFlow.FormCanceledException`1.#ctor(System.String,System.Exception)">
            <summary>   Constructor with message and inner exception. </summary>
            <param name="message">Exception message.</param>
            <param name="inner">Inner exception.</param>
            <remarks>In the case of user quit, the inner exception will be null.</remarks>
        </member>
        <member name="P:Microsoft.Bot.Builder.FormFlow.FormCanceledException`1.LastForm">
            <summary>   Gets the partial form when the user quits or there is an exception. </summary>
        </member>
        <member name="T:Microsoft.Bot.Builder.Luis.ICalendarPlus">
            <summary>
            Policy for interpreting LUIS resolutions.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Builder.Luis.WesternCalendarPlus">
            <summary>
            https://en.wikipedia.org/wiki/Gregorian_calendar
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Builder.Luis.IEntityToType">
            <summary>
            An abtraction to map from a LUIS <see cref="T:Microsoft.Bot.Builder.Luis.Models.EntityRecommendation"/> to specific CLR types. 
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Luis.IEntityToType.TryMapToTimeSpan(System.DateTime,System.Collections.Generic.IEnumerable{Microsoft.Bot.Builder.Luis.Models.EntityRecommendation},System.TimeSpan@)">
            <summary>
            Try to map LUIS <see cref="T:Microsoft.Bot.Builder.Luis.Models.EntityRecommendation"/> instances to a <see cref="T:System.TimeSpan"/>, relative to now.
            </summary>
            <param name="now">The now reference <see cref="T:System.DateTime"/>.</param>
            <param name="entities">A list of possibly-relevant <see cref="T:Microsoft.Bot.Builder.Luis.Models.EntityRecommendation"/> instances.</param>
            <param name="span">The output <see cref="T:System.TimeSpan"/>.</param>
            <returns>True if the mapping may have been successful, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Luis.IEntityToType.TryMapToDateRanges(System.DateTime,System.Collections.Generic.IEnumerable{Microsoft.Bot.Builder.Luis.Models.EntityRecommendation},System.Collections.Generic.IEnumerable{Microsoft.Bot.Builder.Internals.Fibers.Range{System.DateTime}}@)">
            <summary>
            Try to map LUIS <see cref="T:Microsoft.Bot.Builder.Luis.Models.EntityRecommendation"/> instances to a list of <see cref="T:System.DateTime"/> ranges, relative to now.
            </summary>
            <param name="now">The now reference <see cref="T:System.DateTime"/>.</param>
            <param name="entities">A list of possibly-relevant <see cref="T:Microsoft.Bot.Builder.Luis.Models.EntityRecommendation"/> instances.</param>
            <param name="ranges">The output <see cref="T:System.DateTime"/> ranges.</param>
            <returns>True if the mapping may have been successful, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Luis.StrictEntityToType.Interpret(Microsoft.Bot.Builder.Luis.BuiltIn.DateTime.DateTimeResolution,System.DateTime,System.Globalization.Calendar,System.Globalization.CalendarWeekRule,System.DayOfWeek,System.Func{Microsoft.Bot.Builder.Luis.BuiltIn.DateTime.DayPart,System.Int32})">
            <summary>
            Interpret a parsed DateTimeResolution to provide a series of DateTime ranges
            </summary>
            <param name="resolution">The DateTimeResolution parsed from a LUIS response.</param>
            <param name="now">The reference point of "now".</param>
            <param name="calendar">The calendar to use for date math.</param>
            <param name="rule">The calendar week rule to use for date math.</param>
            <param name="firstDayOfWeek">The first day of the week to use for date math.</param>
            <param name="HourFor">The hour that corresponds to the <see cref="T:Microsoft.Bot.Builder.Luis.BuiltIn.DateTime.DayPart"/> enumeration.</param>
            <returns>A potentially infinite series of DateTime ranges.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.Luis.Extensions">
            <summary>
            LUIS extension methods.
            </summary>
            <summary>
            LUIS extension methods.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Luis.Extensions.TryFindEntity(Microsoft.Bot.Builder.Luis.Models.LuisResult,System.String,Microsoft.Bot.Builder.Luis.Models.EntityRecommendation@)">
            <summary>
            Try to find an entity within the result.
            </summary>
            <param name="result">The LUIS result.</param>
            <param name="type">The entity type.</param>
            <param name="entity">The found entity.</param>
            <returns>True if the entity was found, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Luis.Extensions.ParseResolutions(Microsoft.Bot.Builder.Luis.IResolutionParser,System.Collections.Generic.IEnumerable{Microsoft.Bot.Builder.Luis.Models.EntityRecommendation})">
            <summary>
            Parse all resolutions from a LUIS result.
            </summary>
            <param name="parser">The resolution parser.</param>
            <param name="entities">The LUIS entities.</param>
            <returns>The parsed resolutions.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Luis.Extensions.Next(Microsoft.Bot.Builder.Luis.BuiltIn.DateTime.DayPart)">
            <summary>
            Return the next <see cref="T:Microsoft.Bot.Builder.Luis.BuiltIn.DateTime.DayPart"/>. 
            </summary>
            <param name="part">The <see cref="T:Microsoft.Bot.Builder.Luis.BuiltIn.DateTime.DayPart"/> query.</param>
            <returns>The next <see cref="T:Microsoft.Bot.Builder.Luis.BuiltIn.DateTime.DayPart"/> after the query.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Luis.Extensions.QueryAsync(Microsoft.Bot.Builder.Luis.ILuisService,System.String)">
            <summary>
            Query the LUIS service using this text.
            </summary>
            <param name="service">LUIS service.</param>
            <param name="text">The query text.</param>
            <returns>The LUIS result.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.Luis.LuisModelAttribute">
            <summary>
            The LUIS model information.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.Luis.LuisModelAttribute.ModelID">
            <summary>
            The LUIS model ID.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.Luis.LuisModelAttribute.SubscriptionKey">
            <summary>
            The LUIS subscription key.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Luis.LuisModelAttribute.#ctor(System.String,System.String)">
            <summary>
            Construct the LUIS model information.
            </summary>
            <param name="modelID">The LUIS model ID.</param>
            <param name="subscriptionKey">The LUIS subscription key.</param>
        </member>
        <member name="T:Microsoft.Bot.Builder.Luis.ILuisService">
            <summary>
            A mockable interface for the LUIS service.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Luis.ILuisService.BuildUri(System.String)">
            <summary>
            Build the query uri for the query text.
            </summary>
            <param name="text">The query text.</param>
            <returns>The query uri.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Luis.ILuisService.QueryAsync(System.Uri)">
            <summary>
            Query the LUIS service using this uri.
            </summary>
            <param name="uri">The query uri.</param>
            <returns>The LUIS result.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.Luis.LuisService">
            <summary>
            Standard implementation of ILuisService against actual LUIS service.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Luis.LuisService.#ctor(Microsoft.Bot.Builder.Luis.LuisModelAttribute)">
            <summary>
            Construct the LUIS service using the model information.
            </summary>
            <param name="model">The LUIS model information.</param>
        </member>
        <member name="F:Microsoft.Bot.Builder.Luis.LuisService.UriBase">
            <summary>
            The base URi for accessing LUIS.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Builder.Luis.Models.EntityRecommendation">
            <summary>
            Luis entity recommendation. Look at https://www.luis.ai/Help for more
            information.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Luis.Models.EntityRecommendation.#ctor">
            <summary>
            Initializes a new instance of the EntityRecommendation class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Luis.Models.EntityRecommendation.#ctor(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double},System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the EntityRecommendation class.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Luis.Models.EntityRecommendation.Role">
            <summary>
            Role of the entity.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Luis.Models.EntityRecommendation.Entity">
            <summary>
            Entity extracted by LUIS.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Luis.Models.EntityRecommendation.Type">
            <summary>
            Type of the entity.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Luis.Models.EntityRecommendation.StartIndex">
            <summary>
            Start index of the entity in the LUIS query string.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Luis.Models.EntityRecommendation.EndIndex">
            <summary>
            End index of the entity in the LUIS query string.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Luis.Models.EntityRecommendation.Score">
            <summary>
            Score assigned by LUIS to detected entity.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Luis.Models.EntityRecommendation.Resolution">
            <summary>
            A machine readable dictionary with more information about the
            entity Look at builtin.datetime for an example in the
            https://www.luis.ai/Help#PreBuiltEntities.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Builder.Luis.Models.IntentRecommendation">
            <summary>
            LUIS intent recommendation. Look at https://www.luis.ai/Help for more
            information.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Luis.Models.IntentRecommendation.#ctor">
            <summary>
            Initializes a new instance of the IntentRecommendation class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Luis.Models.IntentRecommendation.#ctor(System.String,System.Nullable{System.Double},System.Collections.Generic.IList{Microsoft.Bot.Builder.Luis.Models.Action})">
            <summary>
            Initializes a new instance of the IntentRecommendation class.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Luis.Models.IntentRecommendation.Intent">
            <summary>
            The LUIS intent detected by LUIS service in response to a query.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Luis.Models.IntentRecommendation.Score">
            <summary>
            The score for the detected intent.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Luis.Models.IntentRecommendation.Actions">
            <summary>
            The action associated with this Luis intent.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Luis.Models.Action.#ctor">
            <summary>
            Initializes a new instance of the Action class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Luis.Models.Action.#ctor(System.Nullable{System.Boolean},System.String,System.Collections.Generic.IList{Microsoft.Bot.Builder.Luis.Models.ActionParameter})">
            <summary>
            Initializes a new instance of the Action class.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Luis.Models.Action.Triggered">
            <summary>
            True if the Luis action is triggered, false otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Luis.Models.Action.Name">
            <summary>
            Name of the action.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Luis.Models.Action.Parameters">
            <summary>
            The parameters for the action.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Luis.Models.ActionParameter.#ctor">
            <summary>
            Initializes a new instance of the ActionParameter class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Luis.Models.ActionParameter.#ctor(System.String,System.Nullable{System.Boolean},System.Collections.Generic.IList{Microsoft.Bot.Builder.Luis.Models.ActionParameterValue})">
            <summary>
            Initializes a new instance of the ActionParameter class.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Luis.Models.ActionParameter.Name">
            <summary>
            Name of the parameter.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Luis.Models.ActionParameter.Required">
            <summary>
            True if the parameter is required, false otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Luis.Models.ActionParameter.Value">
            <summary>
            Value of extracted entities for this parameter.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Luis.Models.ActionParameterValue.#ctor">
            <summary>
            Initializes a new instance of the ActionParameterValue class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Luis.Models.ActionParameterValue.#ctor(System.String,System.String,System.Nullable{System.Double})">
            <summary>
            Initializes a new instance of the ActionParameterValue class.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Luis.Models.ActionParameterValue.Entity">
            <summary>
            Entity extracted by LUIS.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Luis.Models.ActionParameterValue.Type">
            <summary>
            Type of the entity.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Luis.Models.ActionParameterValue.Score">
            <summary>
            Score assigned by LUIS to detected entity.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Luis.Models.LuisResult.#ctor">
            <summary>
            Initializes a new instance of the LuisResult class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Luis.Models.LuisResult.#ctor(System.String,System.Collections.Generic.IList{Microsoft.Bot.Builder.Luis.Models.IntentRecommendation},System.Collections.Generic.IList{Microsoft.Bot.Builder.Luis.Models.EntityRecommendation})">
            <summary>
            Initializes a new instance of the LuisResult class.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Luis.Models.LuisResult.Query">
            <summary>
            The query sent to LUIS.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Luis.Models.LuisResult.Intents">
            <summary>
            The intents found in the query text.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Luis.Models.LuisResult.Entities">
            <summary>
            The entities found in the query text.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Luis.Models.LuisResult.Validate">
            <summary>
            Validate the object. Throws ValidationException if validation fails.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Builder.Resource.Extensions">
            <summary>   Extensions for resources. </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.Resource.Extensions.SEPARATOR">
            <summary>   The separator character between elements in a string list. </summary>
        </member>
        <member name="F:Microsoft.Bot.Builder.Resource.Extensions.ESCAPED_SEPARATOR">
            <summary>   When the <see cref="F:Microsoft.Bot.Builder.Resource.Extensions.SEPARATOR"/> is found in a string list, the escaped replacement.</summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Resource.Extensions.MakeList(System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>   Makes a string list. </summary>
            <param name="elements">     The elements to combine into a list. </param>
            <param name="separator">    The separator character between elements in a string list. </param>
            <param name="escape">       The escape string for separator characters. </param>
            <returns>   A string. </returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Resource.Extensions.MakeList(System.String[])">
            <summary>   Makes a list from parameters. </summary>
            <param name="elements"> The elements to combine into a list. </param>
            <returns>   A string. </returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Resource.Extensions.SplitList(System.String,System.String,System.String)">
            <summary>   A string extension method that splits a list. </summary>
            <param name="str">          The str to act on. </param>
            <param name="separator">    The separator character between elements in a string list. </param>
            <param name="escape">       The escape string for separator characters. </param>
            <returns>   A string[]. </returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.Resource.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.CommandBack">
            <summary>
              Looks up a localized string similar to Back.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.CommandBackHelp">
            <summary>
              Looks up a localized string similar to Back: Go back to the previous question..
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.CommandBackTerms">
            <summary>
              Looks up a localized string similar to backup;go back;back.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.CommandHelp">
            <summary>
              Looks up a localized string similar to Help.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.CommandHelpHelp">
            <summary>
              Looks up a localized string similar to Help: Show the kinds of responses you can enter..
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.CommandHelpTerms">
            <summary>
              Looks up a localized string similar to help;choices;\?.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.CommandQuit">
            <summary>
              Looks up a localized string similar to Quit.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.CommandQuitHelp">
            <summary>
              Looks up a localized string similar to Quit: Quit the form without completing it..
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.CommandQuitTerms">
            <summary>
              Looks up a localized string similar to quit;stop;finish;goodby?;good bye?;bye;ciao;adios;bye-bye;so long;cheers.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.CommandReset">
            <summary>
              Looks up a localized string similar to Start over.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.CommandResetHelp">
            <summary>
              Looks up a localized string similar to Reset: Start over filling in the form.  (With defaults from your previous entries.).
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.CommandResetTerms">
            <summary>
              Looks up a localized string similar to start over;reset;clear.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.CommandStatus">
            <summary>
              Looks up a localized string similar to Status.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.CommandStatusHelp">
            <summary>
              Looks up a localized string similar to Status: Show your progress in filling in the form so far..
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.CommandStatusTerms">
            <summary>
              Looks up a localized string similar to status;progress;so far;results.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.Confirmation">
            <summary>
              Looks up a localized string similar to Confirmation.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.ConfirmChoiceFormat">
            <summary>
              Looks up a localized string similar to {1}.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.DefaultChoiceFormat">
            <summary>
              Looks up a localized string similar to {0}. {1}.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.DefaultChoiceLastSeparator">
            <summary>
              Looks up a localized string similar to , or .
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.DefaultChoiceSeparator">
            <summary>
              Looks up a localized string similar to , .
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.DefaultLastSeparator">
            <summary>
              Looks up a localized string similar to , and .
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.DefaultSeparator">
            <summary>
              Looks up a localized string similar to , .
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.LanguageArticles">
            <summary>
              Looks up a localized string similar to a;an;the.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.LanguageStopWords">
            <summary>
              Looks up a localized string similar to a;about;above;above;across;after;afterwards;again;against;all;almost;alone;along;already;also;although;always;am;among;amongst;amoungst;amount;an;and;another;any;anyhow;anyone;anything;anyway;anywhere;are;around;as;at;back;be;became;because;become;becomes;becoming;been;before;beforehand;behind;being;below;beside;besides;between;beyond;bill;both;bottom;but;by;call;can;cannot;cant;co;con;could;couldnt;cry;de;describe;detail;do;done;down;due;during;each;eg;eight;either;eleven;else;elsewhere;empty;enough;etc;ev [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.MatchCurrentChoice">
            <summary>
              Looks up a localized string similar to Current Choice(&apos;c&apos;);current;c;current choice;no change.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.MatchNo">
            <summary>
              Looks up a localized string similar to No;n;nope;2.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.MatchNoPreference">
            <summary>
              Looks up a localized string similar to No Preference;no;none;I don&apos;?t care.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.MatchYes">
            <summary>
              Looks up a localized string similar to Yes;y;sure;ok;yep;1.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.Navigation">
            <summary>
              Looks up a localized string similar to Field Name.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.PromptRetry">
            <summary>
              Looks up a localized string similar to I didn&apos;t understand. Say something in reply..
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.TemplateBool">
            <summary>
              Looks up a localized string similar to Would you like a {&amp;}? {||}.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.TemplateBoolHelp">
            <summary>
              Looks up a localized string similar to Please enter &apos;yes&apos; or &apos;no&apos;{?, {0}}..
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.TemplateClarify">
            <summary>
              Looks up a localized string similar to By &quot;{0}&quot; {&amp;} did you mean {||}.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.TemplateConfirmation">
             <summary>
               Looks up a localized string similar to Is this your selection?
            {*}.
             </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.TemplateCurrentChoice">
            <summary>
              Looks up a localized string similar to (current choice: {}).
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.TemplateDateTime">
            <summary>
              Looks up a localized string similar to Please enter a date and time for {&amp;} {||}.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.TemplateDateTimeHelp">
            <summary>
              Looks up a localized string similar to Please enter a date or time expression {?, {0}}{?, {1}}..
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.TemplateDouble">
            <summary>
              Looks up a localized string similar to Please enter a number {?between {0:F1} and {1:F1}} for {&amp;} {||}.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.TemplateDoubleChoiceFormat">
            <summary>
              Looks up a localized string similar to {1}.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.TemplateDoubleHelp">
            <summary>
              Looks up a localized string similar to Please enter a number{? between {2:F1} and {3:F1}}{?, {0}}{?, {1}}..
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.TemplateEnumManyNumberHelp">
            <summary>
              Looks up a localized string similar to You can enter one or more numbers {0}-{1} or words from the descriptions. ({2}).
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.TemplateEnumManyWordHelp">
            <summary>
              Looks up a localized string similar to You can enter in one or more selections from the descriptions. ({2}).
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.TemplateEnumOneNumberHelp">
            <summary>
              Looks up a localized string similar to You can enter a number {0}-{1} or words from the descriptions. ({2}).
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.TemplateEnumOneWordHelp">
            <summary>
              Looks up a localized string similar to You can enter in any words from the descriptions. ({2}).
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.TemplateEnumSelectMany">
            <summary>
              Looks up a localized string similar to Please select one or more {&amp;} {||}.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.TemplateEnumSelectOne">
            <summary>
              Looks up a localized string similar to Please select a {&amp;} {||}.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.TemplateFeedback">
            <summary>
              Looks up a localized string similar to For {&amp;} I understood {}. {?&quot;{0}&quot; is not an option.}.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.TemplateHelp">
             <summary>
               Looks up a localized string similar to You are filling in the {&amp;} field.  Possible responses:
            {0}
            {1}.
             </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.TemplateHelpClarify">
             <summary>
               Looks up a localized string similar to You are clarifying a {&amp;} value.  Possible responses:
            {0}
            {1}.
             </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.TemplateHelpConfirm">
             <summary>
               Looks up a localized string similar to Please answer the question.  Possible responses:
            {0}
            {1}.
             </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.TemplateHelpNavigation">
             <summary>
               Looks up a localized string similar to Choose what field to change.  Possible responses:
            {0}
            {1}.
             </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.TemplateInteger">
            <summary>
              Looks up a localized string similar to Please enter a number{? between {0} and {1}} for {&amp;} {||}.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.TemplateIntegerChoiceFormat">
            <summary>
              Looks up a localized string similar to {1}.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.TemplateIntegerHelp">
            <summary>
              Looks up a localized string similar to You can enter a number{? between {2} and {3}}{?, {0}}{?, {1}}..
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.TemplateNavigation">
            <summary>
              Looks up a localized string similar to What do you want to change? {||}.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.TemplateNavigationCommandHelp">
            <summary>
              Looks up a localized string similar to You can switch to another field by entering its name. ({0})..
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.TemplateNavigationFormat">
            <summary>
              Looks up a localized string similar to {&amp;}({}).
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.TemplateNavigationHelp">
            <summary>
              Looks up a localized string similar to Choose {?a number from {0}-{1}, or} a field name..
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.TemplateNoPreference">
            <summary>
              Looks up a localized string similar to No Preference.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.TemplateNotUnderstood">
            <summary>
              Looks up a localized string similar to &quot;{0}&quot; is not a {&amp;} option..
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.TemplateStatusFormat">
            <summary>
              Looks up a localized string similar to {&amp;}: {}.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.TemplateString">
            <summary>
              Looks up a localized string similar to Please enter {&amp;} {||}.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.TemplateStringChoiceFormat">
            <summary>
              Looks up a localized string similar to {1}.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.TemplateStringHelp">
            <summary>
              Looks up a localized string similar to You can enter anything (use &quot;&apos;s to force string){?, {0}}{?, {1}}..
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.TemplateUnspecified">
            <summary>
              Looks up a localized string similar to Unspecified.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.TooManyAttempts">
            <summary>
              Looks up a localized string similar to too many attempts.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.UnhandledExceptionToUser">
            <summary>
              Looks up a localized string similar to Sorry, my bot code is having an issue..
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.Resource.Resources.UserProfileDeleted">
            <summary>
              Looks up a localized string similar to User profile deleted!.
            </summary>
        </member>
    </members>
</doc>
