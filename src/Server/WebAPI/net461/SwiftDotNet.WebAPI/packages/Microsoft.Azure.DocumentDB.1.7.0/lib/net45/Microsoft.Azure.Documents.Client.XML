<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Azure.Documents.Client</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Azure.Documents.DelayTaskTimer">
            <summary>
            This class is an optimized version of Task.Delay for performance which uses System Timer for keeping track of the specified timeout 
            and returns a Task that you can await on. This is preferred over using CancellationTokenSource with Task.Delay since this implementation doesn't 
            throws any exception if the Task is cancelled which is much cleaner approach since we don't see any first chance exceptions being thrown 
            whenever a timer task is cancelled. Marking it sealed as it will boost the performance by some factor.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.DelayTaskTimer.#ctor(System.Double)">
            <summary>
            Constructor that takes in the specified timeout for the delay task
            </summary>
            <param name="timeoutInSeconds"></param>
        </member>
        <member name="M:Microsoft.Azure.Documents.DelayTaskTimer.StartTimer">
            <summary>
            Starts the timer for the timeout period
            </summary>
            <returns>Returns the Task upon which you can await on until completion</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.DelayTaskTimer.CancelTimer">
            <summary>
            Cancels the timer
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.JsonSerializable">
            <summary>
            Represents the base class for DocumentDB objects. Provides methods for serializing and deserializing from JSON.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.JsonSerializable.SaveTo(System.IO.Stream,Microsoft.Azure.Documents.SerializationFormattingPolicy)">
            <summary> 
            Saves the object to the specified stream.
            </summary>
            <param name="stream">Saves the object to this output stream.</param>
            <param name="formattingPolicy">Uses an optional serialization formatting policy when saving the object. The default policy is set to None.</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.JsonSerializable.LoadFrom(Newtonsoft.Json.JsonReader)">
            <summary>
            Loads the object from the specified JSON reader.
            </summary>
            <param name="reader">Loads the object from this JSON reader.</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.JsonSerializable.LoadFrom``1(System.IO.Stream)">
            <summary>
            Loads the object from the specified stream.
            </summary>
            <typeparam name="T">The type of the returning object.</typeparam>
            <param name="stream">The stream to load from.</param>
            <returns>The object loaded from the specified stream.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.JsonSerializable.LoadFrom``1(System.IO.Stream,Microsoft.Azure.Documents.ITypeResolver{``0})">
            <summary>
            Loads the object from the specified stream.
            </summary>
            <typeparam name="T">The type of the returning object.</typeparam>
            <param name="stream">The stream to load from.</param>
            <param name="typeResolver">Used to get a correct object from a stream.</param>
            <returns>The object loaded from the specified stream.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.JsonSerializable.LoadFromWithConstructor``1(System.IO.Stream,System.Func{``0})">
            <summary>
            Deserializes the specified stream using the given constructor.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="stream">The stream to load from.</param>
            <param name="constructorFunction">The constructor used for the returning object.</param>
            <returns>The object loaded from the specified stream.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.JsonSerializable.ToString">
            <summary>
            Returns the string representation of the object.
            </summary>
            <returns>The string representation of the object.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.JsonSerializable.GetValue``1(System.String)">
            <summary>
            Get the value associated with the specified property name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.JsonSerializable.GetValue``1(System.String,``0)">
            <summary>
            Get the value associated with the specified property name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.JsonSerializable.SetValue(System.String,System.Object)">
            <summary>
            Set the value associated with the specified name.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.Azure.Documents.JsonSerializable.SetValueByPath``1(System.String[],``0)">
            <summary>
            Set the value associated with the specified property name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fieldNames">Field names which compose a path to the property to be retrieved.</param>
            <param name="value"></param>
            <returns></returns>
            <remarks>This will overwrite the existing properties</remarks>
        </member>
        <member name="T:Microsoft.Azure.Documents.Resource">
            <summary> 
             Represents an abstract resource type.
             All DocumentDB resources, such as <see cref="T:Microsoft.Azure.Documents.Database"/>, <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/>, and <see cref="T:Microsoft.Azure.Documents.Document"/> extend this abstract type.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Resource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Resource"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Resource.#ctor(Microsoft.Azure.Documents.Resource)">
            <summary>
            Copy constructor for a <see cref="T:Microsoft.Azure.Documents.Resource"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Resource.SetPropertyValue(System.String,System.Object)">
            <summary>
            Sets property value associated with the specified property name.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <param name="propertyValue">The property value.</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Resource.GetPropertyValue``1(System.String)">
            <summary>
            Gets property value associated with the specified property name.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="propertyName">The name of the property.</param>
            <returns>The property value.</returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.Resource.Id">
            <summary>
            Gets or sets the Id of the resource.
            </summary>
            <value>The Id associated with the resource.</value>
            <remarks>
            <para>
            Every resource within a DocumentDB database account needs to have a unique identifier. 
            Unlike <see cref="P:Microsoft.Azure.Documents.Resource.ResourceId"/>, which is set internally, this Id is settable by the user and is not immutable.
            </para>
            <para>
            When working with Document resources, they too have this settable Id property. 
            If an Id is not supplied by the user the SDK will automatically generate a new GUID and assign its value to this property before
            persisting the Document in the database. 
            You can override this auto Id generation by setting the disableAutomaticIdGeneration parameter on the <see cref="T:Microsoft.Azure.Documents.Client.DocumentClient"/> instance to true.
            This will prevent the SDK from generating new Ids. 
            </para>
            <para>
            The following characters are restricted and cannot be used in the Id property:
             '/', '\\', '?', '#'
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Resource.ResourceId">
            <summary>
            Gets or sets the Resource Id associated with the resource.
            </summary>
            <value>
            The Resource Id associated with the resource.
            </value>
            <remarks>
            A Resource Id is the unique, immutable, identifier assigned to each DocumentDB 
            resource whether that is a database, a collection or a document.
            These resource ids are used when building up SelfLinks, a static addressable Uri for each resource within a database account.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Resource.SelfLink">
            <summary>
            Gets the self-link associated with the resource.
            </summary>
            <value>The self-link associated with the resource.</value> 
            <remarks>
            A self-link is a static addressable Uri for each resource within a database account and follows the DocumentDB resource model.
            E.g. a self-link for a document could be dbs/db_resourceid/colls/coll_resourceid/documents/doc_resourceid
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Resource.AltLink">
            <summary>
            Gets the alt-link associated with the resource.
            </summary>
            <value>The alt-link associated with the resource.</value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Resource.Timestamp">
            <summary>
            Gets the last modified timestamp associated with the resource.
            </summary>
            <value>The last modified timestamp associated with the resource.</value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Resource.ETag">
            <summary>
            Gets the entity tag associated with the resource.
            </summary>
            <value>
            The entity tag associated with the resource.
            </value>
            <remarks>
            ETags are used for concurrency checking when updating resources. 
            </remarks>
        </member>
        <member name="T:Microsoft.Azure.Documents.Attachment">
            <summary>
            Represents a document attachment.  
            </summary>
            <remarks>
            Each document may contain zero or more attachments containing data of arbitrary formats like images, binary or large text blobs. 
            The Attachment class represents the DocumentDB resource used to store information about the attachment like its location and 
            MIME content type. The payload itself ("Media") is referenced through the MediaLink property. The Attachment class is a DynamicObject 
            and can contain any custom metadata to be persisted. 
            
            Attachments can be created as managed or unmanaged. If attachments are created as managed through DocumentDB, then it is assigned a system 
            generated mediaLink. DocumentDB then automatically performs garbage collection on the media when parent document is deleted.
            
            You can reuse the mediaLink property to store an external location e.g., a file share or an Azure Blob Storage URI. 
            DocumentDB will not perform garbage collection on mediaLinks for external locations.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Attachment.#ctor">
            <summary>
            Initializes a new instance of an <see cref="T:Attachment"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Attachment.ContentType">
            <summary>
            Gets or sets the MIME content type of the attachment.
            </summary>
            <value>
            The MIME content type of the attachment.
            </value>
            <remarks>For example, set to "text/plain" for text files, "image/jpeg" for images.</remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Attachment.MediaLink">
            <summary>
            Gets or sets the media link associated with the attachment content.
            </summary>
            <value>
            The media link associated with the attachment content.
            </value>
            <remarks>DocumentDB supports both managed and unmanaged attachments.</remarks>
        </member>
        <member name="T:Microsoft.Azure.Documents.DocumentClientException">
            <summary>
            The base class for Azure DocumentDB client exceptions.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.DocumentClientException.Error">
            <summary>
            Gets the error code associated with the exception.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.DocumentClientException.ActivityId">
            <summary>
            Gets the activity ID associated with the request.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.DocumentClientException.RetryAfter">
            <summary>
            Gets the recommended time interval after which the client can retry failed requests
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.DocumentClientException.ResponseHeaders">
            <summary>
            Gets the headers associated with the response.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.DocumentClientException.StatusCode">
            <summary>
            Gets or sets the request status code.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.DocumentClientException.StatusDescription">
            <summary>
            Gets the textual description of request completion status.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.DocumentClientException.RequestCharge">
            <summary>
            Cost of the request.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.DocumentClientException.Message">
             <summary>
            
             Summary:
                 Gets a message that describes the current exception.
            
             </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Base64Helper.SecureStringToNativeBytes(System.Security.SecureString,System.Int32,System.IntPtr@,System.UInt32@)">
            <summary>
            Interprets <paramref name="secureString"/> as a Base64 string, and decodes it into a native byte array,
            which it returns.
            Avoids loading either the original Base64 or decoded binary into managed heap.
            </summary>
            <param name="secureString">Base64 string to decode</param>
            <param name="secureStringLength">Length of the Base64 string to decode</param>
            <param name="bytes">
              An IntPtr allocated with Marshal.AllocCoTaskMem, which, when the user is done, 
              MUST be zeroed out and then freed with Marshal.FreeCoTaskMem by the caller.
            </param>
            <param name="bytesLength">Number of bytes in the decoded binary currentCharacter</param>
        </member>
        <member name="T:Microsoft.Azure.Documents.ConsistencyLevel">
            <summary> 
            These are the consistency levels supported by DocumentDB.
            </summary>
            <remarks>
            The requested Consistency Level must match or be weaker than that provisioned for the database account.
            For more information on consistency levels, please see <see>http://azure.microsoft.com/documentation/articles/documentdb-consistency-levels/"</see> Consistency Levels article.
            </remarks>
        </member>
        <member name="F:Microsoft.Azure.Documents.ConsistencyLevel.Strong">
            <summary>
            Strong Consistency guarantees that read operations always return the value that was last written.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.ConsistencyLevel.BoundedStaleness">
            <summary>
            Bounded Staleness guarantees that reads are not too out-of-date. This can be configured based on number of operations (MaxStalenessPrefix) 
            or time (MaxStalenessIntervalInSeconds).  For more information on MaxStalenessPrefix and MaxStalenessIntervalInSeconds, please see <see cref="T:Microsoft.Azure.Documents.ConsistencyPolicy"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.ConsistencyLevel.Session">
            <summary>
            Session Consistency guarantees monotonic reads (you never read old data, then new, then old again), monotonic writes (writes are ordered) 
            and read your writes (your writes are immediately visible to your reads) within any single session. 
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.ConsistencyLevel.Eventual">
            <summary>
            Eventual Consistency guarantees that reads will return a subset of writes. All writes 
            will be eventually be available for reads.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.ConsistencyPolicy">
            <summary>
            Consistency policy
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.ConsistencyPolicy.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ConsistencyPolicy.DefaultConsistencyLevel">
            <summary>
            Get or set the default consistency level.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ConsistencyPolicy.MaxStalenessPrefix">
            <summary>
            In bounded staleness consistency, the maximum allowed staleness
            in terms difference in sequence numbers (aka version).
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ConsistencyPolicy.MaxStalenessIntervalInSeconds">
            <summary>
            In bounded staleness consistency, the maximum allowed staleness
            in terms time interval.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.Database">
            <summary>
            Represents a Database. 
            </summary>
            <remarks>
            Each DocumentDB database account can have zero or more databases. A database in DocumentDB is a logical container for 
            document collections and users.
            Refer to <see>http://azure.microsoft.com/documentation/articles/documentdb-resources/#databases</see> for more details on databases.
            </remarks>
            <example>
            The example below creates a new Database with an Id property of 'MyDatabase'.
            <code language="c#">
            <![CDATA[ 
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Database db = await client.CreateDatabaseAsync(new Database { Id = "MyDatabase" });
            }
            ]]>
            </code>
            </example>
            <example> 
            The example below creates a collection within this database of the S3 offer type.
            <code language="c#">
            <![CDATA[
            DocumentCollection coll = await client.CreateDocumentCollectionAsync(db.SelfLink,
                new DocumentCollection { Id = "MyCollection" }, 
                new RequestOptions { OfferType = "S3"} );
            ]]>
            </code>
            </example>
            <example>
            The example below queries for a Database by Id to retrieve the SelfLink.
            <code language="c#">
            <![CDATA[
            using Microsoft.Azure.Documents.Linq;
            Database database = client.CreateDatabaseQuery().Where(d => d.Id == "MyDatabase").AsEnumerable().FirstOrDefault();
            string databaseLink = database.SelfLink;
            ]]>
            </code>
            </example>    
            <example>
            The example below deletes the database using its SelfLink property.
            <code language="c#">
            <![CDATA[
            await client.DeleteDatabaseAsync(db.SelfLink);
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.DocumentCollection"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Database.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Database"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Database.CollectionsLink">
            <summary>
            Gets the self-link for collections in the database.
            </summary>
            <value>
            The self-link for collections in the database.
            </value>
            <remarks>
            Every DocumentDB resource has a static, immutable, addressable URI. 
            For collections, this takes the form of;
            /dbs/db_rid/colls/ where db_rid represents the value of the database's resource id.
            A resource id is not the id given to a database on creation, but an internally generated immutable id.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Database.UsersLink">
            <summary>
            Gets the self-link for users in the database.
            </summary>
            <value>
            The self-link for users in the database.
            </value>
            <remarks>
            Every DocumentDB resource has a static, immutable, addressable URI. 
            For users, this takes the form of;
            /dbs/db_rid/users/ where db_rid represents the value of the database's resource id.
            A resource id is not the id given to a database on creation, but an internally generated immutable id.
            </remarks>
        </member>
        <member name="T:Microsoft.Azure.Documents.Document">
            <summary>
            Represents a document.
            </summary>
            <remarks> 
            A document is a structured JSON document. There is no set schema for the JSON documents, and a document may contain any 
            number of custom properties as well as an optional list of attachments. Document is an application resource and can be
            authorized using the master key or resource keys.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Document.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Document"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Document.AttachmentsLink">
            <summary>
            Gets the self-link corresponding to attachments of the document.
            </summary>
            <value>
            The self-link corresponding to attachments of the document.
            </value>
            <remarks>
            Every document can have between zero and many attachments. The attachments link contains a feed of attachments that belong to 
            the document.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Document.TimeToLive">
            <summary>
            Gets or sets the time to live in seconds of the document.
            </summary>
            <value>
            It is an optional property. 
            A valid value must be either a nonzero positive integer, '-1', or <c>null</c>.
            By default, TimeToLive is set to null meaning the document inherits the collection's <see cref="P:Microsoft.Azure.Documents.DocumentCollection.DefaultTimeToLive"/>.
            The unit of measurement is seconds. The maximum allowed value is 2147483647.
            When the value is '-1', it means never expire regardless of the collection's <see cref="P:Microsoft.Azure.Documents.DocumentCollection.DefaultTimeToLive"/> value.
            </value>
            <remarks>
            <para>
            The final time-to-live policy of a document is evaluated after consulting the collection's
            <see cref="P:Microsoft.Azure.Documents.DocumentCollection.DefaultTimeToLive"/>.
            </para>
            <para>
            When the <see cref="P:Microsoft.Azure.Documents.Document.TimeToLive"/> is <c>null</c>, the document inherits the collection's
            <see cref="P:Microsoft.Azure.Documents.DocumentCollection.DefaultTimeToLive"/>.
            If the collection's <see cref="P:Microsoft.Azure.Documents.DocumentCollection.DefaultTimeToLive"/> is a nonzero positive integer,
            then the document will inherit that value as its time-to-live in seconds, and will be expired
            after the default time-to-live in seconds since its last write time. The expired documents will be deleted in background.
            Otherwise, the document will never expire.
            </para>
            <para>
            When the <see cref="P:Microsoft.Azure.Documents.Document.TimeToLive"/> is '-1', the document will never expire regardless of the collection's
            <see cref="P:Microsoft.Azure.Documents.DocumentCollection.DefaultTimeToLive"/> value.
            </para>
            <para>
            When the <see cref="P:Microsoft.Azure.Documents.Document.TimeToLive"/> is a nonzero positive integer, need to check the collection's
            <see cref="P:Microsoft.Azure.Documents.DocumentCollection.DefaultTimeToLive"/>.
            If the collection's <see cref="P:Microsoft.Azure.Documents.DocumentCollection.DefaultTimeToLive"/> is <c>null</c>, which means the time-to-live
            has been turned off on the collection, and the document's <see cref="P:Microsoft.Azure.Documents.Document.TimeToLive"/> should be disregarded and the document
            will never expire.
            Otherwise, the document's <see cref="P:Microsoft.Azure.Documents.Document.TimeToLive"/> will be honored. The document will be expired
            after the default time-to-live in seconds since its last write time. The expired documents will be deleted in background.
            </para>
            <para>
            The table below shows an example of the matrix to evaluate the final time-to-live policy given a collection's
            <see cref="P:Microsoft.Azure.Documents.DocumentCollection.DefaultTimeToLive"/> and a document's <see cref="P:Microsoft.Azure.Documents.Document.TimeToLive"/>.
            </para>
            <list type="table">
            <listheader>
            <term>Collection</term>
            <description>Matrix</description>
            </listheader>
            <item>
            <term>DefaultTimeToLive = null</term>
            <description>
            <list type="table">
            <listheader>
            <term>Document</term>
            <description>Result</description>
            </listheader>
            <item>
            <term>TimeToLive = null</term>
            <description>TTL is disabled. The document will never expire (default).</description>
            </item>
            <item>
            <term>TimeToLive = -1</term>
            <description>TTL is disabled. The document will never expire.</description>
            </item>
            <item>
            <term>TimeToLive = 2000</term>
            <description>TTL is disabled. The document will never expire.</description>
            </item>
            </list>
            </description>
            </item>
            <item>
            <term>DefaultTimeToLive = -1</term>
            <description>
            <list type="table">
            <listheader>
            <term>Document</term>
            <description>Result</description>
            </listheader>
            <item>
            <term>TimeToLive = null</term>
            <description>TTL is enabled. The document will never expire (default).</description>
            </item>
            <item>
            <term>TimeToLive = -1</term>
            <description>TTL is enabled. The document will never expire.</description>
            </item>
            <item>
            <term>TimeToLive = 2000</term>
            <description>TTL is enabled. The document will expire after 2000 seconds.</description>
            </item>
            </list>
            </description>
            </item>
            <item>
            <term>DefaultTimeToLive = 1000</term>
            <description>
            <list type="table">
            <listheader>
            <term>Document</term>
            <description>Result</description>
            </listheader>
            <item>
            <term>TimeToLive = null</term>
            <description>TTL is enabled. The document will expire after 1000 seconds (default).</description>
            </item>
            <item>
            <term>TimeToLive = -1</term>
            <description>TTL is enabled. The document will never expire.</description>
            </item>
            <item>
            <term>TimeToLive = 2000</term>
            <description>TTL is enabled. The document will expire after 2000 seconds.</description>
            </item>
            </list>
            </description>
            </item>
            </list>
            </remarks>
            <example>
            The example below removes 'ttl' from document content.
            The document will inherit the collection's <see cref="P:Microsoft.Azure.Documents.DocumentCollection.DefaultTimeToLive"/> as its time-to-live value.
            <code language="c#">
            <![CDATA[
                document.TimeToLive = null;
            ]]>
            </code>
            </example>
            <example>
            The example below ensures that the document should never expire regardless.
            <code language="c#">
            <![CDATA[
                document.TimeToLive = -1;
            ]]>
            </code>
            </example>
            <example>
            The example below sets the time-to-live in seconds on a document.
            The document will expire after 1000 seconds since its last write time when the collection's <see cref="P:Microsoft.Azure.Documents.DocumentCollection.DefaultTimeToLive"/>
            is not <c>null</c>.
            <code language="c#">
            <![CDATA[
                document.TimeToLive = 1000;
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.DocumentCollection"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.DocumentServiceRequest.#ctor(Microsoft.Azure.Documents.OperationType,System.String,Microsoft.Azure.Documents.ResourceType,System.IO.Stream,System.Collections.Specialized.NameValueCollection,System.Boolean,Microsoft.Azure.Documents.AuthorizationTokenType)">
            <summary>
            This is constructed from the existing request, either RId based or name based.
            resourceIdOrFullName can be either: (trimmed, RemoveTrailingSlashes, RemoveLeadingSlashes, urldecoded)
            1. wo1ZAP7zFQA=
            2. dbs/dbName/colls/collectionName/docs/documentName
            </summary>
            <param name="operationType"></param>
            <param name="resourceIdOrFullName"></param>
            <param name="resourceType"></param>
            <param name="body"></param>
            <param name="headers"></param>
            <param name="isNameBased">resourceIdOrFullName is resourceId or fullName</param>
            <param name="readAuthorizationTokenType"></param>
        </member>
        <member name="M:Microsoft.Azure.Documents.DocumentServiceRequest.#ctor(Microsoft.Azure.Documents.OperationType,Microsoft.Azure.Documents.ResourceType,System.String,System.IO.Stream,System.Collections.Specialized.NameValueCollection,Microsoft.Azure.Documents.AuthorizationTokenType)">
            <summary>
             The path is the incoming Uri.PathAndQuery, it can be:  (the name is url encoded).
             1. 	dbs/dbName/colls/collectionName/docs/documentName/attachments/  
             2.     dbs/wo1ZAA==/colls/wo1ZAP7zFQA=/
            </summary>
            <param name="operationType"></param>
            <param name="resourceType"></param>
            <param name="path"></param>
            <param name="body"></param>
            <param name="headers"></param>
            <param name="readAuthorizationTokenType"></param>
        </member>
        <member name="M:Microsoft.Azure.Documents.DocumentServiceRequest.IsValidAddress(Microsoft.Azure.Documents.ResourceType)">
            <summary>
            Verify the address is same as claimed resourceType
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.DocumentServiceRequest.ServiceIdentity">
            <summary>
            ServiceIdentity of the target service where this request should reach
            Only valid for gateway
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.DocumentServiceRequest.ResourceAddress">
            <summary>
            Normalized resourcePath, for both Name based and Rid based.
            This is the string passed for AuthZ. 
            It is resourceId in Rid case passed for AuthZ
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.DocumentServiceRequest.ReadRequestAuthorizationTokenType">
            <summary>
            Authorization token used for the read request.
            This will be used to generate any child requests that are needed to process the read.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.DocumentServiceRequestContext.TargetIdentity">
            <summary>
            Unique Identity that represents the target partition where the request should reach.
            In gateway it is same as ServiceIdentity. 
            In client it is a string that represents the partition and service index
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.DocumentServiceRequestContext.PerformLocalRefreshOnGoneException">
            <summary>
            If the StoreReader should perform the local refresh for GoneException instead of 
            throwing is back to retry policy. This is done to avoid losing the state (response + LSN)
            while executing quorum read logic
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.DocumentServiceRequestContext.EffectivePartitionKey">
            <summary>
            Effective partition key value to be used for routing.
            For server resources either this, or PartitionKeyRangeId header must be specified.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.DocumentServiceRequestContext.PartitionKeyRangeId">
            <summary>
            Is used to figure out which part of global session token is relevant
            for the partition to which request is sent.
            It is set automatically by address cache.
            Is set as part of address resolution.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.DocumentServiceRequestContext.SessionLsn">
            <summary>
            LSN which was used in session token.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.DocumentServiceRequestContext.PreformedBackgroundAddressRefresh">
            <summary>
            If the background refresh has been performed for this request to eliminate the 
            extra replica that is not participating in quorum but causes Gone
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.Error">
            <summary> 
            Encapsulates error related details.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Error.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Error"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Error.Code">
            <summary>
            Gets or sets the textual description of error code.
            </summary>
            <value>The textual description of error code.</value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Error.Message">
            <summary>
            Gets or sets the error message.
            </summary>
            <value>The error message.</value>
        </member>
        <member name="T:Microsoft.Azure.Documents.GoneAndRetryWithRetryPolicy">
            <summary>
            Policy to perform backoff retry on GoneException, InvalidPartitionException and RetryWithException
            TArg1: Perform force refresh.
            TArg2: TimeSpan for completing the work in the callback
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.IRetryPolicy`1.ShouldRetry(System.Exception,System.TimeSpan@,System.Exception@,`0@)">
            <summary>
            Method that is called to determine from the policy that needs to retry on the exception
            </summary>
            <param name="exception">Exception during the callback method invocation</param>
            <param name="backoffTime">How long to wait before next retry. 0 indicates retry immediately.</param>
            <param name="exceptionToThrow">Exception to throw if this out arg is not null 
            instead of the actual exception that was hit during call</param>
            <param name="policyArg1">Argument to be passed to the callback method</param>
            <returns>If the retry needs to be attempted or not</returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.IRetryPolicy`1.InitialArgumentValue">
            <summary>
            Initial value of the template argument
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.GoneAndRetryWithRetryPolicy.ShouldRetry(System.Exception,System.TimeSpan@,System.Exception@,System.Boolean@)">
            <summary>
            ShouldRetry method
            </summary>
            <param name="exception">Exception thrown by callback</param>
            <param name="backoffTime">0 => retry immediately.</param>
            <param name="exceptionToThrow">RetryPolicy should throw this exception.</param>
            <param name="forceRefreshAddress">
            Policy specific indication of backoff/retry, If the address cache needs to refreshed
            </param>
            <returns>Is the retry helper should retry</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.GoneAndRetryWithRetryPolicy.ShouldRetry(System.Exception,System.TimeSpan@,System.Exception@,System.Tuple{System.Boolean,System.Boolean,System.TimeSpan}@)">
            <summary>
            ShouldRetry method
            </summary>
            <param name="exception">Exception thrown by callback</param>
            <param name="backoffTime">0 => retry immediately.</param>
            <param name="exceptionToThrow">RetryPolicy should throw this exception.</param>
            <param name="forceRefreshAndTimeout">
            bool: If the address cache needs to refreshed
            bool: If it is a retry attempt.
            TimeSpan: Timeout after beyond which the task should not execute
            </param>
            <returns>Is the retry helper should retry</returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.GoneException.Message">
             <summary>
            
             Summary:
                 Gets a message that describes the current exception.
            
             </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.IMediaHandler.HeadMediaAsync(System.String,System.Collections.Specialized.NameValueCollection)">
            <returns>
            ResponseHeaders,
            Media Attributes
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IMediaHandler.DownloadMediaAsync(System.String,System.Collections.Specialized.NameValueCollection,System.TimeSpan)">
            <returns>
            Stream,
            ResponseHeaders,
            Media Attributes
            </returns>
        </member>
        <member name="T:Microsoft.Azure.Documents.IndexingDirective">
            <summary> 
            Specifies whether or not the resource is to be indexed.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.IndexingDirective.Default">
            <summary>
            Use any pre-defined/pre-configured defaults.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.IndexingDirective.Include">
            <summary>
            Index the resource.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.IndexingDirective.Exclude">
            <summary>
             Do not index the resource.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.DatabaseAccountLocation">
            <summary>
            Location.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.DatabaseAccountLocation.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.DatabaseAccountLocation.Name">
            <summary>
            Refers to one of the value of LocationNames
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.DatabaseAccountLocation.DatabaseAccountEndpoint">
            <summary>
            DNS Endpoint for the location.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.MigrateCollectionDirective">
            <summary> 
            Specifies whether or not the resource is to be indexed.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.MigrateCollectionDirective.Thaw">
            <summary>
             Move to SSD
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.MigrateCollectionDirective.Freeze">
            <summary>
            Move to HDD.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.IServiceConfigurationReader">
            <summary>
            Interface for resolving the service settings.
            Implementations:
            NamingServiceConfigurationReader : Multi tenant Cloud implementation.
            GatewayServiceConfigurationReader: Client inmplementation.    
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.Routing.PartitionKeyRangeGoneException">
            <summary>
            This exception is thrown when DocumentServiceRequest contains x-ms-documentdb-partitionkeyrangeid
            header and such range id doesn't exist.
            No retries should be made in this case, as either split or merge might have happened and query/readfeed
            must take appropriate actions.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.LocationNames">
            <summary>
            Change to public when we release GeoSDK.
            The list of supported locations from DocumentDB.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.IndexingMode">
            <summary> 
            Specifies the supported indexing modes.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.IndexingMode.Consistent">
            <summary>
            Index is updated synchronously with a create, update or delete operation.
            </summary>
            <remarks>
            With consistent indexing, query consistency is the same as the default consistency level for the database account. 
            The index is always kept up to date with the data.
            
            The default IndexingMode is Consistent.
            </remarks>
        </member>
        <member name="F:Microsoft.Azure.Documents.IndexingMode.Lazy">
            <summary>
            Index is updated asynchronously with respect to a create, update or delete operation.
            </summary>
            <remarks>
            With lazy indexing, queries are eventually consistent. 
            The index is updated when the collection is operating below full throughput capacity (Request units per second). 
            
            Write operations will consume fewer request units (RequestCharge) at the time of write.
            </remarks>
        </member>
        <member name="F:Microsoft.Azure.Documents.IndexingMode.None">
            <summary>
            No index is provided.
            </summary>
            <remarks>
            Setting IndexingMode to "None" drops the index. Use this if you don't want to maintain the index for a document collection, to save the storage cost or improve the write throughput. Your queries will degenerate to scans of the entire collection.
            </remarks>
        </member>
        <member name="T:Microsoft.Azure.Documents.IndexingPath">
            <summary> 
            Specifies the indexing policy for a JSON path within documents in a DocumentDB collection.
            </summary>
            <remarks>
            Within documents, you can choose which paths must be included or excluded from indexing. This can offer improved write 
            performance and lower index storage for scenarios when the query patterns are known beforehand. Index paths start with 
            the root (/) and typically end with the ? wildcard operator, denoting that there are multiple possible values for the 
            prefix. 
            For e.g., to serve SELECT * FROM Families F WHERE F.familyName = "Andersen", you must include an index path 
            for /"familyName"/?in the collection’s index policy.
            
            Index paths can also use the * wildcard operator to specify the behavior for paths recursively under the prefix. 
            For e.g., /"payload"/* can be used to exclude everything under the payload property from indexing.
            
            For additional details, refer to http://azure.microsoft.com/documentation/articles/documentdb-indexing-policies/#ConfigPolicy
            </remarks>
            <example>
            The following example indexes a collection for queries like "SELECT * FROM docs d WHERE d.CreatedTimestamp &gt; 5555".
            <code language="c#">
            <![CDATA[
            var collection = new DocumentCollection { Id = "myCollection" };
            collection.IndexingPolicy.IncludedPaths.Add(
                new IndexingPath 
                {
                    IndexType = IndexType.Range,
                    Path = "/\"CreatedTimestamp\"/?",
                    NumericPrecision = 7
                });
            collection.IndexingPolicy.IncludedPaths.Add(
                new IndexingPath 
                {
                    Path = "/"
                });
                
            //create collection.
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.IndexingPolicy"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.IndexingPath.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.IndexingPath"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.IndexingPath.Clone">
            <summary>
            Creates a copy of the indexing path.
            </summary>
            <returns>A clone of the indexing path.</returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.IndexingPath.Path">
            <summary>
            Gets or sets the path to be indexed.
            </summary>
            <value>
            The path to be indexed.
            </value>
            <remarks>
            Refer to http://azure.microsoft.com/documentation/articles/documentdb-indexing-policies/#ConfigPolicy for how to specify paths.
            Some valid examples: /"prop"/?, /"prop"/**, /"prop"/"subprop"/?, /"prop"/[]/?
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.IndexingPath.IndexType">
            <summary>
            Gets or sets the type of indexing to be applied.
            </summary>
            <value>
            One of the values of the <see cref="T:Microsoft.Azure.Documents.IndexType"/> enumeration.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.IndexingPath.NumericPrecision">
            <summary>
            Gets or sets the precision for this particular index path for numeric data.
            </summary>
            <value>
            The precision for this particular index path for numeric data.
            </value>
            <remarks>Refer to http://azure.microsoft.com/documentation/articles/documentdb-indexing-policies/#ConfigPolicy for valid ranges of values.</remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.IndexingPath.StringPrecision">
            <summary>
            Gets or sets the precision for this particular index path for string data.
            </summary>
            <value>
            The precision for this particular index path for string data.
            </value>
            <remarks>Refer to http://azure.microsoft.com/documentation/articles/documentdb-indexing-policies/#ConfigPolicy for valid ranges of values.</remarks>
        </member>
        <member name="T:Microsoft.Azure.Documents.IndexType">
            <summary>
            These are the indexing types available for indexing a path.
            </summary> 
            <remarks>
            For additional details, refer to http://azure.microsoft.com/documentation/articles/documentdb-indexing-policies/#ConfigPolicy.
            </remarks>
        </member>
        <member name="F:Microsoft.Azure.Documents.IndexType.Hash">
            <summary>
            The index entries are hashed to serve point look up queries.
            </summary>
            <remarks>
            Can be used to serve queries like: SELECT * FROM docs d WHERE d.prop = 5
            </remarks>
        </member>
        <member name="F:Microsoft.Azure.Documents.IndexType.Range">
            <summary>
            The index entries are ordered. Range indexes are optimized for inequality predicate queries with efficient range scans.
            </summary>
            <remarks>
            Can be used to serve queries like: SELECT * FROM docs d WHERE d.prop > 5
            </remarks>
        </member>
        <member name="T:Microsoft.Azure.Documents.IndexingPolicy">
            <summary>
            Represents the indexing policy configuration for a collection.
            </summary> 
            <remarks>
            Indexing policies can used to configure which properties (JSON paths) are included/excluded, whether the index is updated consistently
            or offline (lazy), automatic vs. opt-in per-document, as well as the precision and type of index per path.
            <para>
            Refer to <see>http://azure.microsoft.com/documentation/articles/documentdb-indexing-policies/</see> for additional information on how to specify
            indexing policies.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.DocumentCollection"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.IndexingPolicy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.IndexingPolicy"/> class.
            </summary>
            <remarks>
            Indexing mode is set to consistent.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.IndexingPolicy.#ctor(Microsoft.Azure.Documents.Index[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.IndexingPolicy"/> class with the specified set of indexes as 
            default index specifications for the root path.
            </summary>
            <param name="defaultIndexOverrides">Comma seperated set of indexes that serve as default index specifications for the root path.</param>
            <seealso cref="T:Microsoft.Azure.Documents.Index"/>
            <example>
            The following example shows how to override the default indexingPolicy for root path:
            <code language="c#">
            <![CDATA[
            HashIndex hashIndexOverride = Index.Hash(DataType.String, 5);
            RangeIndex rangeIndexOverride = Index.Range(DataType.Number, 2);
            SpatialIndex spatialIndexOverride = Index.Spatial(DataType.Point);
            
            IndexingPolicy indexingPolicy = new IndexingPolicy(hashIndexOverride, rangeIndexOverride, spatialIndexOverride);
            ]]>
            </code>
            </example>
            <example>
            If you would like to just override the indexingPolicy for Numbers you can specify just that:
            <code language="c#">
            <![CDATA[
            RangeIndex rangeIndexOverride = Index.Range(DataType.Number, 2);
            
            IndexingPolicy indexingPolicy = new IndexingPolicy(rangeIndexOverride);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Documents.IndexingPolicy.Clone">
            <summary>
            Performs a deep copy of the indexing policy.
            </summary>
            <returns>
            A clone of the indexing policy.
            </returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.IndexingPolicy.Automatic">
            <summary>
            Gets or sets a value that indicates whether automatic indexing is enabled for a collection.
            </summary>
            <remarks>
            In automatic indexing, documents can be explicitly excluded from indexing using <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>.  
            In manual indexing, documents can be explicitly included.
            </remarks>
            <value>
            True, if automatic indexing is enabled; otherwise, false.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.IndexingPolicy.IndexingMode">
            <summary>
            Gets or sets the indexing mode (consistent or lazy).
            </summary>
            <value>
            One of the values of the <see cref="T:Microsoft.Azure.Documents.IndexingMode"/> enumeration.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.IndexingPolicy.IncludedPaths">
            <summary>
            Gets or sets the collection containing <see cref="T:Microsoft.Azure.Documents.IncludedPath"/> objects.
            </summary>
            <value>
            The collection containing <see cref="T:Microsoft.Azure.Documents.IncludedPath"/> objects.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.IndexingPolicy.ExcludedPaths">
            <summary>
            Gets or sets the collection containing <see cref="T:Microsoft.Azure.Documents.ExcludedPath"/> objects.
            </summary>
            <value>
            The collection containing <see cref="T:Microsoft.Azure.Documents.ExcludedPath"/> objects.
            </value>
        </member>
        <member name="T:Microsoft.Azure.Documents.IndexingPolicyOld">
            <summary>
            Represents the indexing policy configuration for a collection.
            </summary> 
            <remarks>
            Indexing policies can used to configure which properties (JSON paths) are included/excluded, whether the index is updated consistently
            or offline (lazy), automatic vs. opt-in per-document, as well as the precision and type of index per path.
            
            Refer to http://azure.microsoft.com/documentation/articles/documentdb-indexing-policies/ for additional information on how to specify
            indexing policies.
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.DocumentCollection"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.IndexingPolicyOld.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.IndexingPolicyOld"/> class.
            </summary>
            <remarks>
            Indexing mode is set to consistent.
            </remarks>
        </member>
        <member name="F:Microsoft.Azure.Documents.IndexingPolicyOld.included">
            <summary>
            Gets or sets the path level configurations for indexing.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.IndexingPolicyOld.Clone">
            <summary>
            Performs a deep copy of the indexing policy.
            </summary>
            <returns>
            A clone of the indexing policy.
            </returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.IndexingPolicyOld.Automatic">
            <summary>
            Gets or sets a value that indicates whether automatic indexing is enabled for a collection.
            </summary>
            <remarks>
            In automatic indexing, documents can be explicitly excluded from indexing using <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>.  
            In manual indexing, documents can be explicitly included.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.IndexingPolicyOld.IndexingMode">
            <summary>
            Gets or sets the indexing mode (consistent or lazy).
            </summary>
            <value>
            One of the values of the <see cref="T:Microsoft.Azure.Documents.IndexingMode"/> enumeration.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.IndexingPolicyOld.IncludedPaths">
            <summary>
            Gets or sets the list containing included paths.
            </summary>
            <value>
            The list containing included paths.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.IndexingPolicyOld.ExcludedPaths">
            <summary>
            Gets or sets the list containing excluded paths.
            </summary>
            <value>
            The list containing excluded paths.
            </value>
        </member>
        <member name="T:Microsoft.Azure.Documents.ExcludedPath">
            <summary> 
            Specifies a path within a JSON document to be excluded while indexing.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.ExcludedPath.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.ExcludedPath"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.ExcludedPath.Clone">
            <summary>
            Creates a copy of the excluded path 
            </summary>
            <returns>A clone of the excluded path.</returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.ExcludedPath.Path">
            <summary>
            Gets or sets the path to be excluded from indexing.
            </summary>
            <value>
            The path to be excluded from indexing.
            </value>
        </member>
        <member name="T:Microsoft.Azure.Documents.IncludedPath">
            <summary> 
            Specifies a path within a JSON document to be included while indexing.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.IncludedPath.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.IncludedPath"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.IncludedPath.Clone">
            <summary>
            Creates a copy of the included path.
            </summary>
            <returns>A clone of the included path.</returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.IncludedPath.Path">
            <summary>
            Gets or sets the path to be indexed.
            </summary>
            <value>
            The path to be indexed.
            </value>
            <remarks>
            Refer to http://azure.microsoft.com/documentation/articles/documentdb-indexing-policies/#ConfigPolicy for how to specify paths.
            Some valid examples: /"prop"/?, /"prop"/**, /"prop"/"subprop"/?, /"prop"/[]/?
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.IncludedPath.Indexes">
            <summary>
            Gets or sets the collection of <see cref="T:Microsoft.Azure.Documents.Index"/> objects to be applied for this included path.
            </summary>
            <value>
            The collection of the <see cref="T:Microsoft.Azure.Documents.Index"/> objects to be applied for this included path.
            </value>
        </member>
        <member name="T:Microsoft.Azure.Documents.IndexKind">
            <summary>
            These are the indexing types available for indexing a path.
            </summary> 
            <remarks>
            For additional details, refer to http://azure.microsoft.com/documentation/articles/documentdb-indexing-policies/#ConfigPolicy.
            </remarks>
        </member>
        <member name="F:Microsoft.Azure.Documents.IndexKind.Hash">
            <summary>
            The index entries are hashed to serve point look up queries.
            </summary>
            <remarks>
            Can be used to serve queries like: SELECT * FROM docs d WHERE d.prop = 5
            </remarks>
        </member>
        <member name="F:Microsoft.Azure.Documents.IndexKind.Range">
            <summary>
            The index entries are ordered. Range indexes are optimized for inequality predicate queries with efficient range scans.
            </summary>
            <remarks>
            Can be used to serve queries like: SELECT * FROM docs d WHERE d.prop > 5
            </remarks>
        </member>
        <member name="F:Microsoft.Azure.Documents.IndexKind.Spatial">
            <summary>
            The index entries are indexed to serve spatial queries.
            </summary>
            <remarks>
            Can be used to serve queries like: SELECT * FROM Root r WHERE ST_DISTANCE({"type":"Point","coordinates":[71.0589,42.3601]}, r.location) $LE 10000
            </remarks>
        </member>
        <member name="T:Microsoft.Azure.Documents.Index">
            <summary>
            Base class for IndexingPolicy Indexes, you should use a concrete Index like HashIndex or RangeIndex.
            </summary> 
        </member>
        <member name="M:Microsoft.Azure.Documents.Index.#ctor(Microsoft.Azure.Documents.IndexKind)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Index"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Index.Range(Microsoft.Azure.Documents.DataType)">
            <summary>
            Returns an instance of <see cref="T:Microsoft.Azure.Documents.RangeIndex"/> class with specified DataType.
            </summary>
            <param name="dataType">Specifies the target data type for the index path specification.</param>
            <returns>An instance of <see cref="T:Microsoft.Azure.Documents.RangeIndex"/> type.</returns>
            <seealso cref="T:Microsoft.Azure.Documents.DataType"/>
            <example>
            Here is an example to create RangeIndex instance passing in the DataType:
            <code language="c#">
            <![CDATA[
            RangeIndex rangeIndex = Index.Range(DataType.Number);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Documents.Index.Range(Microsoft.Azure.Documents.DataType,System.Int16)">
            <summary>
            Returns an instance of <see cref="T:Microsoft.Azure.Documents.RangeIndex"/> class with specified DataType and precision.
            </summary>
            <param name="dataType">Specifies the target data type for the index path specification.</param>
            <param name="precision">Specifies the precision to be used for the data type associated with this index.</param>
            <returns>An instance of <see cref="T:Microsoft.Azure.Documents.RangeIndex"/> type.</returns>
            <seealso cref="T:Microsoft.Azure.Documents.DataType"/>
            <example>
            Here is an example to create RangeIndex instance passing in the DataType and precision:
            <code language="c#">
            <![CDATA[
            RangeIndex rangeIndex = Index.Range(DataType.Number, -1);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Documents.Index.Hash(Microsoft.Azure.Documents.DataType)">
            <summary>
            Returns an instance of <see cref="T:Microsoft.Azure.Documents.HashIndex"/> class with specified DataType.
            </summary>
            <param name="dataType">Specifies the target data type for the index path specification.</param>
            <returns>An instance of <see cref="T:Microsoft.Azure.Documents.HashIndex"/> type.</returns>
            <seealso cref="T:Microsoft.Azure.Documents.DataType"/>
            <example>
            Here is an example to create HashIndex instance passing in the DataType:
            <code language="c#">
            <![CDATA[
            HashIndex hashIndex = Index.Hash(DataType.String);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Documents.Index.Hash(Microsoft.Azure.Documents.DataType,System.Int16)">
            <summary>
            Returns an instance of <see cref="T:Microsoft.Azure.Documents.HashIndex"/> class with specified DataType and precision.
            </summary>
            <param name="dataType">Specifies the target data type for the index path specification.</param>
            <param name="precision">Specifies the precision to be used for the data type associated with this index.</param>
            <returns>An instance of <see cref="T:Microsoft.Azure.Documents.HashIndex"/> type.</returns>
            <seealso cref="T:Microsoft.Azure.Documents.DataType"/>
            <example>
            Here is an example to create HashIndex instance passing in the DataType and precision:
            <code language="c#">
            <![CDATA[
            HashIndex hashIndex = Index.Hash(DataType.String, 3);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Documents.Index.Spatial(Microsoft.Azure.Documents.DataType)">
            <summary>
            Returns an instance of <see cref="T:Microsoft.Azure.Documents.SpatialIndex"/> class with specified DataType.
            </summary>
            <param name="dataType">Specifies the target data type for the index path specification.</param>
            <returns>An instance of <see cref="T:Microsoft.Azure.Documents.SpatialIndex"/> type.</returns>
            <seealso cref="T:Microsoft.Azure.Documents.DataType"/>
            <example>
            Here is an example to create SpatialIndex instance passing in the DataType:
            <code language="c#">
            <![CDATA[
            SpatialIndex spatialIndex = Index.Spatial(DataType.Point);
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Azure.Documents.Index.Kind">
            <summary>
            Gets or sets the kind of indexing to be applied.
            </summary>
            <value>
            One of the values of the <see cref="T:Microsoft.Azure.Documents.IndexKind"/> enumeration.
            </value>
        </member>
        <member name="T:Microsoft.Azure.Documents.HashIndex">
            <summary>
            Specifies an instance of <see cref="T:Microsoft.Azure.Documents.HashIndex"/> class.
            </summary>
            <remarks>
            Can be used to serve queries like: SELECT * FROM docs d WHERE d.prop = 5.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.HashIndex.#ctor(Microsoft.Azure.Documents.DataType)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.HashIndex"/> class with specified DataType.
            </summary>
            <param name="dataType">Specifies the target data type for the index path specification.</param>
            <seealso cref="P:Microsoft.Azure.Documents.HashIndex.DataType"/>
            <example>
            Here is an example to instantiate HashIndex class passing in the DataType:
            <code language="c#">
            <![CDATA[
            HashIndex hashIndex = new HashIndex(DataType.String);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Documents.HashIndex.#ctor(Microsoft.Azure.Documents.DataType,System.Int16)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.HashIndex"/> class with specified DataType and precision.
            </summary>
            <param name="dataType">Specifies the target data type for the index path specification.</param>
            <param name="precision">Specifies the precision to be used for the data type associated with this index.</param>
            <seealso cref="P:Microsoft.Azure.Documents.HashIndex.DataType"/>
            <example>
            Here is an example to instantiate HashIndex class passing in the DataType and precision:
            <code language="c#">
            <![CDATA[
            HashIndex hashIndex = new HashIndex(DataType.String, 3);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Documents.HashIndex.Clone">
            <summary>
            Creates a copy of the hash index.
            </summary>
            <returns>A clone of the hash index.</returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.HashIndex.DataType">
            <summary>
            Gets or sets the data type for which this index should be applied.
            </summary>
            <value>
            The data type for which this index should be applied.
            </value>
            <remarks>Refer to http://azure.microsoft.com/documentation/articles/documentdb-indexing-policies/#ConfigPolicy for valid ranges of values.</remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.HashIndex.Precision">
            <summary>
            Gets or sets the precision for this particular index.
            </summary>
            <value>
            The precision for this particular index. Returns null, if not set.
            </value>
            <remarks>Refer to http://azure.microsoft.com/documentation/articles/documentdb-indexing-policies/#ConfigPolicy for valid ranges of values.</remarks>
        </member>
        <member name="T:Microsoft.Azure.Documents.SpatialIndex">
            <summary>
            Specifies an instance of <see cref="T:Microsoft.Azure.Documents.SpatialIndex"/> class.
            </summary>
            <remarks>
            Can be used to serve spatial queries
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.SpatialIndex.#ctor(Microsoft.Azure.Documents.DataType)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.SpatialIndex"/> class.
            </summary>
            <param name="dataType">Specifies the target data type for the index path specification</param>
            <seealso cref="P:Microsoft.Azure.Documents.SpatialIndex.DataType"/>
            <example>
            Here is an example to instantiate SpatialIndex class passing in the DataType
            <code language="c#">
            <![CDATA[
            SpatialIndex spatialIndex = new SpatialIndex(DataType.Point);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Documents.SpatialIndex.Clone">
            <summary>
            Creates a copy of the spatial index.
            </summary>
            <returns>A clone of the spatial index.</returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.SpatialIndex.DataType">
            <summary>
            Gets or sets the data type for which this index should be applied.
            </summary>
            <value>
            The data type for which this index should be applied.
            </value>
            <remarks>Refer to http://azure.microsoft.com/documentation/articles/documentdb-indexing-policies/#ConfigPolicy for valid ranges of values.</remarks>
        </member>
        <member name="T:Microsoft.Azure.Documents.RangeIndex">
            <summary>
            Specifies an instance of <see cref="T:Microsoft.Azure.Documents.RangeIndex"/> class.
            </summary>
            <remarks>
            Can be used to serve queries like: SELECT * FROM docs d WHERE d.prop &gt; 5.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.RangeIndex.#ctor(Microsoft.Azure.Documents.DataType)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.RangeIndex"/> class with specified DataType.
            </summary>
            <param name="dataType">Specifies the target data type for the index path specification.</param>
            <seealso cref="P:Microsoft.Azure.Documents.RangeIndex.DataType"/>
            <example>
            Here is an example to instantiate RangeIndex class passing in the DataType:
            <code language="c#">
            <![CDATA[
            RangeIndex rangeIndex = new RangeIndex(DataType.Number);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Documents.RangeIndex.#ctor(Microsoft.Azure.Documents.DataType,System.Int16)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.RangeIndex"/> class with specified DataType and precision.
            </summary>
            <param name="dataType">Specifies the target data type for the index path specification.</param>
            <param name="precision">Specifies the precision to be used for the data type associated with this index.</param>
            <seealso cref="P:Microsoft.Azure.Documents.RangeIndex.DataType"/>
            <example>
            Here is an example to instantiate RangeIndex class passing in the DataType and precision:
            <code language="c#">
            <![CDATA[
            RangeIndex rangeIndex = new RangeIndex(DataType.Number, -1);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Documents.RangeIndex.Clone">
            <summary>
            Creates a copy of the range index.
            </summary>
            <returns>A clone of the range index.</returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.RangeIndex.DataType">
            <summary>
            Gets or sets the data type for which this index should be applied.
            </summary>
            <value>
            The data type for which this index should be applied.
            </value>
            <remarks>Refer to http://azure.microsoft.com/documentation/articles/documentdb-indexing-policies/#ConfigPolicy for valid ranges of values.</remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.RangeIndex.Precision">
            <summary>
            Gets or sets the precision for this particular index.
            </summary>
            <value>
            The precision for this particular index. Returns null, if not set.
            </value>
            <remarks>Refer to http://azure.microsoft.com/documentation/articles/documentdb-indexing-policies/#ConfigPolicy for valid ranges of values.</remarks>
        </member>
        <member name="T:Microsoft.Azure.Documents.DataType">
            <summary>
            Defines the target data type of an index path specification.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.DataType.Number">
            <summary>
            Represents a numeric data type.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.DataType.Point">
            <summary>
            Represent a point data type.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.DataType.String">
            <summary>
            Represents a string data type.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.TimeoutHelper">
            <summary>
            Tracks remaining timespan.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.IRetryPolicy.ShouldRetry(System.Exception,System.TimeSpan@,System.Exception@)">
            <summary>
            Method that is called to determine from the policy that needs to retry on the exception
            </summary>
            <param name="exception">Exception during the callback method invocation</param>
            <param name="backoffTime">How long to wait before next retry. 0 indicates retry immediately.</param>
            <param name="exceptionToThrow">Exception to throw if this out arg is not null 
            instead of the actual exception that was hit during call</param>
            <returns>If the retry needs to be attempted or not</returns>
        </member>
        <member name="T:Microsoft.Azure.Documents.ReplicationPolicy">
            <summary>
            Replication policy.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.ReplicationPolicy.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ReplicationPolicy.MaxReplicaSetSize">
            <summary>
            Maximum number of replicas for the partition.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ReplicationPolicy.MinReplicaSetSize">
            <summary>
            Minimum number of replicas to ensure availability
            of the partition.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ReplicationPolicy.AsyncReplication">
            <summary>
            Whether or not async replication is enabled.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.MediaIdHelper">
            <summary>
            Helper class to generate and parse media id (only used in frontend)
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.OperationKind">
            <summary>
            These are the operation types resulted in a version conflict on a resource. 
            </summary>
            <remarks>
            When a version conflict occurs during an async operation, retrieving the <see cref="T:Microsoft.Azure.Documents.Conflict"/> instance will allow you 
            to determine which resource and operation caause the conflict.
            </remarks>
        </member>
        <member name="F:Microsoft.Azure.Documents.OperationKind.Invalid">
            <summary>
            An invalid operation.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.OperationKind.Create">
            <summary>
            A create operation.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.OperationKind.Replace">
            <summary>
            An replace operation.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.OperationKind.Delete">
            <summary>
            A delete operation.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.OperationKind.Read">
            <summary>
            This operation does not apply to Conflict.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.PathsHelper.TryParsePathSegments(System.String,System.Boolean@,System.String@,System.String@,System.Boolean@,System.String)">
            <summary>
                The output resourceId can be 
                a: (Rid based) DgJ5AJeIfQABAAAAAAAAAPy3CWY= 
                b: (name based) dbs/dbName/colls/collectionName/docs/documentName/attachments/attachmentName",
                For name based, it always trimmed, RemoveTrailingSlashes, RemoveLeadingSlashes,  urldecoded
            </summary>
            <param name="resourceUrl"></param>
            <param name="isFeed"></param>
            <param name="resourcePath"> like dbs, colls</param>
            <param name="resourceIdOrFullName"></param>
            <param name="isNameBased"></param>
            <param name="clientVersion"></param>
            <returns></returns>
        </member>
        <member name="F:Microsoft.Azure.Documents.PerformanceActivity.OperationDuration">
            <summary>
            The delegate is populated by the assembly that desires to trace the <see cref="T:Microsoft.Azure.Documents.PerformanceActivity"/>.
            Hence ignore the warning "CS0649: field is never assigned to, and will always have its default value null"
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.PerfCounters.InstallCounters">
            <summary>
            Creating performance counter category is a privileged operation and
            hence done in the WinFab service setup entrypoint that is invoked before
            the service is actually started.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.PerfCounters.CreatePerfCounterCategory(System.String,System.String,System.Diagnostics.PerformanceCounterCategoryType,System.Diagnostics.CounterCreationDataCollection)">
             
             Create a perf counter category with the provided name and creates the provided list of perf counters inside
             the category.
            
        </member>
        <member name="T:Microsoft.Azure.Documents.Permission">
            <summary>
            Represents a per-User Permission to access a specific resource, for example Document or Collection.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Permission.ResourceLink">
            <summary> 
            Gets or sets the self-link of resource to which the permission applies.
            </summary>
            <value>
            The self-link of the resource to which the permission applies.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Permission.ResourcePartitionKey">
            <summary>
            Gets or sets optional partition key value for the permission.
            A permission applies to resources when two conditions are met:
                  1. <see cref="P:Microsoft.Azure.Documents.Permission.ResourceLink"/> is prefix of resource's link.
                        For example "/dbs/mydatabase/colls/mycollection" applies to "/dbs/mydatabase/colls/mycollection" and "/dbs/mydatabase/colls/mycollection/docs/mydocument"
                  2. <see cref="P:Microsoft.Azure.Documents.Permission.ResourcePartitionKey"/> is superset of resource's partition key.
                        For example absent/empty partition key is superset of all partition keys.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Permission.PermissionMode">
            <summary>
            Gets or sets the permission mode.
            </summary>
            <value>
            The <see cref="P:Microsoft.Azure.Documents.Permission.PermissionMode"/> mode: Read or All.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Permission.Token">
            <summary>
            Gets the access token granting the defined permission.
            </summary>
            <value>
            The access token granting the defined permission.
            </value>
        </member>
        <member name="T:Microsoft.Azure.Documents.PermissionMode">
            <summary> 
            These are the access permissions for creating or replacing a <see cref="T:Microsoft.Azure.Documents.Permission"/> resource.
            </summary>
            <remarks>
            A Permission resource associates an access permission of a user on a particular resource.
            </remarks>
        </member>
        <member name="F:Microsoft.Azure.Documents.PermissionMode.Read">
            <summary>
            Read permission mode will provide the user with Read only access to a resource.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.PermissionMode.All">
            <summary>
            All permission mode will provide the user with full access(read, insert, replace and delete) to a resource.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RequestTimeoutException.Message">
             <summary>
            
             Summary:
                 Gets a message that describes the current exception.
            
             </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.RMResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.ArgumentRequired">
            <summary>
              Looks up a localized string similar to {0} should have {1} argument..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.BadGateway">
            <summary>
              Looks up a localized string similar to Invalid response from upstream server or upstream server request failed..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.BadRequest">
            <summary>
              Looks up a localized string similar to One of the input values is invalid..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.BadUrl">
            <summary>
              Looks up a localized string similar to Request url is invalid..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.ChannelClosed">
            <summary>
              Looks up a localized string similar to Channel is closed.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.CollectionThroughputCannotBeMoreThan">
            <summary>
              Looks up a localized string similar to Throughput of this collection cannot be more than {0}, as was provisioned during collection creation time..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.CorrelationIDNotFoundInResponse">
            <summary>
              Looks up a localized string similar to Correlation ID not found in response.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.CrossPartitionContinuationAndIndex">
            <summary>
              Looks up a localized string similar to Value specified in the &quot;{0}&quot; header is incompatible with value specified in the &quot;{1}&quot; header of the request..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.CrossPartitionOrderByQueryNotSupported">
            <summary>
              Looks up a localized string similar to Cross partition query with ORDER BY is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.CrossPartitionQueryDisabled">
            <summary>
              Looks up a localized string similar to Cross partition query is required but disabled. Please set x-ms-documentdb-query-enablecrosspartition to true, specify x-ms-documentdb-partitionkey, or revise your query to avoid this exception..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.CrossPartitionQueryWithTopUnsupported">
            <summary>
              Looks up a localized string similar to Cross partition query with TOP is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.DatabaseAccountNotFound">
            <summary>
              Looks up a localized string similar to Database Account {0} does not exist.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.DateTimeConverterInvalidDateTime">
            <summary>
              Looks up a localized string similar to Expecting DateTime value..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.DateTimeConverterInvalidReaderValue">
            <summary>
              Looks up a localized string similar to Expecting reader to read Integer.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.DateTimeConveterInvalidReaderDoubleValue">
            <summary>
              Looks up a localized string similar to Expecting reader value to be compatible with double conversion..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.DeserializationError">
            <summary>
              Looks up a localized string similar to Error occurred while deserializing content &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.DocumentServiceUnavailable">
            <summary>
              Looks up a localized string similar to Service is currently unavailable, please retry after a while. If this problem persists please contact support..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.DuplicateCorrelationIdGenerated">
            <summary>
              Looks up a localized string similar to Duplicate correlation id generated.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.EndpointNotFound">
            <summary>
              Looks up a localized string similar to Unable to retrieve address of endpoint &apos;{0}&apos; from the address &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.EntityAlreadyExists">
            <summary>
              Looks up a localized string similar to Entity with the specified id already exists in the system..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.ExceptionMessage">
            <summary>
              Looks up a localized string similar to Message: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.ExceptionMessageAddIpAddress">
            <summary>
              Looks up a localized string similar to {0}, Local IP: {1}.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.ExceptionMessageAddRequestUri">
            <summary>
              Looks up a localized string similar to {0}, Request URI: {1}.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.Forbidden">
            <summary>
              Looks up a localized string similar to Unable to proceed with the request. Please check the authorization claims to ensure the required permissions to process the request..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.GatewayTimedout">
            <summary>
              Looks up a localized string similar to Attempt to process the request timed out at remote server..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.Gone">
            <summary>
              Looks up a localized string similar to The requested resource is no longer available at the server..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.IdGenerationFailed">
            <summary>
              Looks up a localized string similar to Failed to generate id for resourceType = {0}, partitionIndex = {1}, serviceIndex = {2}, partitionCount = {3}..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.IncompleteRoutingMap">
            <summary>
              Looks up a localized string similar to Routing map is not complete..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InsufficientPermissions">
            <summary>
              Looks up a localized string similar to Insufficient permissions provided in the authorization header for the corresponding request. Please retry with another authorization header..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InsufficientResourceTokens">
            <summary>
              Looks up a localized string similar to Unable to continue without atleast a single token in the resource tokens input collection..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InternalServerError">
            <summary>
              Looks up a localized string similar to Unknown server error occurred when processing this request..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidAPIVersion">
            <summary>
              Looks up a localized string similar to Invalid API version. Ensure a valid x-ms-version header value is passed..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidAuthHeaderFormat">
            <summary>
              Looks up a localized string similar to Authorization header doesn&apos;t confirm to the required format. Please verify and try again..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidBackendResponse">
            <summary>
              Looks up a localized string similar to The backend response was not in the correct format..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidCharacterInResourceName">
            <summary>
              Looks up a localized string similar to The resource name presented contains invalid character &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidConsistencyLevel">
            <summary>
              Looks up a localized string similar to ConsistencyLevel {0} specified in the request is invalid when service is configured with consistency level {1}. Ensure the request consistency level is not stronger than the service consistency level..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidDateHeader">
            <summary>
              Looks up a localized string similar to The input date header is invalid format. Please pass in RFC 1123 style date format..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidDocumentCollection">
            <summary>
              Looks up a localized string similar to The specified document collection is invalid..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidEnumValue">
            <summary>
              Looks up a localized string similar to Invalid value {0} passed for enum {1}.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidHeaderValue">
            <summary>
              Looks up a localized string similar to Value &apos;{0}&apos; specified for the header &apos;{1}&apos; is invalid. .
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidIndexKindValue">
            <summary>
              Looks up a localized string similar to The specified value {0} of the index kind is invalid..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidIndexSpecFormat">
            <summary>
              Looks up a localized string similar to The index spec format is invalid..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidIndexTransformationProgressValues">
            <summary>
              Looks up a localized string similar to Received invalid index transformation progress values from all the replicas..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidMaxStalenessInterval">
            <summary>
              Looks up a localized string similar to MaxStalenessInterval should be greater than or equal to {0} sec and less than or equal to {1} sec.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidMaxStalenessPrefix">
            <summary>
              Looks up a localized string similar to MaxStalenessPrefix should be greater than or equal to {0} and less than or equal to {1}.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidOfferThroughput">
            <summary>
              Looks up a localized string similar to The value of offer throughput specified is invalid. Please enter valid positive integer..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidOfferType">
            <summary>
              Looks up a localized string similar to OfferType {0} specified in the request is invalid. Please refer to offer documentation and specify a valid offer type..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidOfferV2Input">
            <summary>
              Looks up a localized string similar to The required field Content is missing in Offer version v2..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidOwnerResourceType">
            <summary>
              Looks up a localized string similar to Resource {0} is invalid for adding owner resource record.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidPageSize">
            <summary>
              Looks up a localized string similar to The input PageSize {0} is invalid. Ensure to pass a valid page size which must be a positive integer or -1 for a dynamic page size..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidPartitionKey">
            <summary>
              Looks up a localized string similar to Partition key {0} is invalid..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidPermissionMode">
            <summary>
              Looks up a localized string similar to The permission mode provided in the authorization token doesn&apos;t provide sufficient permissions..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidProxyCommand">
            <summary>
              Looks up a localized string similar to Command is not supported by backend.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidQuery">
            <summary>
              Looks up a localized string similar to Query &apos;{0}&apos; specified is either invalid or unsupported..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidQueryValue">
            <summary>
              Looks up a localized string similar to Value &apos;{0}&apos; specified for the query &apos;{1}&apos; is invalid..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidReplicationAndConsistencyCombination">
            <summary>
              Looks up a localized string similar to Strong consistency level cannot be specified with async replication. Either change the replication policy &apos;AsyncReplication&apos; to false or relax the consistency level..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidResourceID">
            <summary>
              Looks up a localized string similar to Failed to parse the value &apos;{0}&apos; as ResourceId..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidResourceIdBatchSize">
            <summary>
              Looks up a localized string similar to Value for {0} should be greater than 0.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidResourceKind">
            <summary>
              Looks up a localized string similar to Resource kind {0} is invalid.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidResourceType">
            <summary>
              Looks up a localized string similar to Requested ResourceType {0} passed as generic argument should be same as the one specified by ResourceType member {1}.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidResourceUrlPath">
            <summary>
              Looks up a localized string similar to Resource Url path {0} is invalid..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidResourceUrlQuery">
            <summary>
              Looks up a localized string similar to The value &apos;{0}&apos; specified  for query &apos;{1}&apos; is invalid..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidScriptResource">
            <summary>
              Looks up a localized string similar to Script request has invalid body..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidSessionToken">
            <summary>
              Looks up a localized string similar to The session token provided &apos;{0}&apos; is invalid..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidSpaceEndingInResourceName">
            <summary>
              Looks up a localized string similar to The resource name can&apos;t end with space..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidStalenessPolicy">
            <summary>
              Looks up a localized string similar to Staleness Policy specified is invalid. Ensure both MaxPrefix and MaxStalenessIntervalInSeconds are both 0 or both not zero..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidTarget">
            <summary>
              Looks up a localized string similar to Target for the request is invalid.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidTokenTimeRange">
            <summary>
              Looks up a localized string similar to The authorization token is not valid at the current time. Please create another token and retry (token start time: {0}, token expiry time: {1}, current server time: {2})..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidUrl">
            <summary>
              Looks up a localized string similar to Request url is invalid..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidUseSystemKey">
            <summary>
              Looks up a localized string similar to System key can only access replica root.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.InvalidVersionFormat">
            <summary>
              Looks up a localized string similar to Invalid version format for {0}. Input Version {1}.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.MaximumRULimitExceeded">
            <summary>
              Looks up a localized string similar to Current maximum throughput per collection is {0}. Please contact Azure support to increase it..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.MessageIdHeaderMissing">
            <summary>
              Looks up a localized string similar to Cannot find messageId header.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.MethodNotAllowed">
            <summary>
              Looks up a localized string similar to The requested verb is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.MismatchToken">
            <summary>
              Looks up a localized string similar to The input authorization token can&apos;t serve the request. Please check that the expected payload is built as per the protocol, and check the key being used. Server used the following payload to sign: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.MissingAuthHeader">
            <summary>
              Looks up a localized string similar to Required Header authorization is missing. Ensure a valid Authorization token is passed..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.MissingDateForAuthorization">
            <summary>
              Looks up a localized string similar to Authorization token mandates Date headers. Please pass in RFC 1123 style date format..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.MissingPartitionKeyValue">
            <summary>
              Looks up a localized string similar to PartitionKey value must be supplied for this operation..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.MissingProperty">
            <summary>
              Looks up a localized string similar to Required property {0} is not specified in the request..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.MissingRequiredHeader">
            <summary>
              Looks up a localized string similar to Required header &apos;{0}&apos; is not specified in the request..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.MissingRequiredQuery">
            <summary>
              Looks up a localized string similar to Required query variable &apos;{0}&apos; is not specified in the request..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.MultipleCollectionReplaceNotAllowed">
            <summary>
              Looks up a localized string similar to Document collection cannot be replaced while a previous document collection update operation is ongoing..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.MustHaveNonZeroPreferredRegionWhenAutomaticFailoverDisabled">
            <summary>
              Looks up a localized string similar to Atleast single region must be specified in PreferredLocation list when automatic failover is disabled..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.NamingPropertyNotFound">
            <summary>
              Looks up a localized string similar to NamingProperty {0} not found.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.NegativeInteger">
            <summary>
              Looks up a localized string similar to Property &apos;{0}&apos; integer value must be greater than or equal to zero..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.networks_xsd">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
            &lt;xs:schema xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;
            
            &lt;xs:complexType name=&quot;Include&quot; &gt;
            	&lt;xs:attribute name=&quot;IPSubNet&quot;&gt;
            		&lt;xs:simpleType&gt;
            		    &lt;xs:restriction base=&quot;xs:string&quot;&gt;
                      &lt;!--Regex pattern for matching &lt;IP address&gt;/&lt;bitmask&gt; --&gt;
            		      &lt;xs:pattern value=&quot;(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})/(\d{1,2})&quot;/&gt;
            		    &lt;/xs:restriction&gt;
            		&lt;/xs:simpleType&gt;
            	&lt;/xs:attribute &gt;
            &lt;/xs:complexType&gt;
            
            &lt;!--Network elements mean Datacenters --&gt;
              &lt;xs:compl [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.NoGraftPoint">
            <summary>
              Looks up a localized string similar to No graft point.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.NotFound">
            <summary>
              Looks up a localized string similar to Entity with the specified id does not exist in the system..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.OfferTypeAndThroughputCannotBeSpecifiedBoth">
            <summary>
              Looks up a localized string similar to Offer type and throughput cannot both be specified..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.OperationRequestedStatusIsInvalid">
            <summary>
              Looks up a localized string similar to Requested Operation Status = {0} is invalid..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.PartitionIsFull">
            <summary>
              Looks up a localized string similar to Selected partition is full, please try insert in different partition..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.PartitionKeyMismatch">
            <summary>
              Looks up a localized string similar to Partition key provided either doesn&apos;t correspond to definition in the collection or doesn&apos;t match partition key field values specified in the document..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.PartitionKeyRangeIdAbsentInContext">
            <summary>
              Looks up a localized string similar to PartitionKeyRangeId is absent in the context..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.PositiveInteger">
            <summary>
              Looks up a localized string similar to Property &apos;{0}&apos; integer value must be greater than zero..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.PreconditionFailed">
            <summary>
              Looks up a localized string similar to Operation cannot be performed because one of the specified precondition is not met..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.PrimaryNotFound">
            <summary>
              Looks up a localized string similar to Unable to resolve primary endpoint for partition {0} for service {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.PropertyCannotBeNull">
            <summary>
              Looks up a localized string similar to Property {0} can not be assigned to null..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.PropertyNotFound">
            <summary>
              Looks up a localized string similar to Property &apos;{0}&apos; is not found in the document..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.ProvisionLimit">
            <summary>
              Looks up a localized string similar to Reached the provisioned limit. Please consider scaling your database account or deleting unused resources..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.ReadQuorumNotMet">
            <summary>
              Looks up a localized string similar to Read Quorum size of {0} is not met for the request..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.ReplacesAndUpsertsForScriptswithMultiplePartitionsAreNotSupported">
            <summary>
              Looks up a localized string similar to Replaces and upserts for scripts in collections with multiple partitions are not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.ReplicaAtIndexNotAvailable">
            <summary>
              Looks up a localized string similar to Replica at index &apos;{0}&apos; is currently unavailable..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.RequestConsistencyLevelNotSupported">
            <summary>
              Looks up a localized string similar to Consistency Level &apos;{0}&apos;  requested via header &apos;{1}&apos; is not supported by this service endpoint. Please contact the service administrator..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.RequestEntityTooLarge">
            <summary>
              Looks up a localized string similar to The size of the response exceeded the maximum allowed size, limit the  response size by specifying smaller value for &apos;{0}&apos; header..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.RequestTimeout">
            <summary>
              Looks up a localized string similar to Request timed out..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.RequestTooLarge">
            <summary>
              Looks up a localized string similar to The size of the request exceeded the maximum allowed size..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.ResourceIdNotValid">
            <summary>
              Looks up a localized string similar to ResourceId {0} of type {1} is not a valid resource Id..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.ResourceIdPolicyNotSupported">
            <summary>
              Looks up a localized string similar to ResourceIdPolicy {0} is not supported.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.ResourceTypeNotSupported">
            <summary>
              Looks up a localized string similar to Resource type {0} is not supported by ResourceIdPartitioner.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.RetryWith">
            <summary>
              Looks up a localized string similar to Retry the request..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.SecondariesNotFound">
            <summary>
              Looks up a localized string similar to Unable to resolve secondary endpoint for partition {0} for service {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.ServiceNotFound">
            <summary>
              Looks up a localized string similar to Service at index {0} not found..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.ServiceReservedBitsOutOfRange">
            <summary>
              Looks up a localized string similar to Service reserved bits can not be more than 24. Otherwise it overlaps with the collection/user multiplexing bit.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.ServiceUnavailable">
            <summary>
              Looks up a localized string similar to Service is currently unavailable..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.ServiceWithResourceIdNotFound">
            <summary>
              Looks up a localized string similar to Could not find service hosting DocumentCollection with ResourceId {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.SpatialBoundingBoxInvalidCoordinates">
            <summary>
              Looks up a localized string similar to Bounding box must have an even number of coordinates and more than 3..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.SpatialExtensionMethodsNotImplemented">
            <summary>
              Looks up a localized string similar to Spatial operations can be used in Linq expressions only and are evaluated in DocumentDB server..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.SpatialFailedToDeserializeCrs">
            <summary>
              Looks up a localized string similar to Coordinate Reference System specified in GeoJSON is invalid..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.SpatialInvalidGeometryType">
            <summary>
              Looks up a localized string similar to Failed to deserialize Geometry object because &apos;type&apos; property is either absent or has invalid value..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.SpatialInvalidPosition">
            <summary>
              Looks up a localized string similar to Spatial position must have at least two coordinates..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.StarSlashArgumentError">
            <summary>
              Looks up a localized string similar to Star and slash should have no arguments..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.StringArgumentNullOrEmpty">
            <summary>
              Looks up a localized string similar to String agument {0} is null or empty.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.TooFewPartitionKeyComponents">
            <summary>
              Looks up a localized string similar to PartitionKey has fewer components than defined in PartitionKeyDefinition..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.TooManyRequests">
            <summary>
              Looks up a localized string similar to The request rate is too large. Please retry after sometime..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.UnableToDeserializePartitionKeyValue">
            <summary>
              Looks up a localized string similar to Cannot deserialize PartitionKey value &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.UnableToFindFreeConnection">
            <summary>
              Looks up a localized string similar to Unable to find free connection.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.Unauthorized">
            <summary>
              Looks up a localized string similar to Unable to authenticate the request. The request requires valid user authentication..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.UnexpectedConsistencyLevel">
            <summary>
              Looks up a localized string similar to Operation not permitted as consistency level is set to {0}. Expected {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.UnexpectedOfferVersion">
            <summary>
              Looks up a localized string similar to Unexpected offer version {0} from store..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.UnexpectedOperator">
            <summary>
              Looks up a localized string similar to Unexpected operator {0} ..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.UnexpectedResourceType">
            <summary>
              Looks up a localized string similar to ResourceType {0} is unexpected..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.UnknownResourceKind">
            <summary>
              Looks up a localized string similar to Resource kind {0} is unknown.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.UnknownResourceType">
            <summary>
              Looks up a localized string similar to Resource type {0} is unknown.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.UnsupportedEntityType">
            <summary>
              Looks up a localized string similar to Unsupported entity type {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.UnsupportedHints">
            <summary>
              Looks up a localized string similar to Indexing Hints are not supported in this deployment. .
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.UnsupportedKeyType">
            <summary>
              Looks up a localized string similar to Key type {0} is unsupported.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.UnSupportedOfferThroughput">
            <summary>
              Looks up a localized string similar to The value of offer throughput specified is invalid. Please specify a value between {0} and {1} inclusive in increments of {2}. Please contact https://azure.microsoft.com/support to request limit increases beyond {1} RU/s..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.UnSupportedOfferThroughputWithTwoRanges">
            <summary>
              Looks up a localized string similar to The value of offer throughput specified is invalid. Please specify a value between {0} and {1}, or between {2} and {3} inclusive in increments of {4}. Please contact https://azure.microsoft.com/support to request limit increases beyond {3} RU/s..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.UnsupportedOfferTypeWithV2Offer">
            <summary>
              Looks up a localized string similar to Offer type is not supported with Offer version &apos;V2&apos; and above..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.UnsupportedOfferVersion">
            <summary>
              Looks up a localized string similar to The supplied offer version {0} is not supported. Please specify either a blank version, &apos;V1&apos; or &apos;V2&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.UnsupportedPartitionKeyComponentValue">
            <summary>
              Looks up a localized string similar to Unsupported PartitionKey value component &apos;{0}&apos;. Numeric, string, bool, null, Undefined are the only supported types..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.UnsupportedProgram">
            <summary>
              Looks up a localized string similar to Program requires to run in 64 bit for elastic query feature to work. Please switch your program to 64 bit or use Gateway connectivity mode..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.UnsupportedProtocol">
            <summary>
              Looks up a localized string similar to Value &apos;{0}&apos; specified for protocol is unsupported..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.UnsupportedRegion">
            <summary>
              Looks up a localized string similar to The requested region &apos;{0}&apos; is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.UnsupportedRollbackKind">
            <summary>
              Looks up a localized string similar to The requested rollback kind &apos;{0}&apos; is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.UnsupportedRootPolicyChange">
            <summary>
              Looks up a localized string similar to Changing Root Indexing Policy is not supported in this deployment..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.UnsupportedSystemKeyKind">
            <summary>
              Looks up a localized string similar to Federation system key kind {0} is invalid.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.UnsupportedTokenType">
            <summary>
              Looks up a localized string similar to Unsupported token type {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.RMResources.UnsupportedV1OfferVersion">
            <summary>
              Looks up a localized string similar to The Offer Version &apos;V1&apos; is not supported since the associated collection is already a partitioned collection. Please use offer version &apos;V2&apos;..
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.RuntimePerfCounters.CreatePerfCounterCategory(System.String,System.String,System.Diagnostics.PerformanceCounterCategoryType,System.Diagnostics.CounterCreationDataCollection)">
             
             Create a perf counter category with the provided name and creates the provided list of perf counters inside
             the category.
            
        </member>
        <member name="T:Microsoft.Azure.Documents.SerializationFormattingPolicy">
            <summary>
            Policy associated with JSON serialization/de-serialization.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.SerializationFormattingPolicy.None">
            <summary> 
            No additional formatting required.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.SerializationFormattingPolicy.Indented">
            <summary>
            Indent the fields appropriately.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.DatabaseAccount">
            <summary> 
            Represents a DatabaseAccount. A DatabaseAccount is the container for databases.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.DatabaseAccount.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.DatabaseAccount"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.DatabaseAccount.DatabasesLink">
            <summary>
            Gets the self-link for Databases in the databaseAccount.
            </summary>
            <value>
            The self-link for Databases in the databaseAccount.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.DatabaseAccount.MediaLink">
            <summary>
            Gets the self-link for Media in the databaseAccount.
            </summary>
            <value>
            The self-link for Media in the databaseAccount.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.DatabaseAccount.WritableLocations">
            <summary>
            All writeable locations supported by this databaseAccount
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.DatabaseAccount.ReadableLocations">
            <summary>
            All readable locations supported by this databaseAccount
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.DatabaseAccount.MaxMediaStorageUsageInMB">
            <summary>
            Gets the storage quota for media storage in the databaseAccount.
            </summary>
            <value>
            The storage quota in measured MBs.
            </value>
            <remarks>
            This value is retrieved from the gateway.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.DatabaseAccount.MediaStorageUsageInMB">
            <summary>
            Gets the current attachment content (media) usage in MBs.
            </summary>
            <value>
            The attachment content (media) usage in MBs.
            </value>
            <remarks>
            The value is retrieved from the gateway. The value is returned from cached information updated periodically 
            and is not guaranteed to be real time.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.DatabaseAccount.ConsumedDocumentStorageInMB">
            <summary>
            The cumulative sum of current sizes of created collection in MB
            Value is returned from cached information which is updated periodically and is not guaranteed to be real time
            TODO remove this property tfs 4442779
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.DatabaseAccount.ReservedDocumentStorageInMB">
            <summary>
            The cumulative sum of maximum sizes of created collection in MB
            Value is returned from cached information which is updated periodically and is not guaranteed to be real time
            TODO remove this property tfs 4442779
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.DatabaseAccount.ProvisionedDocumentStorageInMB">
            <summary>
            The provisioned documented storage capacity for the database account
            Value is returned from cached information which is updated periodically and is not guaranteed to be real time
            TODO remove this property tfs 4442779
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.DatabaseAccount.ConsistencyPolicy">
            <summary>
            Gets the <see cref="P:Microsoft.Azure.Documents.DatabaseAccount.ConsistencyPolicy"/> settings.
            </summary>
            <value>
            The ConsistencyPolicy settings.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.DatabaseAccount.AddressesLink">
            <summary>
            Gets the self-link for Address Routing Table in the databaseAccount
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.DatabaseAccount.ReplicationPolicy">
            <summary>
            Gets the ReplicationPolicy settings
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.DatabaseAccount.SystemReplicationPolicy">
            <summary>
            Gets the SystemReplicationPolicy settings
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.StoredProcedure">
            <summary>
            Represents a stored procedure.
            </summary>
            <remarks> 
            DocumentDB allows application logic written entirely in JavaScript to be executed directly inside the database engine under the database transaction.
            For additional details, refer to the server-side JavaScript API documentation.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.StoredProcedure.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.StoredProcedure.Body">
            <summary>
            Gets or sets the body of the stored procedure.
            </summary>
            <value>The body of the stored procedure.</value>
            <remarks>Must be a valid JavaScript function. For e.g. "function () { getContext().getResponse().setBody('Hello World!'); }"</remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.IConnection.RequestAsync(Microsoft.Azure.Documents.DocumentServiceRequest,System.Uri,Microsoft.Azure.Documents.ResourceOperation,System.Guid)">
            <summary>
            Issue a request and read the response on a connection
            </summary>
            <param name="request">The request to send</param>
            <param name="physicalAddress">
                With connection pooling is used, it is assumed that host:port of the Uri used to open the connection
                matches host:port of the this parameter. However, the path of the Uri need not match the 
            </param>
            <param name="resourceOperation">Resource and Operation Type for the request</param>
            <param name="activityId">Guid activityId for the request</param>
            <returns>The response from the server</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IConnection.Close">
            <summary>
            Close the connection and Dispose underlying disposable resources.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.IConnection.HasExpired">
            <summary>
            Checks whether the connection has been unused for longer than its expiration time. To be
            used as a heuristic to reduce network failures while issuing requests on pooled connections.
            </summary>
            <returns>true if connection has expired, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.IConnection.ConfirmOpen">
            <summary>
            Checks whether the connection is currently readable and writable. To be used as a heuristic
            to reduce network failures while issuing requests on pooled connections.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.IConnection.PoolKey">
            <summary>
            The poolKey passed in to the IConnectionDispenser which created this IConnection
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.IConnectionDispenser.OpenNewConnection(System.Guid,System.Uri,System.String)">
            <summary>
            Returns an IConnection which is ready to fulfill requests.
            </summary>
            <param name="activityId">Guid used for correlation between client and service</param>
            <param name="fullUri">The URI of the target server. Only the host and port are used for establishing the connection</param>
            <param name="poolKey">A string uniquely identifying the group of connections being pooled. "host:port" is currently used</param>
            <returns>An IConnection which has had any initialization handshakes performed, so that it is ready for requests</returns>
        </member>
        <member name="F:Microsoft.Azure.Documents.RntbdConnectionDispenser.ConnectionTimer">
            <summary>
            The delegate is populated by the assembly that desires to trace the timers for the connection establishment.
            Hence ignore the warning "CS0649: field is never assigned to, and will always have its default value null"
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.Trigger">
            <summary>
            Represents a trigger.
            </summary>
            <remarks> 
            DocumentDB supports pre and post triggers written in JavaScript to be executed on creates, updates and deletes. 
            For additional details, refer to the server-side JavaScript API documentation.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Trigger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Trigger"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Trigger.Body">
            <summary>
            Gets or sets the body of the trigger.
            </summary>
            <value>The body of the trigger.</value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Trigger.TriggerType">
            <summary>
            Get or set the type of the trigger.
            </summary>
            <value>The body of the trigger.</value>
            <seealso cref="P:Microsoft.Azure.Documents.Trigger.TriggerType"/>
        </member>
        <member name="P:Microsoft.Azure.Documents.Trigger.TriggerOperation">
            <summary>
            Gets or sets the operation the trigger is associated with.
            </summary>
            <value>The operation the trigger is associated with.</value>
            <seealso cref="P:Microsoft.Azure.Documents.Trigger.TriggerOperation"/>
        </member>
        <member name="T:Microsoft.Azure.Documents.TriggerOperation">
            <summary> 
            Specifies the operations on which a trigger should be executed.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.TriggerOperation.All">
            <summary>
            Specifies all operations.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.TriggerOperation.Create">
            <summary>
            Specifies create operations only.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.TriggerOperation.Update">
            <summary>
            Specifies update operations only.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.TriggerOperation.Delete">
            <summary>
            Specifies delete operations only.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.TriggerOperation.Replace">
            <summary>
            Specifies replace operations only.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.TriggerType">
            <summary>
            Specifies the type of the trigger.
            </summary> 
        </member>
        <member name="F:Microsoft.Azure.Documents.TriggerType.Pre">
            <summary>
            Trigger should be executed before the associated operation(s).
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.TriggerType.Post">
            <summary>
            Trigger should be executed after the associated operation(s).
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.User">
            <summary> 
            Represents a database user.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.User.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.User"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.User.PermissionsLink">
            <summary>
            Gets the self-link of the permissions associated with the user.
            </summary>
            <value>The self-link of the permissions associated with the user.</value> 
        </member>
        <member name="T:Microsoft.Azure.Documents.UserDefinedFunction">
            <summary>
            Represents a user defined function.
            </summary> 
            <remarks>
            DocumentDB supports JavaScript user defined functions (UDFs) which can be used inside queries. 
            Refer to http://azure.microsoft.com/documentation/articles/documentdb-sql-query/#javascript-integration for how to use UDFs within queries.
            Refer to http://azure.microsoft.com/documentation/articles/documentdb-programming/#udf for more details about implementing UDFs in JavaScript.
            </remarks>
            <example>
            The following examples show how to register and use UDFs.
            <code language="c#">
            <![CDATA[
            await client.CreateUserDefinedFunctionAsync(collectionLink, new UserDefinedFunction { Id = "calculateTax", Body = @"function(amt) { return amt * 0.05; }" });
            client.CreateDocumentQuery<Book>(collectionLink, "SELECT VALUE udf.calculateTax(b.price) FROM books b");
            client.CreateDocumentQuery<Book>(collectionLink, new SqlQuerySpec("SELECT VALUE udf.calculateTax(b.price) FROM books b"));
            client.CreateDocumentQuery<Book>(collectionLink).Select(b => UserDefinedFunctionProvider.Invoke("calculateTax", b.Price));
            
            await client.CreateUserDefinedFunctionAsync(collectionLink, new UserDefinedFunction { Id = "toLowerCase", Body = @"function(s) { return s.ToLowerCase(); }" });
            client.CreateDocumentQuery<Book>(collectionLink, "SELECT * FROM books b WHERE b.toLowerCase = 'war and peace'");
            client.CreateDocumentQuery<Book>(collectionLink, new SqlQuerySpec(
                "SELECT * FROM books b WHERE b.toLowerCase = @bookNameLowerCase",
                new SqlParameterCollection(new SqlParameter[] {new SqlParameter { Name = "@bookNameLowerCase", Value = "War And Peace".ToLower()
             }})));
             client.CreateDocumentQuery<Book>(collectionLink).Where(b => UserDefinedFunctionProvider.Invoke("toLowerCase", b.Title) == "war and peace");
             ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Documents.UserDefinedFunction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.UserDefinedFunction.Body">
            <summary>
            Gets or sets the body of the user defined function.
            </summary>
            <value>The body of the user defined function.</value>
            <remarks>This must be a valid JavaScript function e.g. "function (input) { return input.toLowerCase(); }".</remarks>
        </member>
        <member name="T:Microsoft.Azure.Documents.ITypeResolver`1">
            <summary>
            Type resolver based on an input
            </summary>
            <typeparam name="T">Type T for which the resolver returns correct object of T in T's hierarchy</typeparam>
        </member>
        <member name="M:Microsoft.Azure.Documents.ITypeResolver`1.Resolve(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Returns a reference of an object in T's hierarchy based on a property bag.
            </summary>
            <param name="propertyBag">Property bag used to deserialize T</param>
            <returns>Object of type T</returns>
        </member>
        <member name="T:Microsoft.Azure.Documents.OfferTypeResolver">
            <summary>
            Offer resolver based on input.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.OfferTypeResolver.#ctor(System.Boolean)">
            <summary>
            Constructor with a flag indicating whether this is invoked in response or request path.
            </summary>
            <param name="isResponse">True if invoked in response path</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.OfferTypeResolver.Microsoft#Azure#Documents#ITypeResolver{Microsoft#Azure#Documents#Offer}#Resolve(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Returns a reference of an object in Offer's hierarchy based on a property bag.
            </summary>
            <param name="propertyBag">Property bag used to deserialize Offer object</param>
            <returns>Object of type Offer or OfferV2</returns>
        </member>
        <member name="T:Microsoft.Azure.Documents.Offer">
            <summary>
            Represents the offer for a resource (collection). 
            </summary>
            <remarks>
            Currently, offers are only bound to the collection resource.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Offer.#ctor">
            <summary>
            Initializes a Resource offer.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Offer.#ctor(Microsoft.Azure.Documents.Offer)">
            <summary>
            Initializes a Resource offer from another offer object.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Offer.OfferVersion">
            <summary>
            Gets or sets the version of this offer resource.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Offer.ResourceLink">
            <summary>
            Gets or sets the self-link of a resource to which the resource offer applies to.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Offer.OfferType">
            <summary>
            Gets or sets the OfferType for the resource offer.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Offer.OfferResourceId">
            <summary>
            Gets or sets the Id of the resource on which the Offer applies to.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.OfferV2">
            <summary>
            Represents the extended offer (version V2) for a resource (collection). 
            </summary>
            <remarks>
            Currently, offers are only bound to the collection resource.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.OfferV2.#ctor">
            <summary>
            Initializes a Resource offer with version V2.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.OfferV2.#ctor(System.Int32)">
            <summary>
            Initializes an offer resource with version V2 and throughput.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.OfferV2.#ctor(Microsoft.Azure.Documents.Offer,System.Int32)">
            <summary>
            Initializes a Resource offer with version V2, from a reference Offer object.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.OfferV2.Content">
            <summary>
            Gets or sets the OfferContent for the resource offer.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.OfferContentV2">
            <summary>
            Represents content properties tied to an offer resource version 2.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.OfferContentV2.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.OfferContentV2.#ctor(System.Int32)">
            <summary>
            Constructor accepting offer throughput.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.OfferContentV2.OfferThroughput">
            <summary>
            Represents dialable throughput chosen by user for his collection.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.AddressCache.ThrowIfTargetChanged(Microsoft.Azure.Documents.DocumentServiceRequest,System.IComparable)">
            <summary>
            Validates if the target partition to which the request is being sent has changed during retry.
            If that happens, the request is no more valid and need to be retried.
            </summary>
            <param name="request">Request in progress</param>
            <param name="targetIdentity">Identity of the target determined by address cache</param>
        </member>
        <member name="T:Microsoft.Azure.Documents.Conflict">
            <summary>
            This is the conflicting resource resulting from a concurrent async operation.
            </summary> 
            <remarks>
            On rare occasions, during an async operation (insert, replace and delete), a version conflict may occur on a resource.
            The conflicting resource is persisted as a Conflict resource.  
            Inspecting Conflict resources will allow you to determine which operations and resources resulted in conflicts.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Conflict.#ctor">
            <summary>
            Initialize a new instance of a Conflict class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Conflict.GetResource``1">
            <summary>
            Gets the conflicting resource.
            </summary>
            <typeparam name="T">The returned type of conflicting resource.</typeparam>
            <returns>The conflicting resource.</returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.Conflict.SourceResourceId">
            <summary>
            Gets the resource ID for the conflict.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Conflict.OperationKind">
            <summary>
            Gets the operation resulted in the conflict.
            </summary>
            <value>
            One of the values of the <see cref="P:Microsoft.Azure.Documents.Conflict.OperationKind"/> enumeration.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Conflict.ResourceType">
            <summary>
            Gets the type of the conflicting resource
            </summary>
            <value>
            The type of the resource.
            </value>
        </member>
        <member name="T:Microsoft.Azure.Documents.DocumentCollection">
            <summary>
            Represents a document collection. A collection is a named logical container for documents. 
            </summary>
            <remarks>
            A database may contain zero or more named collections and each collection consists of zero or more JSON documents. 
            Being schema-free, the documents in a collection do not need to share the same structure or fields. Since collections are application resources, 
            they can be authorized using either the master key or resource keys.
            Refer to <see>http://azure.microsoft.com/documentation/articles/documentdb-resources/#collections</see> for more details on collections.
            </remarks>
            <example>
            The example below creates a new partitioned collection with 50000 Request-per-Unit throughput.
            The partition key is the first level 'country' property in all the documents within this collection.
            <code language="c#">
            <![CDATA[
            DocumentCollection collection = await client.CreateDocumentCollectionAsync(
                databaseLink,
                new DocumentCollection 
                { 
                    Id = "MyCollection",
                    PartitionKey = new PartitionKeyDefinition
                    {
                        Paths = new Collection<string> { "/country" }
                    }
                }, 
                new RequestOptions { OfferThroughput = 50000} ).Result;
            ]]>
            </code>
            </example>
            <example>
            The example below creates a new collection with the S3 offer type.
            <code language="c#">
            <![CDATA[
            DocumentCollection collection = await client.CreateDocumentCollectionAsync(
                databaseLink,
                new DocumentCollection { Id = "MyCollection" }, 
                new RequestOptions { OfferType = "S3"} ).Result;
            ]]>
            </code>
            </example>
            <example>
            The example below creates a new collection with a custom indexing policy.
            <code language="c#">
            <![CDATA[
            DocumentCollection collectionSpec = new DocumentCollection { Id ="MyCollection" };
            collectionSpec.IndexingPolicy.Automatic = true;
            collectionSpec.IndexingPolicy.IndexingMode = IndexingMode.Consistent;
            collection = await client.CreateDocumentCollectionAsync(database.SelfLink, collectionSpec);
            ]]>
            </code>
            </example>
            <example>
            The example below creates a document of type Book inside this collection.
            <code language="c#">
            <![CDATA[
            Document doc = await client.CreateDocumentAsync(collection.SelfLink, new Book { Title = "War and Peace" });
            ]]>
            </code>
            </example>
            <example>
            The example below queries for a Database by Id to retrieve the SelfLink.
            <code language="c#">
            <![CDATA[
            using Microsoft.Azure.Documents.Linq;
            DocumentCollection collection = client.CreateDocumentCollectionQuery(databaseLink).Where(c => c.Id == "myColl").AsEnumerable().FirstOrDefault();
            string collectionLink = collection.SelfLink;
            ]]>
            </code>
            </example>
            <example>
            The example below deletes this collection.
            <code language="c#">
            <![CDATA[
            await client.DeleteDocumentCollectionAsync(collection.SelfLink);
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.IndexingPolicy"/>
            <seealso cref="T:Microsoft.Azure.Documents.PartitionKeyDefinition"/>
            <seealso cref="T:Microsoft.Azure.Documents.Document"/>
            <seealso cref="T:Microsoft.Azure.Documents.Database"/>
            <seealso cref="T:Microsoft.Azure.Documents.Offer"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.DocumentCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.DocumentCollection.IndexingPolicy">
            <summary>
            Gets the <see cref="P:Microsoft.Azure.Documents.DocumentCollection.IndexingPolicy"/> associated with the collection. 
            </summary>
            <value>
            The indexing policy associated with the collection.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.DocumentCollection.DocumentsLink">
            <summary>
            Gets the self-link for documents in a collection.
            </summary>
            <value>
            The self-link for documents in a collection.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.DocumentCollection.StoredProceduresLink">
            <summary>
            Gets the self-link for stored procedures in a collection.
            </summary>
            <value>
            The self-link for stored procedures in a collection.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.DocumentCollection.TriggersLink">
            <summary>
            Gets the self-link for triggers in a collection.
            </summary>
            <value>
            The self-link for triggers in a collection.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.DocumentCollection.UserDefinedFunctionsLink">
            <summary>
            Gets the self-link for user defined functions in a collection.
            </summary>
            <value>
            The self-link for user defined functions in a collection.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.DocumentCollection.ConflictsLink">
            <summary>
            Gets the self-link for conflicts in a collection.
            </summary>
            <value>
            The self-link for conflicts in a collection.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.DocumentCollection.OfferResourceLink">
            <summary>
            Gets the self-link for the effective offer resource for the collection.
            </summary>
            <value>
            The self-link for the effective offer resource for the collection.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.DocumentCollection.PartitionKey">
            <summary>
            Gets or sets <see cref="T:Microsoft.Azure.Documents.PartitionKeyDefinition"/> object.
            </summary>
            <value>
            <see cref="T:Microsoft.Azure.Documents.PartitionKeyDefinition"/> object.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.DocumentCollection.DefaultTimeToLive">
            <summary>
            Gets the default time to live in seconds for documents in a collection.
            </summary>
            <value>
            It is an optional property.
            A valid value must be either a nonzero positive integer, '-1', or <c>null</c>.
            By default, DefaultTimeToLive is set to null meaning the time to live is turned off for the collection.
            The unit of measurement is seconds. The maximum allowed value is 2147483647.
            </value>
            <remarks>
            <para>
            The <see cref="P:Microsoft.Azure.Documents.DocumentCollection.DefaultTimeToLive"/> will be applied to all the documents in the collection as the default time-to-live policy.
            The individual document could override the default time-to-live policy by setting its <see cref="P:Microsoft.Azure.Documents.Document.TimeToLive"/>.
            </para>
            <para>
            When the <see cref="P:Microsoft.Azure.Documents.DocumentCollection.DefaultTimeToLive"/> is <c>null</c>, the time-to-live will be turned off for the collection.
            It means all the documents will never expire. The individual document's <see cref="P:Microsoft.Azure.Documents.Document.TimeToLive"/> will be disregarded.
            </para>
            <para>
            When the <see cref="P:Microsoft.Azure.Documents.DocumentCollection.DefaultTimeToLive"/> is '-1', the time-to-live will be turned on for the collection.
            By default, all the documents will never expire. The individual document could be given a specific time-to-live value by setting its
            <see cref="P:Microsoft.Azure.Documents.Document.TimeToLive"/>. The document's <see cref="P:Microsoft.Azure.Documents.Document.TimeToLive"/> will be honored, and the expired documents
            will be deleted in background.
            </para>
            <para>
            When the <see cref="P:Microsoft.Azure.Documents.DocumentCollection.DefaultTimeToLive"/> is a nonzero positive integer, the time-to-live will be turned on for the collection.
            And a default time-to-live in seconds will be applied to all the documents. A document will be expired after the
            specified <see cref="P:Microsoft.Azure.Documents.DocumentCollection.DefaultTimeToLive"/> value in seconds since its last write time.
            The individual document could override the default time-to-live policy by setting its <see cref="P:Microsoft.Azure.Documents.Document.TimeToLive"/>.
            Please refer to the <see cref="P:Microsoft.Azure.Documents.Document.TimeToLive"/> for more details about evaluating the final time-to-live policy of a document.
            </para>
            </remarks>
            <example>
            The example below disables time-to-live on a collection.
            <code language="c#">
            <![CDATA[
                collection.DefaultTimeToLive = null;
            ]]>
            </code>
            </example>
            <example>
            The example below enables time-to-live on a collection. By default, all the documents never expire.
            <code language="c#">
            <![CDATA[
                collection.DefaultTimeToLive = -1;
            ]]>
            </code>
            </example>
            <example>
            The example below enables time-to-live on a collection. By default, the document will expire after 1000 seconds
            since its last write time.
            <code language="c#">
            <![CDATA[
                collection.DefaultTimeToLive = 1000;
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Document"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Helpers.GetHeaderValueByte(System.Collections.Specialized.NameValueCollection,System.String,System.Byte)">
            <summary>
            Gets the byte value for a header. If header not present, returns the defaultValue.
            </summary>
            <param name="headerValues"></param>
            <param name="headerName"></param>
            <param name="defaultValue">Pls do not set defaultValue to MinValue as MinValue carries valid meaning in some place</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.NetUtil.GetNonLoopbackIpV4Address">
            <summary>
            Get a single non-loopback (i.e., not 127.0.0.0/8)
            IP address of the local machine.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Azure.Documents.Client.Protocol">
            <summary>
            Specifies the protocol to be used by DocumentClient for communicating to the Azure DocumentDB service.
            </summary>
            <example>
            <code language="c#">
            <![CDATA[
            DocumentClient client = new DocumentClient(endpointUri, masterKey, new ConnectionPolicy 
            { 
                ConnectionMode = ConnectionMode.Direct,
                ConnectionProtocol = Protocol.Tcp
            }); 
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ConnectionMode"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ConnectionPolicy"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.DocumentClient"/>
        </member>
        <member name="F:Microsoft.Azure.Documents.Client.Protocol.Https">
            <summary>
            Specifies the HTTPS protocol.
            </summary>
            <remarks>Default connectivity.</remarks>
        </member>
        <member name="F:Microsoft.Azure.Documents.Client.Protocol.Tcp">
            <summary>
            Specifies a custom binary protocol on TCP.
            </summary>
            <remarks>Better for performance.</remarks>
        </member>
        <member name="T:Microsoft.Azure.Documents.Client.UriFactory">
            <summary>
            Helper class to assist user creating the various Uris needed for use with the DocumentClient
            </summary>
            <example>
            The example below uses UriFactory to create a DocumentCollectionLink and then uses that to create a Document.
            <code language="c#">
            <![CDATA[ 
            Uri collUri = UriFactory.CreateDocumentCollectionUri("MyDb", "MyCollection");
            var doc = await client.CreateDocumentAsync(collUri, new {id = "MyDoc"});
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.UriFactory.CreateDatabaseUri(System.String)">
            <summary>
            Given a database id, this creates a database link.
            </summary>
            <param name="databaseId">The database id</param>
            <returns>
            A database link in the format of /dbs/{0}/ with {0} being a Uri escaped version of the <paramref name="databaseId"/>
            </returns>
            <remarks>Would be used when creating or deleting <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> or a <see cref="T:Microsoft.Azure.Documents.User"/></remarks>
            <seealso cref="M:System.Uri.EscapeUriString(System.String)"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.UriFactory.CreateCollectionUri(System.String,System.String)">
            <summary>
            Given a database and collection id, this creates a collection link.
            </summary>
            <param name="databaseId">The database id</param>
            <param name="collectionId">The collection id</param>
            <returns>
            A collection link in the format of /dbs/{0}/colls/{1}/ with {0} being a Uri escaped version of the <paramref name="databaseId"/> and {1} being <paramref name="collectionId"/>
            </returns>
            <remarks>Would be used when updating or deleting a <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/>, creating <see cref="T:Microsoft.Azure.Documents.Document"/>, a <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/>, a <see cref="T:Microsoft.Azure.Documents.Trigger"/>, a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> or when executing a query with CreateDocumentQuery/&gt;</remarks>
            <seealso cref="M:System.Uri.EscapeUriString(System.String)"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.UriFactory.CreateDocumentCollectionUri(System.String,System.String)">
            <summary>
            Given a database and collection id, this creates a collection link.
            </summary>
            <param name="databaseId">The database id</param>
            <param name="collectionId">The collection id</param>
            <returns>
            A collection link in the format of /dbs/{0}/colls/{1}/ with {0} being a Uri escaped version of the <paramref name="databaseId"/> and {1} being <paramref name="collectionId"/>
            </returns>
            <remarks>Would be used when updating or deleting a <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/>, creating <see cref="T:Microsoft.Azure.Documents.Document"/>, a <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/>, a <see cref="T:Microsoft.Azure.Documents.Trigger"/>, a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> or when executing a query with CreateDocumentQuery/&gt;</remarks>
            <seealso cref="M:System.Uri.EscapeUriString(System.String)"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.UriFactory.CreateUserUri(System.String,System.String)">
            <summary>
            Given a database and user id, this creates a user link.
            </summary>
            <param name="databaseId">The database id</param>
            <param name="userId">The user id</param>
            <returns>
            A user link in the format of /dbs/{0}/users/{1}/ with {0} being a Uri escaped version of the <paramref name="databaseId"/> and {1} being <paramref name="userId"/>
            </returns>
            <remarks>Would be used when creating <see cref="T:Microsoft.Azure.Documents.Permission"/>, or when replacing or deleting the <see cref="T:Microsoft.Azure.Documents.User"/></remarks>
            <seealso cref="M:System.Uri.EscapeUriString(System.String)"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.UriFactory.CreateDocumentUri(System.String,System.String,System.String)">
            <summary>
            Given a database, collection and document id, this creates a document link.
            </summary>
            <param name="databaseId">The database id</param>
            <param name="collectionId">The collection id</param>
            <param name="documentId">The document id</param>
            <returns>
            A document link in the format of /dbs/{0}/colls/{1}/docs/{2}/ with {0} being a Uri escaped version of the <paramref name="databaseId"/>, {1} being <paramref name="collectionId"/> and {2} being the <paramref name="documentId"/>
            </returns>
            <remarks>Would be used when creating an <see cref="T:Microsoft.Azure.Documents.Attachment"/>, or when replacing or deleting a <see cref="T:Microsoft.Azure.Documents.Document"/></remarks>
            <seealso cref="M:System.Uri.EscapeUriString(System.String)"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.UriFactory.CreatePermissionUri(System.String,System.String,System.String)">
            <summary>
            Given a database and user id, this creates a permission link.
            </summary>
            <param name="databaseId">The database id</param>
            <param name="userId">The user id</param>
            <param name="permissionId">The permission id</param>
            <returns>
            A permission link in the format of /dbs/{0}/users/{1}/permissions/{2} with {0} being a Uri escaped version of the <paramref name="databaseId"/>, {1} being <paramref name="userId"/> and {2} being <paramref name="permissionId"/>
            </returns>
            <remarks>Would be used when replacing or deleting the <see cref="T:Microsoft.Azure.Documents.Permission"/></remarks>
            <seealso cref="M:System.Uri.EscapeUriString(System.String)"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.UriFactory.CreateStoredProcedureUri(System.String,System.String,System.String)">
            <summary>
            Given a database, collection and stored proc id, this creates a stored proc link.
            </summary>
            <param name="databaseId">The database id</param>
            <param name="collectionId">The collection id</param>
            <param name="storedProcedureId">The stored procedure id</param>
            <returns>
            A stored procedure link in the format of /dbs/{0}/colls/{1}/sprocs/{2}/ with {0} being a Uri escaped version of the <paramref name="databaseId"/>, {1} being <paramref name="collectionId"/> and {2} being the <paramref name="storedProcedureId"/>
            </returns>
            <remarks>Would be used when replacing, executing, or deleting the <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/></remarks>
            <seealso cref="M:System.Uri.EscapeUriString(System.String)"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.UriFactory.CreateTriggerUri(System.String,System.String,System.String)">
            <summary>
            Given a database, collection and trigger id, this creates a trigger link.
            </summary>
            <param name="databaseId">The database id</param>
            <param name="collectionId">The collection id</param>
            <param name="triggerId">The trigger id</param>
            <returns>
            A trigger link in the format of /dbs/{0}/colls/{1}/triggers/{2}/ with {0} being a Uri escaped version of the <paramref name="databaseId"/>, {1} being <paramref name="collectionId"/> and {2} being the <paramref name="triggerId"/>
            </returns>
            <remarks>Would be used when replacing, executing, or deleting the <see cref="T:Microsoft.Azure.Documents.Trigger"/></remarks>
            <seealso cref="M:System.Uri.EscapeUriString(System.String)"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.UriFactory.CreateUserDefinedFunctionUri(System.String,System.String,System.String)">
            <summary>
            Given a database, collection and udf id, this creates a udf link.
            </summary>
            <param name="databaseId">The database id</param>
            <param name="collectionId">The collection id</param>
            <param name="udfId">The udf id</param>
            <returns>
            A udf link in the format of /dbs/{0}/colls/{1}/udfs/{2}/ with {0} being a Uri escaped version of the <paramref name="databaseId"/>, {1} being <paramref name="collectionId"/> and {2} being the <paramref name="udfId"/>
            </returns>
            <remarks>Would be used when replacing, executing, or deleting the <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/></remarks>
            <seealso cref="M:System.Uri.EscapeUriString(System.String)"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.UriFactory.CreateConflictUri(System.String,System.String,System.String)">
            <summary>
            Given a database, collection and conflict id, this creates a conflict link.
            </summary>
            <param name="databaseId">The database id</param>
            <param name="collectionId">The collection id</param>
            <param name="conflictId">The conflict id</param>
            <returns>
            A conflict link in the format of /dbs/{0}/colls/{1}/conflicts/{2}/ with {0} being a Uri escaped version of the <paramref name="databaseId"/>, {1} being <paramref name="collectionId"/> and {2} being the <paramref name="conflictId"/>
            </returns>
            <seealso cref="M:System.Uri.EscapeUriString(System.String)"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.UriFactory.CreateAttachmentUri(System.String,System.String,System.String,System.String)">
            <summary>
            Given a database, collection, document, and attachment id, this creates an attachment link.
            </summary>
            <param name="databaseId">The database id</param>
            <param name="collectionId">The collection id</param>
            <param name="documentId">The document id</param>
            <param name="attachmentId">The attachment id</param>
            <returns>
            An attachment link in the format of /dbs/{0}/colls/{1}/docs/{2}/attachments/{3} with {0} being a Uri escaped version of the <paramref name="databaseId"/>, {1} being <paramref name="collectionId"/>, {2} being the <paramref name="documentId"/> and {3} being <paramref name="attachmentId"/>
            </returns>
            <remarks>Would be used when replacing, or deleting the <see cref="T:Microsoft.Azure.Documents.Attachment"/></remarks>
            <seealso cref="M:System.Uri.EscapeUriString(System.String)"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.ResourceThrottleRetryPolicy.ShouldRetry(System.Exception,System.TimeSpan@,System.Exception@)">
            <summary> 
            Should the caller retry the operation.
            </summary>
            <param name="exception">Exception that occured when the operation was tried</param>
            <param name="retryDelay">Duration to wait before the operation is retried</param>
            <param name="exceptionToThrow">Translated exception the caller should throw when not asked to retry</param>
            <returns>True indicates caller should retry, False otherwise</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.ResourceThrottleRetryPolicy.CheckIfRetryNeeded(System.Exception,System.TimeSpan@)">
            <summary>
            Returns True if the given exception <paramref name="exception"/> is retriable
            </summary>
            <param name="exception">Exception to examine</param>
            <param name="retryDelay">retryDelay</param>
            <returns>True if the exception is retriable; False otherwise</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.ResourceTypeExtensions.IsPartitioned(Microsoft.Azure.Documents.ResourceType)">
            <summary>
            Resources for which this method returns true, are spread between multiple
            partitions.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.ReadPolicy.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ReadPolicy.PrimaryReadCoefficient">
            <summary>
            Relative weight of primary to serve read requests. Higher the value, it is preferred to issue reads to primary.
            Direct connectivity client can use this value to dynamically decide where to send reads to effectively use the service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ReadPolicy.SecondaryReadCoefficient">
            <summary>
            Relative weight of secondary to serve read requests. Higher the value, it is preferred to issue reads to secondary.
            Direct connectivity client can use this value to dynamically decide where to send reads to effectively use the service.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.SqlParameter">
            <summary>
            Represents a parameter associated with <see cref="T:SqlQuerySpec"/>.
            </summary> 
            <remarks>
            DocumentDB SQL parameters are name-value pairs referenced in parameterized queries. 
            Unlike in relation SQL databases, they don't have types associated with them.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.SqlParameter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SqlParameter"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.SqlParameter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlParameter"/> class with the name of the parameter.
            </summary>
            <param name="name">The name of the parameter.</param>
            <remarks>Names of parameters must begin with '@' and be a valid SQL identifier.</remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.SqlParameter.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlParameter"/> class with the name and value of the parameter.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <remarks>Names of parameters must begin with '@' and be a valid SQL identifier. The value gets serialized and passed in as JSON to the document query.</remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.SqlParameter.Name">
            <summary>
            Gets or sets the name of the parameter.
            </summary>
            <value>The name of the parameter.</value>
            <remarks>Names of parameters must begin with '@' and be a valid SQL identifier.</remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.SqlParameter.Value">
            <summary>
            Gets or sets the value of the parameter.
            </summary>
            <value>The value of the parameter.</value>
            <remarks>The value gets serialized and passed in as JSON to the document query.</remarks>
        </member>
        <member name="T:Microsoft.Azure.Documents.SqlParameterCollection">
            <summary>
            Represents a collection of parameters associated with <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.SqlParameterCollection.#ctor">
            <summary>
            Initialized a new instance of the SqlParameterCollection class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.SqlParameterCollection.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Azure.Documents.SqlParameter})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.SqlParameterCollection"/> class.
            </summary>
            <param name="parameters">The collection of parameters.</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.SqlParameterCollection.IndexOf(Microsoft.Azure.Documents.SqlParameter)">
            <summary>
            Determines the index of a specific item.
            </summary> 
            <param name="item">The item to find.</param>
            <returns>The index value for the item.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.SqlParameterCollection.Insert(System.Int32,Microsoft.Azure.Documents.SqlParameter)">
            <summary>
            Inserts an item at the specified index.
            </summary>
            <param name="index">The location in the index array in which to start inserting elements.</param>
            <param name="item">The item to copy into the index.</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.SqlParameterCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">The location in the index where the item will be removed from.</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.SqlParameterCollection.Add(Microsoft.Azure.Documents.SqlParameter)">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="item">The item to add to the collection.</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.SqlParameterCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.SqlParameterCollection.Contains(Microsoft.Azure.Documents.SqlParameter)">
            <summary>
            Determines whether the collection contains a specific value.
            </summary>
            <param name="item">The value to search for.</param>
            <returns>true if the collection contains a specific value; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.SqlParameterCollection.CopyTo(Microsoft.Azure.Documents.SqlParameter[],System.Int32)">
            <summary>
            Copies the elements of the collection to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.</summary>
            <param name="array">The array to copy into.</param>
            <param name="arrayIndex">The location in the index array in which to start adding elements.</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.SqlParameterCollection.Remove(Microsoft.Azure.Documents.SqlParameter)">
            <summary>
            /// Removes the first occurrence of a specific object from the collection.
            </summary>
            <param name="item">
            The item to remove from the collection.
            </param>
            <returns>true if the first item was removed; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.SqlParameterCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator for the collection.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.SqlParameterCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator to iterate through the collection. </returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.SqlParameterCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The location in the index.</param>
            <value>The element at the specified index.</value>
        </member>
        <member name="P:Microsoft.Azure.Documents.SqlParameterCollection.Count">
            <summary>
            Gets the number of elements contained in collection.
            </summary>
            <value>The number of elements contained in the collection.</value>
        </member>
        <member name="P:Microsoft.Azure.Documents.SqlParameterCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
            <value>true if the collection is read-only; otherwise, false.</value>
        </member>
        <member name="T:Microsoft.Azure.Documents.SqlQuerySpec">
            <summary>
            Represents the DocumentDB SQL query.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.SqlQuerySpec.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec"/> class.</summary>
            <remarks> 
            The default constructor initializes any fields to their default values.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.SqlQuerySpec.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec"/> class.
            </summary>
            <param name="queryText">The text of the query.</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.SqlQuerySpec.#ctor(System.String,Microsoft.Azure.Documents.SqlParameterCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec"/> class.
            </summary>
            <param name="queryText">The text of the query.</param>
            <param name="parameters">The <see cref="T:Microsoft.Azure.Documents.SqlParameterCollection"/> instance, which represents the collection of query parameters.</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.SqlQuerySpec.ShouldSerializeParameters">
            <summary>
            Returns a value that indicates whether the <see cref="P:Microsoft.Azure.Documents.SqlQuerySpec.Parameters"/> property should be serialized.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.SqlQuerySpec.QueryText">
            <summary>
            Gets or sets the text of the query.
            </summary>
            <value>The text of the query.</value>
        </member>
        <member name="P:Microsoft.Azure.Documents.SqlQuerySpec.Parameters">
            <summary>
            Gets or sets the <see cref="T:Microsoft.Azure.Documents.SqlParameterCollection"/> instance, which represents the collection of query parameters.
            </summary>
            <value>The <see cref="T:Microsoft.Azure.Documents.SqlParameterCollection"/> instance.</value>
        </member>
        <member name="T:Microsoft.Azure.Documents.Routing.PartitionKeyComponentType">
            <summary>
            Types of partition key component
            </summary> 
            <remarks>
            Some of the values might not be used, but this class to be consistent with the backend enum
            </remarks>
        </member>
        <member name="T:Microsoft.Azure.Documents.Routing.IRoutingMapProvider">
            <summary>
            Routing map provider provides list of effective partition key ranges for a collection.
            Implemented by <see cref="T:Microsoft.Azure.Documents.Routing.GatewayAddressCache"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Routing.IRoutingMapProvider.GetCollectionRoutingMapAsync(System.String)">
            <summary>
            Returns list of effective partition key ranges for a collection.
            </summary>
            <param name="collectionIdOrNameBasedLink">Collection for which to retrieve routing map.</param>
            <returns>List of effective partition key ranges for a collection.</returns>
        </member>
        <member name="T:Microsoft.Azure.Documents.Routing.PartitionKeyInternal">
            <summary>
            Schema-less Partition Key value.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Routing.PartitionKeyInternal.FromObjectArray(System.Collections.Generic.IEnumerable{System.Object},System.Boolean)">
            <summary>
            Constructs instance of <see cref="T:Microsoft.Azure.Documents.Routing.PartitionKeyInternal"/> from enumerable of objects.
            </summary>
            <param name="values">Partition key component values.</param>
            <param name="strict">If this is false, unsupported component values will be repliaced with 'Undefined'. If this is true, exception will be thrown.</param>
            <returns>Instance of <see cref="T:Microsoft.Azure.Documents.Routing.PartitionKeyInternal"/>.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Routing.PartitionKeyInternal.GetEffectivePartitionKey(Microsoft.Azure.Documents.PartitionKeyDefinition)">
            <summary>
            Produces effective value. DocumentDB has global index on effective partition key values.
            
            Effective value is produced by applying is range or hash encoding to all the component values, based
            on partition key definition.
            
            String components are hashed and converted to number components.
            Number components are hashed and remain number component.
            bool, null, undefined remain unhashed, because indexing policy doesn't specify index type for these types.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Routing.PartitionKeyRange.PartitionKeyRangeId">
            <summary>
            Unique identifier of range within collection.
            If a range is split, child ranges will get new range ids.
            If some range is merged into another range, the other range will get new range id.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Routing.PathParser.GetPathParts(System.String)">
            <summary>
            Extract parts from path
            </summary>
            <remarks>
            This code doesn't do as much validation as the backend, as it assumes that IndexingPolicy path coming from the backend is valid.
            </remarks>
            <param name="path">A path string</param>
            <returns>An array of parts of path</returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.ResourceId.UniqueDocumentCollectionId">
            <summary>
            Unique (across all databases) Id for the DocumentCollection.
            First 4 bytes are DatabaseId and next 4 bytes are CollectionId.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.SecureStringUtility">
            <summary>
            Utility for converting string to SecureString.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.SecureStringUtility.ConvertToSecureString(System.String)">
            <summary>
            Converts a unsecure string into a SecureString.
            </summary>
            <param name="unsecureStr">the string to convert.</param>
            <returns>the resulting SecureString</returns>
        </member>
        <member name="T:Microsoft.Azure.Documents.SecureStringHMACSHA256Helper">
            <summary>
            Manufactures SHA256 HMACs of byte payloads using a key. The key is a Base64-encoded SecureString.
            In keeping with the goals of SecureString, neither the original Base64 characters nor the decoded 
            bytes ever enters the managed heap, and they are kept decrypted in native memory for as short a 
            time as possible: just the duration of a single ComputeHash call.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.SecureStringHMACSHA256Helper.ComputeHash(System.Byte[])">
            <summary>
            Decode the SecureString containing the Base64-encoded key into native memory, compute the
            SHA256 HMAC of the payload, and destroy the native memory containing the decoded key.
            </summary>
            <param name="bytesToHash">payload that is hashed</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Azure.Documents.Undefined">
            <summary>
            Instance of the class can be supplied as part of Partition Key Value to denote a value which is absent in the document.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.Undefined.Value">
            <summary>
            <see cref="T:Microsoft.Azure.Documents.Undefined"/> singleton to help reuse the object.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Undefined.Equals(Microsoft.Azure.Documents.Undefined)">
            <summary>
            Determines whether <paramref name="other"/> is <see cref="T:Microsoft.Azure.Documents.Undefined"/>.
            </summary>
            <returns>
            true if the specified object is equal to the current object; otherwise, false.
            </returns>
            <param name="other">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Undefined.Equals(System.Object)">
            <summary>
            Determines whether other is <see cref="T:Microsoft.Azure.Documents.Undefined"/>.
            </summary>
            <returns>
            true if the specified object is equal to the current object; otherwise, false.
            </returns>
            <param name="other">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Undefined.GetHashCode">
            <summary>
            Serves as a hash function for the <see cref="T:Microsoft.Azure.Documents.Undefined"/> type.
            </summary>
            <returns>
            A hash code value.
            </returns>
        </member>
        <member name="T:Microsoft.Azure.Documents.StoreClient">
            <summary>
            Instantiated to issue direct connectivity requests to the backend on:
                - Gateway (for gateway mode clients)
                - Client (for direct mode clients)
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.PartitionKeyDefinition">
            <summary> 
            Specifies a partition key definition for a particular path.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.PartitionKeyDefinition.Paths">
            <summary>
            Gets or sets the paths to be partitioned.
            </summary>
            <value>
            The path to be partitioned.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.PartitionKeyDefinition.Kind">
            <summary>
            Gets or sets the kind of partitioning to be applied.
            </summary>
            <value>
            One of the values of the <see cref="T:Microsoft.Azure.Documents.PartitionKind"/> enumeration.
            </value>
        </member>
        <member name="T:Microsoft.Azure.Documents.PartitionKey">
            <summary>
            Represents a partition key value that identifies the target partion of a collection.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.PartitionKey.#ctor">
            <summary>
            Instantiate a new instance of the <see cref="T:Microsoft.Azure.Documents.PartitionKey"/> object.
            </summary>
            <remarks>
            Private constructor used internal to create an instance from a JSON string.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.PartitionKey.#ctor(System.Object)">
            <summary>
            Instantiate a new instance of the <see cref="T:Microsoft.Azure.Documents.PartitionKey"/> object.
            </summary>
            <param name="keyValue">
            The value of the document property that is specified as the partition key when a collection is created.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.PartitionKey.FromJsonString(System.String)">
            <summary>
            Instantiate a new instance of the <see cref="T:Microsoft.Azure.Documents.PartitionKey"/> object.
            </summary>
            <param name="keyValue">
            The value of the document property that is specified as the partition key
            when a collection is created, in serialized JSON form.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.PartitionKey.ToString">
            <summary>
            Override the base ToString method to output the value of each key component, separated by a space.
            </summary>
            <returns>The string representation of all the key component values.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.PartitionKey.Equals(System.Object)">
            <summary>
            Overrides the Equal operator for object comparisons between two instances of <see cref="T:Microsoft.Azure.Documents.PartitionKey"/>.
            </summary>
            <param name="other">The object to compare with.</param>
            <returns>True if two object instance are considered equal.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.PartitionKey.GetHashCode">
            <summary>
            Hash function to return the hash code for the object.
            </summary>
            <returns>The hash code for this <see cref="T:Microsoft.Azure.Documents.PartitionKey"/> instance</returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.PartitionKey.InternalKey">
            <summary>
            Gets the internal <see cref="T:Microsoft.Azure.Documents.Routing.PartitionKeyInternal"/> object;
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.PartitionKind">
            <summary>
            These are the partitioning types available for a partition key definition.
            </summary> 
            <remarks>Only PartitionKind.Hash is supported at this time.</remarks>
        </member>
        <member name="F:Microsoft.Azure.Documents.PartitionKind.Hash">
            <summary>
            The partition key definition path is hashed.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.PartitionKind.Range">
            <summary>
            The partition key definition path is ordered.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.Spatial.BoundingBox">
            <summary>
            Represents a coordinate range for geometries.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.BoundingBox.#ctor(Microsoft.Azure.Documents.Spatial.Position,Microsoft.Azure.Documents.Spatial.Position)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.BoundingBox"/> class.
            </summary>
            <param name="min">
            Lowest values for all axes of the bounding box.
            </param>
            <param name="max">
            Highest values for all axes of the bounding box.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.BoundingBox.Equals(Microsoft.Azure.Documents.Spatial.BoundingBox)">
            <summary>
            Determines if this <see cref="T:Microsoft.Azure.Documents.Spatial.BoundingBox"/> is equal to the <paramref name="other"/>.
            </summary>
            <param name="other"><see cref="T:Microsoft.Azure.Documents.Spatial.BoundingBox"/> to compare to this bounding box.</param>
            <returns><c>true</c> if bounding boxes are equal. <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.BoundingBox.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Azure.Documents.Spatial.BoundingBox"/> is equal to the current <see cref="T:Microsoft.Azure.Documents.Spatial.BoundingBox"/>.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.BoundingBox.GetHashCode">
            <summary>
            Serves as a hash function for <see cref="T:Microsoft.Azure.Documents.Spatial.BoundingBox"/> type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:Microsoft.Azure.Documents.Spatial.BoundingBox"/>.
            </returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.BoundingBox.Min">
            <summary>
            Gets lowest values for all axes of the bounding box.
            </summary>
            <value>
            Lowest values for all axes of the bounding box.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.BoundingBox.Max">
            <summary>
            Gets highest values for all axes of the bounding box.
            </summary>
            <value>
            Highest values for all axes of the bounding box.
            </value>
        </member>
        <member name="T:Microsoft.Azure.Documents.Spatial.Converters.BoundingBoxJsonConverter">
            <summary>
            <see cref="T:Newtonsoft.Json.JsonConverter"/> for <see cref="T:Microsoft.Azure.Documents.Spatial.BoundingBox"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Converters.BoundingBoxJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The existingValue.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Converters.BoundingBoxJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing existingValue of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            Deserialized object.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Converters.BoundingBoxJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Microsoft.Azure.Documents.Spatial.Converters.CrsJsonConverter">
            <summary>
            <see cref="T:Newtonsoft.Json.JsonConverter"/> for <see cref="T:Microsoft.Azure.Documents.Spatial.Crs"/> class and all its implementations.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Converters.CrsJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Converters.CrsJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            The object value.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Converters.CrsJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Microsoft.Azure.Documents.Spatial.Converters.GeometryJsonConverter">
            <summary>
            Converter for <see cref="T:Microsoft.Azure.Documents.Spatial.Geometry"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Converters.GeometryJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">
            The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.
            </param>
            <param name="value">The existingValue.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Converters.GeometryJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing existingValue of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            Deserialized object.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Converters.GeometryJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.Converters.GeometryJsonConverter.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write JSON.
            </summary>
            <value><c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write JSON; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Microsoft.Azure.Documents.Spatial.Converters.LinearRingJsonConverter">
            <summary>
            <see cref="T:Newtonsoft.Json.JsonConverter"/> for <see cref="T:Microsoft.Azure.Documents.Spatial.LinearRing"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Converters.LinearRingJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The existingValue.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Converters.LinearRingJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing existingValue of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            Deserialized object.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Converters.LinearRingJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Microsoft.Azure.Documents.Spatial.Converters.LineStringCoordinatesJsonConverter">
            <summary>
            <see cref="T:Newtonsoft.Json.JsonConverter"/> for <see cref="T:Microsoft.Azure.Documents.Spatial.LineStringCoordinates"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Converters.LineStringCoordinatesJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The existingValue.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Converters.LineStringCoordinatesJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing existingValue of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            Deserialized object.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Converters.LineStringCoordinatesJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Microsoft.Azure.Documents.Spatial.Converters.PolygonCoordinatesJsonConverter">
            <summary>
            <see cref="T:Newtonsoft.Json.JsonConverter"/> for <see cref="T:Microsoft.Azure.Documents.Spatial.PolygonCoordinates"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Converters.PolygonCoordinatesJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The existingValue.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Converters.PolygonCoordinatesJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing existingValue of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            Deserialized object.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Converters.PolygonCoordinatesJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Microsoft.Azure.Documents.Spatial.Converters.PositionJsonConverter">
            <summary>
            Converter for <see cref="T:Microsoft.Azure.Documents.Spatial.Position"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Converters.PositionJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">
            The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.
            </param>
            <param name="value">The existingValue.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Converters.PositionJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing existingValue of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            Deserialized object.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Converters.PositionJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Microsoft.Azure.Documents.Spatial.Crs">
            <summary>
            Represents Coordinate Reference System.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Crs.#ctor(Microsoft.Azure.Documents.Spatial.CrsType)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.Crs"/> class.
            </summary>
            <param name="type">
            CRS type.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Crs.Named(System.String)">
            <summary>
            Creates named CRS with the name specified.
            </summary>
            <param name="name">CRS name.</param>
            <returns>Instance of <see cref="T:Microsoft.Azure.Documents.Spatial.Crs"/> class.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Crs.Linked(System.String)">
            <summary>
            Creates linked CRS.
            </summary>
            <param name="href">
            CRS link.
            </param>
            <returns>
            Instance of <see cref="T:Microsoft.Azure.Documents.Spatial.Crs"/> class.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Crs.Linked(System.String,System.String)">
            <summary>
            Creates linked CRS with the optional type specified.
            </summary>
            <param name="href">
            CRS link.
            </param>
            <param name="type">
            CRS link type.
            </param>
            <returns>
            Instance of <see cref="T:Microsoft.Azure.Documents.Spatial.Crs"/> class.
            </returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.Crs.Default">
            <summary>
            Gets default CRS. Default CRS is named CRS with the name "urn:ogc:def:crs:OGC:1.3:CRS84".
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.Crs.Unspecified">
            <summary>
            Gets "Unspecified" CRS. No CRS can be assumed for Geometries having "Unspecified" CRS.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.Crs.Type">
            <summary>
            Gets CRS type.
            </summary>
            <value>
            Type of CRS.
            </value>
        </member>
        <member name="T:Microsoft.Azure.Documents.Spatial.CrsType">
            <summary>
            Type of Coordinate Reference System.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.Spatial.CrsType.Named">
            <summary>
            Coordinate Reference System is specified by name.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.Spatial.CrsType.Linked">
            <summary>
            Coordinate Reference System is specified by link.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.Spatial.CrsType.Unspecified">
            <summary>
            No Coordinate Reference System can be assumed for a geometry.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.Spatial.Geometry">
            <summary>
            Base class for spatial geometry objects.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Geometry.#ctor(Microsoft.Azure.Documents.Spatial.GeometryType,Microsoft.Azure.Documents.Spatial.GeometryParams)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.Geometry"/> class.
            </summary>
            <param name="type">
            Geometry type.
            </param>
            <param name="geometryParams">
            Coordinate reference system, additional properties etc.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Geometry.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Azure.Documents.Spatial.Geometry"/> is equal to the current <see cref="T:Microsoft.Azure.Documents.Spatial.Geometry"/>.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Geometry.GetHashCode">
            <summary>
            Serves as a hash function for the <see cref="T:Microsoft.Azure.Documents.Spatial.Geometry"/> type.
            </summary>
            <returns>
            A hash code for the current geometry.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Geometry.Equals(Microsoft.Azure.Documents.Spatial.Geometry)">
            <summary>
            Determines if this <see cref="T:Microsoft.Azure.Documents.Spatial.Geometry"/> is equal to the <paramref name="other"/>.
            </summary>
            <param name="other"><see cref="T:Microsoft.Azure.Documents.Spatial.Geometry"/> to compare to this <see cref="T:Microsoft.Azure.Documents.Spatial.Geometry"/>.</param>
            <returns><c>true</c> if geometries are equal. <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.Geometry.Crs">
            <summary>
            Gets the Coordinate Reference System for this geometry.
            </summary>
            <value>
            The Coordinate Reference System for this geometry.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.Geometry.Type">
            <summary>
            Gets geometry type.
            </summary>
            <value>
            Type of geometry.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.Geometry.BoundingBox">
            <summary>
            Gets bounding box for this geometry.
            </summary>
            <value>
            Bounding box of the geometry.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.Geometry.AdditionalProperties">
            <summary>
            Gets additional properties.
            </summary>
            <value>
            Additional geometry properties.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.Geometry.CrsForSerialization">
            <summary>
            Gets or sets CRS value used for serialization.
            </summary>
            <remarks>
            This is artificial property needed for serialization. If CRS is default one, we don't want
            to serialize anything.
            </remarks>
        </member>
        <member name="T:Microsoft.Azure.Documents.Spatial.GeometryCollection">
            <summary>
            Represents a geometry consisting of other geometries.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.GeometryCollection.#ctor(System.Collections.Generic.IList{Microsoft.Azure.Documents.Spatial.Geometry})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.GeometryCollection"/> class. 
            </summary>
            <param name="geometries">
            List of geometries.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.GeometryCollection.#ctor(System.Collections.Generic.IList{Microsoft.Azure.Documents.Spatial.Geometry},Microsoft.Azure.Documents.Spatial.GeometryParams)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.GeometryCollection"/> class.
            </summary>
            <param name="geometries">
            Child geometries.
            </param>
            <param name="geometryParams">
            Additional geometry parameters.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.GeometryCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.GeometryCollection"/> class.
            </summary>
            <remarks>
            This constructor is used only during deserialization.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.GeometryCollection.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Azure.Documents.Spatial.GeometryCollection"/> is equal to the current <see cref="T:Microsoft.Azure.Documents.Spatial.GeometryCollection"/>.
            </summary>
            <returns>
            true if the specified object is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.GeometryCollection.GetHashCode">
            <summary>
            Serves as a hash function for the <see cref="T:Microsoft.Azure.Documents.Spatial.GeometryCollection"/> type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:Microsoft.Azure.Documents.Spatial.GeometryCollection"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.GeometryCollection.Equals(Microsoft.Azure.Documents.Spatial.GeometryCollection)">
            <summary>
            Determines if this <see cref="T:Microsoft.Azure.Documents.Spatial.GeometryCollection"/> is equal to the <paramref name="other"/>.
            </summary>
            <param name="other"><see cref="T:Microsoft.Azure.Documents.Spatial.GeometryCollection"/> to compare to this <see cref="T:Microsoft.Azure.Documents.Spatial.GeometryCollection"/>.</param>
            <returns><c>true</c> if geometry collections are equal. <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.GeometryCollection.Geometries">
            <summary>
            Gets child geometries.
            </summary>
            <value>
            Child geometries.
            </value>
        </member>
        <member name="T:Microsoft.Azure.Documents.Spatial.GeometryOperationExtensions">
            <summary>
            Operations supported on <see cref="T:Microsoft.Azure.Documents.Spatial.Geometry"/> type. These operations are to be used in LINQ expressions only
            and will be evaluated on server. There's no implementation provided in the client library.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.GeometryOperationExtensions.Distance(Microsoft.Azure.Documents.Spatial.Geometry,Microsoft.Azure.Documents.Spatial.Geometry)">
            <summary>
            Distance in meters between two geometries.
            </summary>
            <param name="from">First <see cref="T:Microsoft.Azure.Documents.Spatial.Geometry"/>.</param>
            <param name="to">Second <see cref="T:Microsoft.Azure.Documents.Spatial.Geometry"/>.</param>
            <returns>Returns distance in meters between two geometries.</returns>
            <remarks>
            Today this function support only geometries of <see cref="F:Microsoft.Azure.Documents.Spatial.GeometryType.Point"/> type.
            </remarks>
            <example>
            <code>
            <![CDATA[
            var distanceQuery = documents.Where(document => document.Location.Distance(new Point(20.1, 20)) < 20000);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.GeometryOperationExtensions.Within(Microsoft.Azure.Documents.Spatial.Geometry,Microsoft.Azure.Documents.Spatial.Geometry)">
            <summary>
            Determines if <paramref name="inner"/> <see cref="T:Microsoft.Azure.Documents.Spatial.Geometry"/> is fully contained inside <paramref name="outer"/> <see cref="T:Microsoft.Azure.Documents.Spatial.Geometry"/>.
            </summary>
            <param name="inner">Inner <see cref="T:Microsoft.Azure.Documents.Spatial.Geometry"/>.</param>
            <param name="outer">Outer <see cref="T:Microsoft.Azure.Documents.Spatial.Geometry"/>.</param>
            <returns>
            <c>true</c> if <paramref name="inner"/> <see cref="T:Microsoft.Azure.Documents.Spatial.Geometry"/> is fully contained inside <paramref name="outer"/> <see cref="T:Microsoft.Azure.Documents.Spatial.Geometry"/>.
            <c>false</c> otherwise.
            </returns>
            <remarks>
            Currently this function supports <paramref name="inner"/> geometry of type <see cref="F:Microsoft.Azure.Documents.Spatial.GeometryType.Point"/> and outer geometry of type <see cref="F:Microsoft.Azure.Documents.Spatial.GeometryType.Polygon"/>.
            </remarks>
            <example>
            <code>
            <![CDATA[
            Polygon polygon = new Polygon(
                   new[]
                   {
                        new Position(10, 10),
                        new Position(30, 10),
                        new Position(30, 30),
                        new Position(10, 30),
                        new Position(10, 10)
                   });
            var withinQuery = documents.Where(document => document.Location.Within(polygon));
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.GeometryOperationExtensions.IsValid(Microsoft.Azure.Documents.Spatial.Geometry)">
            <summary>
            <para>
            Determines if the <paramref name="geometry"/> specified is valid and can be indexed
            or used in queries by DocumentDB.
            </para>
            <para>
            If a geometry is not valid, it will not be indexed. Also during query time invalid geometries are equivalent to <c>undefined</c>.
            </para>
            </summary>
            <param name="geometry">The geometry to check for validity.</param>
            <returns><c>true</c> if geometry is valid. <c>false</c> otherwise.</returns>
            <remarks>
            Currently this function supports <paramref name="geometry"/> of type <see cref="F:Microsoft.Azure.Documents.Spatial.GeometryType.Point"/> and <see cref="F:Microsoft.Azure.Documents.Spatial.GeometryType.Polygon"/>.
            </remarks>
            <example>
            <para>
            This example select all the documents which contain invalid geometries which were not indexed.
            </para>
            <code>
            <![CDATA[
            var invalidDocuments = documents.Where(document => !document.Location.IsValid());
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.GeometryOperationExtensions.IsValidDetailed(Microsoft.Azure.Documents.Spatial.Geometry)">
            <summary>
            <para>
            Determines if the <paramref name="geometry"/> specified is valid and can be indexed
            or used in queries by DocumentDB.
            </para>
            <para>
            If a geometry is not valid, it will not be indexed. Also during query time invalid geometries are equivalent to <c>undefined</c>.
            </para>
            </summary>
            <param name="geometry">The geometry to check for validity.</param>
            <returns>Instance of <see cref="T:Microsoft.Azure.Documents.Spatial.GeometryValidationResult"/>.</returns>
            <remarks>
            Currently this function supports <paramref name="geometry"/> of type <see cref="F:Microsoft.Azure.Documents.Spatial.GeometryType.Point"/> and <see cref="F:Microsoft.Azure.Documents.Spatial.GeometryType.Polygon"/>.
            </remarks>
            <example>
            <para>
            This example select all the documents which contain invalid geometries which were not indexed.
            </para>
            <code>
            <![CDATA[
            var invalidReason = documents.Where(document => !document.Location.IsValid()).Select(document => document.Location.IsValidDetailed());
            ]]>
            </code>
            </example>
        </member>
        <member name="T:Microsoft.Azure.Documents.Spatial.GeometryParams">
            <summary>
            Not frequently used geometry parameters.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.GeometryParams.AdditionalProperties">
            <summary>
            Gets or sets any additional properties to be stored as part of a geometry.
            </summary>
            <value>
            Additional geometry properties.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.GeometryParams.Crs">
            <summary>
            Gets or sets Coordinate Reference System for the geometry.
            </summary>
            <value>
            Coordinate Reference System for the geometry.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.GeometryParams.BoundingBox">
            <summary>
            Gets or sets a bounding box for the geometry.
            </summary>
            <value>
            Bounding box for the geometry.
            </value>
        </member>
        <member name="T:Microsoft.Azure.Documents.Spatial.GeometryType">
            <summary>
            Geometry type.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.Spatial.GeometryType.Point">
            <summary>
            Represents single point.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.Spatial.GeometryType.MultiPoint">
            <summary>
            Represents geometry consisting of several points.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.Spatial.GeometryType.LineString">
            <summary>
            Sequence of connected line segments.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.Spatial.GeometryType.MultiLineString">
            <summary>
            Geometry consisting of several LineStrings.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.Spatial.GeometryType.Polygon">
            <summary>
            Represents a polygon with optional holes.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.Spatial.GeometryType.MultiPolygon">
            <summary>
            Represents a geometry comprised of several polygons.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.Spatial.GeometryType.GeometryCollection">
            <summary>
            Represents a geometry comprised of other geometries.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.Spatial.GeometryValidationResult">
            <summary>
            <para>
            Return value of <see cref="M:Microsoft.Azure.Documents.Spatial.GeometryOperationExtensions.IsValidDetailed(Microsoft.Azure.Documents.Spatial.Geometry)"/>.
            </para>
            <para>
            Contains detailed description why a geometyr is invalid.
            </para>
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.GeometryValidationResult.IsValid">
            <summary>
            Returns a value indicating whether geometry for which <see cref="M:Microsoft.Azure.Documents.Spatial.GeometryOperationExtensions.IsValidDetailed(Microsoft.Azure.Documents.Spatial.Geometry)"/>
            was called is valid or not.
            </summary>
            <value>
            <c>true</c> if geometry for which <see cref="M:Microsoft.Azure.Documents.Spatial.GeometryOperationExtensions.IsValidDetailed(Microsoft.Azure.Documents.Spatial.Geometry)"/> was called is valid. <c>false</c> otherwise.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.GeometryValidationResult.Reason">
            <summary>
            If geometry is invalid, returns detailed reason.
            </summary>
            <value>
            Description why a geometry is invalid.
            </value>
        </member>
        <member name="T:Microsoft.Azure.Documents.Spatial.LinearRing">
            <summary>
            A <see cref="T:Microsoft.Azure.Documents.Spatial.LinearRing"/> is closed LineString with 4 or more positions. The first and last positions are
            equivalent (they represent equivalent points).
            Though a <see cref="T:Microsoft.Azure.Documents.Spatial.LinearRing"/> is not explicitly represented as a GeoJSON geometry type, it is referred to in
            the <see cref="T:Microsoft.Azure.Documents.Spatial.Polygon"/> geometry type definition.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.LinearRing.#ctor(System.Collections.Generic.IList{Microsoft.Azure.Documents.Spatial.Position})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.LinearRing"/> class.
            </summary>
            <param name="coordinates">
            The coordinates. 4 or more positions. The first and last positions are equivalent (they represent equivalent
            points).
            </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.LinearRing.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Azure.Documents.Spatial.LinearRing"/> is equal to the current <see cref="T:Microsoft.Azure.Documents.Spatial.LinearRing"/>.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.LinearRing.GetHashCode">
            <summary>
            Serves as a hash function. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:Microsoft.Azure.Documents.Spatial.LinearRing"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.LinearRing.Equals(Microsoft.Azure.Documents.Spatial.LinearRing)">
            <summary>
            Determines if this <see cref="T:Microsoft.Azure.Documents.Spatial.LinearRing"/> is equal to the <paramref name="other"/>.
            </summary>
            <param name="other"><see cref="T:Microsoft.Azure.Documents.Spatial.LinearRing"/> to compare to this one.</param>
            <returns><c>true</c> if linear rings are equal. <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.LinearRing.Positions">
            <summary>
            Gets the <see cref="T:Microsoft.Azure.Documents.Spatial.LinearRing"/> positions.
            </summary>
            <value>
            Positions of the <see cref="T:Microsoft.Azure.Documents.Spatial.LinearRing"/>.
            </value>
        </member>
        <member name="T:Microsoft.Azure.Documents.Spatial.LineString">
            <summary>
            Represents a geometry consisting of connected line segments.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.LineString.#ctor(System.Collections.Generic.IList{Microsoft.Azure.Documents.Spatial.Position})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.LineString"/> class. 
            </summary>
            <param name="coordinates">
            List of positions through which the line string goes.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.LineString.#ctor(System.Collections.Generic.IList{Microsoft.Azure.Documents.Spatial.Position},Microsoft.Azure.Documents.Spatial.GeometryParams)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.LineString"/> class.
            </summary>
            <param name="coordinates">
            The coordinates.
            </param>
            <param name="geometryParams">
            Additional geometry parameters.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.LineString.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.LineString"/> class.
            </summary>
            <remarks>
            This constructor is used only during deserialization.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.LineString.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Azure.Documents.Spatial.LineString"/> is equal to the current <see cref="T:Microsoft.Azure.Documents.Spatial.LineString"/>.
            </summary>
            <returns>
            true if the specified object is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.LineString.GetHashCode">
            <summary>
            Serves as a hash function for the <see cref="T:Microsoft.Azure.Documents.Spatial.LineString"/> type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:Microsoft.Azure.Documents.Spatial.LineString"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.LineString.Equals(Microsoft.Azure.Documents.Spatial.LineString)">
            <summary>
            Determines if this <see cref="T:Microsoft.Azure.Documents.Spatial.LineString"/> is equal to the <paramref name="other"/>.
            </summary>
            <param name="other">LineString to compare to this <see cref="T:Microsoft.Azure.Documents.Spatial.LineString"/>.</param>
            <returns><c>true</c> if line strings are equal. <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.LineString.Positions">
            <summary>
            Gets line string positions.
            </summary>
            <value>
            Positions of the line string.
            </value>
        </member>
        <member name="T:Microsoft.Azure.Documents.Spatial.LineStringCoordinates">
            <summary>
            Line string coordinates.
            </summary>
            <seealso cref="T:Microsoft.Azure.Documents.Spatial.MultiLineString"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.LineStringCoordinates.#ctor(System.Collections.Generic.IList{Microsoft.Azure.Documents.Spatial.Position})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.LineStringCoordinates"/> class.
            </summary>
            <param name="positions">
            Line string positions..
            </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.LineStringCoordinates.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Azure.Documents.Spatial.LineStringCoordinates"/> is equal to the current <see cref="T:Microsoft.Azure.Documents.Spatial.LineStringCoordinates"/>.
            </summary>
            <returns>
            true if the specified object is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.LineStringCoordinates.GetHashCode">
            <summary>
            Serves as a hash function for <see cref="T:Microsoft.Azure.Documents.Spatial.LineStringCoordinates"/>.
            </summary>
            <returns>
            A hash code for the current <see cref="T:Microsoft.Azure.Documents.Spatial.LineStringCoordinates"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.LineStringCoordinates.Equals(Microsoft.Azure.Documents.Spatial.LineStringCoordinates)">
            <summary>
            Determines if this <see cref="T:Microsoft.Azure.Documents.Spatial.LineStringCoordinates"/> is equal to the <paramref name="other"/>.
            </summary>
            <param name="other"><see cref="T:Microsoft.Azure.Documents.Spatial.LineStringCoordinates"/> to compare to this <see cref="T:Microsoft.Azure.Documents.Spatial.LineStringCoordinates"/>.</param>
            <returns><c>true</c> if objects are equal. <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.LineStringCoordinates.Positions">
            <summary>
            Gets line string positions.
            </summary>
            <value>
            Positions of the line string.
            </value>
        </member>
        <member name="T:Microsoft.Azure.Documents.Spatial.LinkedCrs">
            <summary>
            Coordinate Reference System which is identified by link.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.LinkedCrs.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.LinkedCrs"/> class.
            </summary>
            <param name="href">
            Link which identifies the Coordinate Reference System.
            </param>
            <param name="hrefType">
            Optional string which hints at the format used to represent CRS parameters at the provided <paramref name="href"/>.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.LinkedCrs.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Azure.Documents.Spatial.LinkedCrs"/> is equal to the current <see cref="T:Microsoft.Azure.Documents.Spatial.LinkedCrs"/>.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.LinkedCrs.GetHashCode">
            <summary>
            Serves as a hash function for <see cref="T:Microsoft.Azure.Documents.Spatial.LinkedCrs"/>. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:Microsoft.Azure.Documents.Spatial.LinkedCrs"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.LinkedCrs.Equals(Microsoft.Azure.Documents.Spatial.LinkedCrs)">
            <summary>
            Determines if this <see cref="T:Microsoft.Azure.Documents.Spatial.LinkedCrs"/> is equal to <paramref name="other"/>.
            </summary>
            <param name="other"><see cref="T:Microsoft.Azure.Documents.Spatial.LinkedCrs"/> to compare to this <see cref="T:Microsoft.Azure.Documents.Spatial.LinkedCrs"/>.</param>
            <returns><c>true</c> if CRSs are equal. <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.LinkedCrs.Href">
            <summary>
            Gets the link which identifies the Coordinate Reference System.
            </summary>
            <value>
            Link which identifies the Coordinate Reference System.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.LinkedCrs.HrefType">
            <summary>
            Gets optional string which hints at the format used to represent CRS parameters at the provided <see cref="P:Microsoft.Azure.Documents.Spatial.LinkedCrs.Href"/>.
            </summary>
            <value>
            Optional string which hints at the format used to represent CRS parameters at the provided <see cref="P:Microsoft.Azure.Documents.Spatial.LinkedCrs.Href"/>.
            </value>
        </member>
        <member name="T:Microsoft.Azure.Documents.Spatial.MultiLineString">
            <summary>
            Represents a geometry consisting of multiple <see cref="T:Microsoft.Azure.Documents.Spatial.LineString"/>.
            </summary>
            <seealso cref="T:Microsoft.Azure.Documents.Spatial.LineString"/>.
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.MultiLineString.#ctor(System.Collections.Generic.IList{Microsoft.Azure.Documents.Spatial.LineStringCoordinates})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.MultiLineString"/> class. 
            </summary>
            <param name="lineStrings">
            List of <see cref="T:Microsoft.Azure.Documents.Spatial.LineStringCoordinates"/> instances representing individual line strings.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.MultiLineString.#ctor(System.Collections.Generic.IList{Microsoft.Azure.Documents.Spatial.LineStringCoordinates},Microsoft.Azure.Documents.Spatial.GeometryParams)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.MultiLineString"/> class.
            </summary>
            <param name="lineStrings">
            List of <see cref="T:Microsoft.Azure.Documents.Spatial.LineStringCoordinates"/> instances representing individual line strings.
            </param>
            <param name="geometryParams">
            Additional geometry parameters.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.MultiLineString.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.MultiLineString"/> class.
            </summary>
            <remarks>
            This constructor is used only during deserialization.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.MultiLineString.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Azure.Documents.Spatial.MultiLineString"/> is equal to the current <see cref="T:Microsoft.Azure.Documents.Spatial.MultiLineString"/>.
            </summary>
            <returns>
            true if the specified object is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.MultiLineString.GetHashCode">
            <summary>
            Serves as a hash function for the <see cref="T:Microsoft.Azure.Documents.Spatial.MultiLineString"/> type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:Microsoft.Azure.Documents.Spatial.MultiLineString"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.MultiLineString.Equals(Microsoft.Azure.Documents.Spatial.MultiLineString)">
            <summary>
            Determines if this <see cref="T:Microsoft.Azure.Documents.Spatial.MultiLineString"/> is equal to <paramref name="other"/>.
            </summary>
            <param name="other"><see cref="T:Microsoft.Azure.Documents.Spatial.MultiLineString"/> to compare to this <see cref="T:Microsoft.Azure.Documents.Spatial.MultiLineString"/>.</param>
            <returns><c>true</c> if line strings are equal. <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.MultiLineString.LineStrings">
            <summary>
            Gets collection of <see cref="T:Microsoft.Azure.Documents.Spatial.LineStringCoordinates"/> representing individual line strings.
            </summary>
            <value>
            Collection of <see cref="T:Microsoft.Azure.Documents.Spatial.LineStringCoordinates"/> representing individual line strings.
            </value>
        </member>
        <member name="T:Microsoft.Azure.Documents.Spatial.MultiPoint">
            <summary>
            Geometry consisting of several points.
            </summary>
            <seealso cref="T:Microsoft.Azure.Documents.Spatial.Point"/>.
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.MultiPoint.#ctor(System.Collections.Generic.IList{Microsoft.Azure.Documents.Spatial.Position})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.MultiPoint"/> class.
            </summary>
            <param name="points">List of <see cref="T:Microsoft.Azure.Documents.Spatial.Position"/> representing individual points.</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.MultiPoint.#ctor(System.Collections.Generic.IList{Microsoft.Azure.Documents.Spatial.Position},Microsoft.Azure.Documents.Spatial.GeometryParams)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.MultiPoint"/> class.
            </summary>
            <param name="points">
            List of <see cref="T:Microsoft.Azure.Documents.Spatial.Position"/> representing individual points.
            </param>
            <param name="geometryParams">
            Additional geometry parameters.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.MultiPoint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.MultiPoint"/> class.
            </summary>
            <remarks>
            This constructor is used only during deserialization.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.MultiPoint.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Azure.Documents.Spatial.MultiPoint"/> is equal to the current <see cref="T:Microsoft.Azure.Documents.Spatial.MultiPoint"/>.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.MultiPoint.GetHashCode">
            <summary>
            Serves as a hash function for the <see cref="T:Microsoft.Azure.Documents.Spatial.MultiPoint"/> type.
            </summary>
            <returns>
            A hash code for the current geometry.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.MultiPoint.Equals(Microsoft.Azure.Documents.Spatial.MultiPoint)">
            <summary>
            Determines if this <see cref="T:Microsoft.Azure.Documents.Spatial.MultiPoint"/> is equal to <paramref name="other"/>.
            </summary>
            <param name="other"> <see cref="T:Microsoft.Azure.Documents.Spatial.MultiPoint"/> to compare to this <see cref="T:Microsoft.Azure.Documents.Spatial.MultiPoint"/>.</param>
            <returns><c>true</c> if objects are equal. <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.MultiPoint.Points">
            <summary>
            Gets collections of <see cref="T:Microsoft.Azure.Documents.Spatial.Position"/> representing individual points.
            </summary>
            <value>
            Collections of <see cref="T:Microsoft.Azure.Documents.Spatial.Position"/> representing individual points.
            </value>
        </member>
        <member name="T:Microsoft.Azure.Documents.Spatial.MultiPolygon">
            <summary>
            Geometry which is comprised of multiple polygons.
            </summary>
            <seealso cref="T:Microsoft.Azure.Documents.Spatial.Polygon"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.MultiPolygon.#ctor(System.Collections.Generic.IList{Microsoft.Azure.Documents.Spatial.PolygonCoordinates})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.MultiPolygon"/> class.
            </summary>
            <param name="polygons">
            List of <see cref="T:Microsoft.Azure.Documents.Spatial.PolygonCoordinates"/> instances. Each <see cref="T:Microsoft.Azure.Documents.Spatial.PolygonCoordinates"/> represents separate polygon.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.MultiPolygon.#ctor(System.Collections.Generic.IList{Microsoft.Azure.Documents.Spatial.PolygonCoordinates},Microsoft.Azure.Documents.Spatial.GeometryParams)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.MultiPolygon"/> class.
            </summary>
            <param name="polygons">
            List of <see cref="T:Microsoft.Azure.Documents.Spatial.PolygonCoordinates"/> instances. Each <see cref="T:Microsoft.Azure.Documents.Spatial.PolygonCoordinates"/> represents separate polygon.
            </param>
            <param name="geometryParams">Additional geometry parameters.</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.MultiPolygon.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.MultiPolygon"/> class.
            </summary>
            <remarks>
            This constructor is used only during deserialization.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.MultiPolygon.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Azure.Documents.Spatial.MultiPolygon"/> is equal to the current <see cref="T:Microsoft.Azure.Documents.Spatial.MultiPolygon"/>.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.MultiPolygon.GetHashCode">
            <summary>
            Serves as a hash function for the <see cref="T:Microsoft.Azure.Documents.Spatial.MultiPolygon"/> type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:Microsoft.Azure.Documents.Spatial.MultiPolygon"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.MultiPolygon.Equals(Microsoft.Azure.Documents.Spatial.MultiPolygon)">
            <summary>
            Determines if this <see cref="T:Microsoft.Azure.Documents.Spatial.MultiPolygon"/> is equal to <paramref name="other"/>.
            </summary>
            <param name="other"><see cref="T:Microsoft.Azure.Documents.Spatial.MultiPolygon"/> to compare to this <see cref="T:Microsoft.Azure.Documents.Spatial.MultiPolygon"/>.</param>
            <returns><c>true</c> if objects are equal. <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.MultiPolygon.Polygons">
            <summary>
            Gets collection of <see cref="T:Microsoft.Azure.Documents.Spatial.PolygonCoordinates"/> instances. Each <see cref="T:Microsoft.Azure.Documents.Spatial.PolygonCoordinates"/> represents separate polygon.
            </summary>
            <value>
            Collection of <see cref="T:Microsoft.Azure.Documents.Spatial.PolygonCoordinates"/> instances. Each <see cref="T:Microsoft.Azure.Documents.Spatial.PolygonCoordinates"/> represents separate polygon.
            </value>
        </member>
        <member name="T:Microsoft.Azure.Documents.Spatial.NamedCrs">
            <summary>
            Coordinate Reference System which is identified by name.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.NamedCrs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.NamedCrs"/> class.
            </summary>
            <param name="name">
            Name identifying a coordinate reference system.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.NamedCrs.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Azure.Documents.Spatial.NamedCrs"/> is equal to the current <see cref="T:Microsoft.Azure.Documents.Spatial.NamedCrs"/>.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.NamedCrs.GetHashCode">
            <summary>
            Serves as a hash function.
            </summary>
            <returns>
            A hash code for the current <see cref="T:Microsoft.Azure.Documents.Spatial.NamedCrs"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.NamedCrs.Equals(Microsoft.Azure.Documents.Spatial.NamedCrs)">
            <summary>
            Determines if this CRS is equal to <paramref name="other" /> CRS.
            </summary>
            <param name="other">CRS to compare to this CRS.</param>
            <returns><c>true</c> if CRSs are equal. <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.NamedCrs.Name">
            <summary>
            Gets a name identifying a coordinate reference system. For example "urn:ogc:def:crs:OGC:1.3:CRS84".
            </summary>
            <value>
            Name identifying a coordinate reference system. For example "urn:ogc:def:crs:OGC:1.3:CRS84".
            </value>
        </member>
        <member name="T:Microsoft.Azure.Documents.Spatial.Point">
            <summary>
            Point geometry.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Point.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.Point"/> class.
            </summary>
            <param name="longitude">
            Longitude of the point.
            </param>
            <param name="latitude">
            Latitude of the point.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Point.#ctor(Microsoft.Azure.Documents.Spatial.Position)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.Point"/> class.
            </summary>
            <param name="position">
            Position of the point.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Point.#ctor(Microsoft.Azure.Documents.Spatial.Position,Microsoft.Azure.Documents.Spatial.GeometryParams)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.Point"/> class.
            </summary>
            <param name="position">
            Point coordinates.
            </param>
            <param name="geometryParams">
            Additional geometry parameters.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Point.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.Point"/> class.
            </summary>
            <remarks>
            This constructor is used only during deserialization.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Point.Equals(Microsoft.Azure.Documents.Spatial.Point)">
            <summary>
            Determines if this <see cref="T:Microsoft.Azure.Documents.Spatial.Point"/> is equal to <paramref name="other"/>.
            </summary>
            <param name="other"><see cref="T:Microsoft.Azure.Documents.Spatial.Point"/> to compare to this <see cref="T:Microsoft.Azure.Documents.Spatial.Point"/>.</param>
            <returns><c>true</c> if objects are equal. <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Point.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Azure.Documents.Spatial.Point"/> is equal to the current <see cref="T:Microsoft.Azure.Documents.Spatial.Point"/>.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Point.GetHashCode">
            <summary>
            Serves as a hash function for the <see cref="T:Microsoft.Azure.Documents.Spatial.Point"/> type.
            </summary>
            <returns>
            A hash code for the current geometry.
            </returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.Point.Position">
            <summary>
            Gets point coordinates.
            </summary>
            <value>
            Coordinates of the point.
            </value>
        </member>
        <member name="T:Microsoft.Azure.Documents.Spatial.Polygon">
            <summary>
            <para>
            Polygon geometry. 
            </para>
            <para>
            A polygon is represented by the set of "polygon rings". Each ring is closed line string.
            First ring defines external ring. All subsequent rings define "holes" in the external ring.
            </para>
            <para>
            Rings must be specified using Left Hand Rule: traversing the ring in the order of its points, should result
            in internal area of the polygon being to the left side.
            </para>
            </summary>
            <example>
            This example shows how to define a polygon which covers small portion of the Earth:
            <code language="c#">
            <![CDATA[
            var polygon = new Polygon(
                    new[]
                    {
                        new Position(20.0, 20.0),
                        new Position(30.0, 20.0),
                        new Position(30.0, 30.0),
                        new Position(20.0, 30.0)
                        new Position(20.0, 20.0)
                    });
            ]]>        
            </code>
            </example>
            <example>
            This example shows how to define a polygon which covers area more than one hemisphere:
            (Notice that only order of coordinates was reversed).
            <code language="c#">
            <![CDATA[
            var polygon = new Polygon(
                    new[]
                    {
                        new Position(20.0, 20.0),
                        new Position(20.0, 30.0),
                        new Position(30.0, 30.0),
                        new Position(30.0, 20.0)
                        new Position(20.0, 20.0)
                    });
            ]]>        
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Polygon.#ctor(System.Collections.Generic.IList{Microsoft.Azure.Documents.Spatial.Position})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.Polygon"/> class,
            from external ring (the polygon contains no holes).
            </summary>
            <param name="externalRingPositions">
            External polygon ring coordinates.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Polygon.#ctor(System.Collections.Generic.IList{Microsoft.Azure.Documents.Spatial.LinearRing})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.Polygon"/> class.
            </summary>
            <param name="rings">
            <para>
            Polygon rings.
            </para>
            <para>
            First ring is external ring. Following rings define 'holes' in the polygon.
            </para>
            </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Polygon.#ctor(System.Collections.Generic.IList{Microsoft.Azure.Documents.Spatial.LinearRing},Microsoft.Azure.Documents.Spatial.GeometryParams)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.Polygon"/> class.
            </summary>
            <param name="rings">
            Polygon rings.
            </param>
            <param name="geometryParams">
            Additional geometry parameters.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Polygon.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.Polygon"/> class.
            </summary>
            <remarks>
            This constructor is used only during deserialization.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Polygon.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Azure.Documents.Spatial.Polygon"/> is equal to the current <see cref="T:Microsoft.Azure.Documents.Spatial.Polygon"/>.
            </summary>
            <returns>
            true if the specified object is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Polygon.GetHashCode">
            <summary>
            Serves as a hash function for the <see cref="T:Microsoft.Azure.Documents.Spatial.Polygon"/> type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:Microsoft.Azure.Documents.Spatial.Polygon"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Polygon.Equals(Microsoft.Azure.Documents.Spatial.Polygon)">
            <summary>
            Determines if this <see cref="T:Microsoft.Azure.Documents.Spatial.Polygon"/> is equal to the <paramref name="other"/>
            </summary>
            <param name="other"><see cref="T:Microsoft.Azure.Documents.Spatial.Polygon"/> to compare to this <see cref="T:Microsoft.Azure.Documents.Spatial.Polygon"/>.</param>
            <returns><c>true</c> if objects are equal. <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.Polygon.Rings">
            <summary>
            Gets the polygon rings.
            </summary>
            <value>
            Polygon rings.
            </value>
        </member>
        <member name="T:Microsoft.Azure.Documents.Spatial.PolygonCoordinates">
            <summary>
            Polygon coordinates.
            </summary>
            <seealso cref="T:Microsoft.Azure.Documents.Spatial.MultiPolygon"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.PolygonCoordinates.#ctor(System.Collections.Generic.IList{Microsoft.Azure.Documents.Spatial.LinearRing})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.PolygonCoordinates"/> class.
            </summary>
            <param name="rings">
            The rings of the polygon.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.PolygonCoordinates.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Azure.Documents.Spatial.PolygonCoordinates"/> is equal to the current <see cref="T:Microsoft.Azure.Documents.Spatial.PolygonCoordinates"/>.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.PolygonCoordinates.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:Microsoft.Azure.Documents.Spatial.PolygonCoordinates"/>. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.PolygonCoordinates.Equals(Microsoft.Azure.Documents.Spatial.PolygonCoordinates)">
            <summary>
            Determines if this <see cref="T:Microsoft.Azure.Documents.Spatial.PolygonCoordinates"/> is equal to the <paramref name="other"/>.
            </summary>
            <param name="other"><see cref="T:Microsoft.Azure.Documents.Spatial.PolygonCoordinates"/> to compare to this <see cref="T:Microsoft.Azure.Documents.Spatial.PolygonCoordinates"/>.</param>
            <returns><c>true</c> if objects are equal. <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.PolygonCoordinates.Rings">
            <summary>
            Gets polygon rings.
            </summary>
            <value>
            Rings of the polygon.
            </value>
        </member>
        <member name="T:Microsoft.Azure.Documents.Spatial.Position">
            <summary>
            <para>
            A position is represented by an array of numbers. There must be at least two elements, and may be more.
            </para>
            <para>
            The order of elements must follow longitude, latitude, altitude.
            Any number of additional elements are allowed - interpretation and meaning of additional elements is up to the application.
            </para>
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Position.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.Position"/> class. 
            </summary>
            <param name="longitude">
            Longitude value.
            </param>
            <param name="latitude">
            Latitude value.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Position.#ctor(System.Double,System.Double,System.Nullable{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.Position"/> class. 
            </summary>
            <param name="longitude">
            Longitude value.
            </param>
            <param name="latitude">
            Latitude value.
            </param>
            <param name="altitude">
            Optional altitude value.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Position.#ctor(System.Collections.Generic.IList{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.Position"/> class.
            </summary>
            <param name="coordinates">
            Position values.
            </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Position.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Azure.Documents.Spatial.Position"/> is equal to the current <see cref="T:Microsoft.Azure.Documents.Spatial.Position"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:Microsoft.Azure.Documents.Spatial.Position"/> is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:Microsoft.Azure.Documents.Spatial.Position"/> to compare to the current object. </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Position.GetHashCode">
            <summary>
            Serves as a hash function. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:Microsoft.Azure.Documents.Spatial.Position"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.Position.Equals(Microsoft.Azure.Documents.Spatial.Position)">
            <summary>
            Determines if this <see cref="T:Microsoft.Azure.Documents.Spatial.Position"/> is equal to the <paramref name="other"/>.
            </summary>
            <param name="other"><see cref="T:Microsoft.Azure.Documents.Spatial.Position"/> to compare to this <see cref="T:Microsoft.Azure.Documents.Spatial.Position"/>.</param>
            <returns><c>true</c> if objects are equal. <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.Position.Coordinates">
            <summary>
            Gets position coordinates.
            </summary>
            <value>
            Coordinate values.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.Position.Longitude">
            <summary>
            Gets longitude.
            </summary>
            <value>
            Longitude value.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.Position.Latitude">
            <summary>
            Gets latitude.
            </summary>
            <value>
            Latitude value.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Spatial.Position.Altitude">
            <summary>
            Gets optional altitude.
            </summary>
            <value>
            Altitude value.
            </value>
        </member>
        <member name="T:Microsoft.Azure.Documents.Spatial.UnspecifiedCrs">
            <summary>
            Unspecified CRS. If a geometry has this CRS, no CRS can be assumed for it according to GeoJSON spec.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.UnspecifiedCrs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Spatial.UnspecifiedCrs"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.UnspecifiedCrs.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Azure.Documents.Spatial.LinkedCrs"/> is equal to the current <see cref="T:Microsoft.Azure.Documents.Spatial.LinkedCrs"/>.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.UnspecifiedCrs.GetHashCode">
            <summary>
            Serves as a hash function for <see cref="T:Microsoft.Azure.Documents.Spatial.LinkedCrs"/>. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:Microsoft.Azure.Documents.Spatial.LinkedCrs"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Spatial.UnspecifiedCrs.Equals(Microsoft.Azure.Documents.Spatial.UnspecifiedCrs)">
            <summary>
            Determines if this <see cref="T:Microsoft.Azure.Documents.Spatial.LinkedCrs"/> is equal to <paramref name="other"/>.
            </summary>
            <param name="other"><see cref="T:Microsoft.Azure.Documents.Spatial.LinkedCrs"/> to compare to this <see cref="T:Microsoft.Azure.Documents.Spatial.LinkedCrs"/>.</param>
            <returns><c>true</c> if CRSs are equal. <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Microsoft.Azure.Documents.Client.AccessCondition">
            <summary>
            Represents a set of access conditions to be used for operations against DocumentDB.
            </summary>
            <example>
            The following example shows how to use AccessCondition with DocumentClient.
            <code language="c#">
            <![CDATA[
            // If ETag is current, then this will succeed. Otherwise the request will fail with HTTP 412 Precondition Failure
            await client.ReplaceDocumentAsync(
                readCopyOfBook.SelfLink, 
                new Book { Title = "Moby Dick", Price = 14.99 },
                new RequestOptions 
                { 
                    AccessCondition = new AccessCondition 
                    { 
                        Condition = readCopyOfBook.ETag, 
                        Type = AccessConditionType.IfMatch 
                    } 
                 });
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Client.AccessConditionType"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Resource"/>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.AccessCondition.Type">
            <summary>
            Gets or sets the condition type. 
            </summary>
            <value>
            The condition type. Can be IfMatch or IfNoneMatch.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.AccessCondition.Condition">
            <summary>
            Gets or sets the value of the condition.
            </summary>
            <value>
            The value of the condition. For <see cref="T:Microsoft.Azure.Documents.Client.AccessConditionType"/> IfMatch and IfNotMatch, this is the ETag that has to be compared to.
            </value>
            <seealso cref="T:Microsoft.Azure.Documents.Resource"/>
        </member>
        <member name="T:Microsoft.Azure.Documents.Client.AccessConditionType">
            <summary>
            Specifies the set of <see cref="T:Microsoft.Azure.Documents.Client.AccessCondition"/> types that can be used for operations. 
            </summary>
            <seealso cref="T:Microsoft.Azure.Documents.Client.AccessCondition"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
        </member>
        <member name="F:Microsoft.Azure.Documents.Client.AccessConditionType.IfMatch">
            <summary>
            Check if the resource's ETag value matches the ETag value performed.
            </summary>
            <remarks>
            Used for optimistic concurrency control, e.g., replace the document only if the ETag is identical to the one 
            included in the request to avoid lost updates.
            </remarks>
        </member>
        <member name="F:Microsoft.Azure.Documents.Client.AccessConditionType.IfNoneMatch">
            <summary>
            Check if the resource's ETag value does not match ETag value performed.
            </summary>
            <remarks>
            Used for caching scenarios to reduce network traffic, e.g., return the document in the payload only if the ETag 
            has changed from the one in the request.
            </remarks>
        </member>
        <member name="T:Microsoft.Azure.Documents.Client.FeedOptions">
            <summary>
            Specifies the options associated with feed methods (enumeration operations).
            </summary>
            <remarks>
            Used to manage query and ReadFeed execution. Can use FeedOptions to set page size (MaxItemCount)
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedOptions.MaxItemCount">
            <summary>
            Gets or sets the maximum number of items to be returned in the enumeration operation.
            </summary>
            <value>
            The maximum number of items to be returned in the enumeration operation.
            </value> 
            <remarks>
            Used for query pagination.
            '-1' Used for dynamic page size.
            </remarks>
            <example>
            <code language="c#">
            <![CDATA[
            // Fetch query results 10 at a time.
            var queryable = client.CreateDocumentQuery<Book>(collectionLink, new FeedOptions { MaxItemCount = 10 });
            while (queryable.HasResults)
            {
                FeedResponse<Book> response = await queryable.ExecuteNext<Book>();
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedOptions.RequestContinuation">
            <summary>
            Gets or sets the request continuation token.
            </summary>
            <value>
            The request continuation token.
            </value>
            <example>
            <code language="c#">
            <![CDATA[
            // Resume query execution using the continuation from the previous query
            var queryable = client.CreateDocumentQuery<Book>(collectionLink, new FeedOptions { RequestContinuation = prevQuery.ResponseContinuation });
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedOptions.SessionToken">
            <summary>
            Gets or sets the session token for use with session consistency.
            </summary>
            <value>
            The session token for use with session consistency.
            </value>
            <remarks>
            Useful for applications that are load balanced across multiple Microsoft.Azure.Documents.Client.DocumentClient instances. 
            In this case, round-trip the token from end user to the application and then back to documentdb so that a session
            can be preserved across servers.
            </remarks>
            <example>
            <code language="c#">
            <![CDATA[
            var queryable = client.CreateDocumentQuery<Book>(
                collectionLink, new FeedOptions { SessionToken = lastSessionToken });
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedOptions.EnableScanInQuery">
            <summary>
            Gets or sets the option to allow scan on the queries which couldn't be served
            as indexing was opted out on the requested paths.
            </summary>
            <value>
            Option is true if scan on queries is enabled; otherwise, false.
            </value>
            <example>
            <code language="c#">
            <![CDATA[
            // Enable scan when Range index is not specified.
            var queryable = client.CreateDocumentQuery<Book>(
                collectionLink, new FeedOptions { EnableScanInQuery = true }).Where(b => b.Price > 1000);
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedOptions.EnableCrossPartitionQuery">
            <summary>
            Gets or sets a value indicating whether it is allowed to send more than one request to execute
            the query. More than one request is necessary if query is not scoped to single partition key value.
            </summary>
            <value>
            Option is true if cross-partition query execution is enabled; otherwise, false.
            </value>
            <remarks>
            <para>
            This option only applies to queries on documents and document attachments.
            </para>
            </remarks>
            <example>
            <code language="c#">
            <![CDATA[
            // Enable cross partition query.
            var queryable = client.CreateDocumentQuery<Book>(
                collectionLink, new FeedOptions { EnableCrossPartitionQuery = true }).Where(b => b.Price > 1000);
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedOptions.EnableLowPrecisionOrderBy">
            <summary>
            Gets or sets the option to enable low precision order by.
            </summary>
            <value>
            The option to enable low-precision order by.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedOptions.PartitionKey">
            <summary>
            Gets or sets the <see cref="P:Microsoft.Azure.Documents.Client.FeedOptions.PartitionKey"/> for the current request.
            </summary>
            <remarks>
            <para>
            Partition key is required when read documents or attachements feed in a partitioned collection. 
            Specifically Partition key is required for :
                <see cref="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadDocumentFeedAsync(System.String,Microsoft.Azure.Documents.Client.FeedOptions)"/>,
                <see cref="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadAttachmentFeedAsync(System.String,Microsoft.Azure.Documents.Client.FeedOptions)"/> and 
                <see cref="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadConflictFeedAsync(System.String,Microsoft.Azure.Documents.Client.FeedOptions)"/>.  
            
            Only documents in partitions containing the <see cref="P:Microsoft.Azure.Documents.Client.FeedOptions.PartitionKey"/> is returned in the result.
            </para>
            </remarks>
            <example>
            The followng example shows how to read a document feed in a partitioned collection using <see cref="P:Microsoft.Azure.Documents.Client.FeedOptions.PartitionKey"/>.
            The example assumes the collection is created with a <see cref="T:Microsoft.Azure.Documents.PartitionKeyDefinition"/> on the 'country' property in all the documents.
            <code language="c#">
            <![CDATA[
            await client.ReadDocumentFeedAsync(
                collection.SelfLink, 
                new RequestOptions { PartitionKey = new PartitionKey("USA") } );
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.DocumentCollection"/>
            <seealso cref="T:Microsoft.Azure.Documents.PartitionKeyDefinition"/>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedOptions.EmitVerboseTracesInQuery">
            <summary>
            Gets or sets the option to allow queries to emit out verbose traces 
            for investigation.
            </summary>
            <value>
            Option is true if query tracing is enabled; otherwise, false.
            </value>
        </member>
        <member name="T:Microsoft.Azure.Documents.Client.FeedResponse`1">
            <summary>
            Represents the template class used by feed methods (enumeration operations).
            </summary>
            <typeparam name="T">The feed type.</typeparam>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.FeedResponse`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An IEnumerator object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedResponse`1.DatabaseQuota">
            <summary>
            Gets the maximum quota for database resources within the account. 
            </summary>
            <value>
            The maximum quota for the account.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedResponse`1.DatabaseUsage">
            <summary>
            The current number of database resources within the account.
            </summary>
            <value>
            The number of databases.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedResponse`1.CollectionQuota">
            <summary>
            Gets the maximum quota for collection resources within an account.
            </summary>
            <value>
            The maximum quota for the account.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedResponse`1.CollectionUsage">
            <summary>
            The current number of collection resources within the account.
            </summary>
            <value>
            The number of collections.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedResponse`1.UserQuota">
            <summary>
            Gets the maximum quota for user resources within an account.
            </summary>
            <value>
            The maximum quota for the account.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedResponse`1.UserUsage">
            <summary>
            The current number of user resources within the account.
            </summary>
            <value>
            The number of users.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedResponse`1.PermissionQuota">
            <summary>
            Gets the maximum quota for permission resources within an account.
            </summary>
            <value>
            The maximum quota for the account.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedResponse`1.PermissionUsage">
            <summary>
            The current number of permission resources within the account. 
            </summary>
            <value>
            The number of permissions.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedResponse`1.CollectionSizeQuota">
            <summary>
            Maximum size of a collection in kilobytes.
            </summary>
            <value>
            Quota in kilobytes.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedResponse`1.CollectionSizeUsage">
            <summary>
            Current size of a collection in kilobytes. 
            </summary>
            <vallue>
            Current collection size in kilobytes.
            </vallue>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedResponse`1.StoredProceduresQuota">
            <summary>
            Gets the maximum quota of stored procedures for a collection.
            </summary>
            <value>
            The maximum quota.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedResponse`1.StoredProceduresUsage">
            <summary>
            The current number of stored procedures for a collection.
            </summary>
            <value>
            Current number of stored procedures.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedResponse`1.TriggersQuota">
            <summary>
            Gets the maximum quota of triggers for a collection. 
            </summary>
            <value>
            The maximum quota.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedResponse`1.TriggersUsage">
            <summary>
            The current number of triggers for a collection.
            </summary>
            <value>
            Current number of triggers.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedResponse`1.UserDefinedFunctionsQuota">
            <summary>
            Gets the maximum quota of user defined functions for a collection. 
            </summary>
            <value>
            Maximum quota.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedResponse`1.UserDefinedFunctionsUsage">
            <summary>
            The current number of user defined functions for a collection.
            </summary>
            <value>
            Current number of user defined functions.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedResponse`1.Count">
            <summary>
            Gets the number of items returned in the response.
            </summary>
            <value>
            Count of items in the response.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedResponse`1.MaxResourceQuota">
            <summary>
            Gets the maximum size limit for this entity.
            </summary>
            <value>
            The maximum size limit for this entity. Measured in kilobytes for document resources 
            and in counts for other resources.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedResponse`1.CurrentResourceQuotaUsage">
            <summary>
            Gets the current size of this entity.
            </summary>
            <value>
            The current size for this entity. Measured in kilobytes for document resources 
            and in counts for other resources.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedResponse`1.RequestCharge">
            <summary>
            Gets the request charge for this request.
            </summary>
            <value>
            The request charge measured in reqest units.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedResponse`1.ActivityId">
            <summary>
            Gets the activity ID for the request.
            </summary>
            <value>
            The activity ID for the request.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedResponse`1.ResponseContinuation">
            <summary>
            Gets the continuation token to be used for continuing enumeration.
            </summary>
            <value>
            The continuation token to be used for continuing enumeration.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedResponse`1.SessionToken">
            <summary>
            Gets the session token for use in sesssion consistency reads.
            </summary>
            <value>
            The session token for use in session consistency.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedResponse`1.ContentLocation">
            <summary>
            The content parent location, for example, dbs/foo/colls/bar
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.FeedResponse`1.ResponseHeaders">
            <summary>
            Gets the response headers.
            </summary>
            <value>
            The response headers.
            </value>
        </member>
        <member name="T:Microsoft.Azure.Documents.IDocumentClient">
            <summary>
            Abstracts the functionality provided by DocumentDB. 
            There are two implementations of this interface viz.,
            1. DocumentClient: which is exposed via client SDK
            2. ServerDocumentClient: which is invoked by Gateway in response to client requests.
            Proxy (e.g., Mongo), can invoke any of the two implementations (depending on where the proxy is hosted)
            and get identical functionality. Ability to abstract DocumentDB APIs behind this interface provides
            the flexibility to host proxy in client/server.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.Client.MediaOptions">
            <summary> 
            Options used with attachment content (aka media) creation.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.MediaOptions.Slug">
            <summary>
            Gets or sets the Slug header.
            </summary>
            <value>
            The slug header.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.MediaOptions.ContentType">
            <summary>
            Gets or sets the ContentType header.
            </summary>
            <value>
            The ContentType header
            </value>
        </member>
        <member name="T:Microsoft.Azure.Documents.Client.MediaResponse">
            <summary>
            Represents the response associated with retrieving attachment content.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.MediaResponse.ActivityId">
            <summary> 
            Gets or sets the Activity ID for the request.
            </summary>
            <value>The Activity ID for the request.</value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.MediaResponse.Media">
            <summary>
            Gets or sets the attachment content stream.
            </summary>
            <value>The attachment content stream.</value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.MediaResponse.Slug">
            <summary>
            Gets or sets the HTTP slug header value.
            </summary>
            <value>The HTTP slug header value.</value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.MediaResponse.ContentType">
            <summary>
            Gets or sets the HTTP ContentType header value.
            </summary>
            <value>The HTTP ContentType header value.</value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.MediaResponse.ContentLength">
            <summary>
            Gets or sets the HTTP ContentLength header value.
            </summary>
            <value>The HTTP ContentLength header value.</value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.MediaResponse.MaxMediaStorageUsageInMB">
            <summary>
            Gets the attachment content (media) storage quota in megabytes. Retrieved from gateway.
            </summary>
            <value>The attachment content (media) storage quota in megabytes.</value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.MediaResponse.CurrentMediaStorageUsageInMB">
            <summary>
            Gets the current attachment content (media) usage in megabytes.
            </summary>
            <value>The current attachment content (media) usage in megabytes.</value>
            <remarks>This value is retrieved from the gateway. The value is returned from
            cached information updated periodically and is not guaranteed to be real time.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.MediaResponse.ResponseHeaders">
            <summary>
            Gets the headers associated with the response.
            </summary>
            <value>The headers associated with the response.</value>
        </member>
        <member name="T:Microsoft.Azure.Documents.Client.RequestOptions">
            <summary>
            Encapsulates options that can be specified for different requests issued to the Azure DocumentDB service.
            </summary>
            <remarks>
            Some of these options are valid for specific operations only. 
            For example, 
            <para>PreTriggerInclude can be used only on create, replace and delete operations on a <see cref="T:Microsoft.Azure.Documents.Document"/> or <see cref="T:Microsoft.Azure.Documents.Attachment"/>. </para>
            <para>ETag, while valid on Replace* and Delete* operations, would have no impact on a Read*, CreateQuery* or Create* operations.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.RequestOptions.PreTriggerInclude">
            <summary>
            Gets or sets the trigger to be invoked before the operation.
            </summary>
            <value> 
            The trigger to be invoked before the operation.
            </value>
            <remarks>
            Only valid when used with Create, Replace and Delete methods for Documents.
            Currently only one PreTrigger is permitted per operation.
            </remarks>
            <example>
            The following example shows how to use RequestOptions to include a PreTrigger to execute before persisting the document.
            <code language="c#">
            <![CDATA[
            client.CreateDocumentAsync(collection.SelfLink, 
                new { id = "AndersenFamily", isRegistered = true },
                new RequestOptions { PreTriggerInclude = new List<string> { "validateDocumentContents" } });
            ]]>
            </code>
            </example>
            <see cref="T:Microsoft.Azure.Documents.Trigger"/>
            <see cref="T:System.Collections.Generic.IList`1"/>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.RequestOptions.PostTriggerInclude">
            <summary>
            Gets or sets the trigger to be invoked after the operation.
            </summary>
            <value>
            The trigger to be invoked after the operation.
            </value>
            <remarks>
            Only valid when used with Create, Replace and Delete methods for Documents.
            Currently only one PreTrigger is permitted per operation.
            </remarks>
            <example>
            The following example shows how to use RequestOptions to include a PostTrigger to execute after persisting the document.
            <code language="c#">
            <![CDATA[
            client.CreateDocumentAsync(collection.SelfLink, 
            new { id = "AndersenFamily", isRegistered = true },
            new RequestOptions { PostTriggerInclude = new List<string> { "updateMetadata" } });
            ]]>
            </code>
            </example>
            <see cref="T:Microsoft.Azure.Documents.Trigger"/>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.RequestOptions.AccessCondition">
            <summary>
            Gets or sets the condition (ETag) associated with the request.
            </summary>
            <value>
            The condition (ETag) associated with the request.
            </value>
            <remarks>
            Most commonly used with the Delete* and Replace* methods of <see cref="T:Microsoft.Azure.Documents.Client.DocumentClient"/> such as <see cref="M:Microsoft.Azure.Documents.Client.DocumentClient.ReplaceDocumentAsync(Microsoft.Azure.Documents.Document,Microsoft.Azure.Documents.Client.RequestOptions)"/> 
            or <see cref="M:Microsoft.Azure.Documents.Client.DocumentClient.ReplaceDocumentAsync(System.String,System.Object,Microsoft.Azure.Documents.Client.RequestOptions)"/> methods,
            but can be used with other methods like <see cref="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadDocumentAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)"/> for caching scenarios. 
            </remarks>
            <example>
            The following example shows how to use RequestOptions with <see cref="M:Microsoft.Azure.Documents.Client.DocumentClient.ReplaceDocumentAsync(System.String,System.Object,Microsoft.Azure.Documents.Client.RequestOptions)"/> to 
            specify the set of <see cref="P:Microsoft.Azure.Documents.Client.RequestOptions.AccessCondition"/> to be used when updating a document
            <code language="c#">
            <![CDATA[
            // If ETag is current, then this will succeed. Otherwise the request will fail with HTTP 412 Precondition Failure
            await client.ReplaceDocumentAsync(
                readCopyOfBook.SelfLink, 
                new Book { Title = "Moby Dick", Price = 14.99 },
                new RequestOptions 
                { 
                    AccessCondition = new AccessCondition 
                    { 
                        Condition = readCopyOfBook.ETag, 
                        Type = AccessConditionType.IfMatch 
                    } 
                 });
            ]]>
            </code>
            </example>
            <see cref="T:Microsoft.Azure.Documents.Client.AccessCondition"/>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.RequestOptions.IndexingDirective">
            <summary>
            Gets or sets the indexing directive (Include or Exclude) for the request.
            </summary>
            <value>
            The indexing directive to use with a request.
            </value>
            <example>
            The following example shows how to explicitly index a document in a collection with 
            automatic indexing turned off.
            <code language="c#">
            <![CDATA[
            client.CreateDocumentAsync(defaultCollection.SelfLink,
                new { id = "AndersenFamily", isRegistered = true },
                new RequestOptions { IndexingDirective = IndexingDirective.Include });
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.IndexingPolicy"/>
            <seealso cref="P:Microsoft.Azure.Documents.Client.RequestOptions.IndexingDirective"/>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.RequestOptions.ConsistencyLevel">
            <summary>
            Gets or sets the consistency level required for the request.
            </summary>
            <value>
            The consistency level required for the request.
            </value>
            <remarks>
            DocumentDB offers 4 different consistency levels. Strong, Bounded Staleness, Session and Eventual - in order of strongest to weakest consistency.
            <para>
            While this is set at a database account level, DocumentDB allows a developer to weaken the default consistency level
            for each individual request. 
            </para>
            </remarks>
            <example>
            This example uses RequestOptions to lower the consistency level to Eventual for this single Read operation. 
            <code language="c#">
            <![CDATA[
            Document doc = client.ReadDocumentAsync(documentLink, new RequestOptions { ConsistencyLevel = ConsistencyLevel.Eventual });
            ]]>
            </code>
            </example>
            <seealso cref="P:Microsoft.Azure.Documents.Client.RequestOptions.ConsistencyLevel"/>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.RequestOptions.SessionToken">
             <summary>
             Gets or sets the token for use with session consistency.
             </summary>
             <value>
             The token for use with session consistency.
             </value>
             
             <remarks>
             One of the <see cref="P:Microsoft.Azure.Documents.Client.RequestOptions.ConsistencyLevel"/> for DocumentDB is Session. In fact, this is the deault level applied to accounts. 
             <para>
             When working with Session consistency, each new write request to DocumentDB is assigned a new SessionToken.
             The DocumentClient will use this token internally with each read/query request to ensure that the set consistency level is maintained.
              
             <para>
             In some scenarios you need to manage this Session yourself; 
             Consider a web application with multiple nodes, each node will have its own instance of <see cref="T:Microsoft.Azure.Documents.Client.DocumentClient"/>
             If you wanted these nodes to participate in the same session (to be able read your own writes consistently across web tiers) 
             you would have to send the SessionToken from <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> of the write action on one node
             to the client tier, using a cookie or some other mechanism, and have that token flow back to the web tier for subsequent reads.
             If you are using a round-robin load balancer which does not maintain session affinity between requests, such as the Azure Load Balancer,  
             the read could potentially land on a different node to the write request, where the session was created. 
             </para>
             
             <para>
             If you do not flow the DocumentDB SessionToken across as described above you could end up with inconsistent read results for a period of time.
             </para>
             
             </para>
             </remarks>
             
             <example>
             This example shows how you can retrieve the SessionToken from a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> 
             and then use it on a different instance of <see cref="T:Microsoft.Azure.Documents.Client.DocumentClient"/> within <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
             This example assumes that the each instance of the client is running from code within a different AppDomain, such as on different nodes in the case of multiple node web application
             <code language="c#">
             <![CDATA[
             string sessionToken;
             string docSelfLink;
            
             using (DocumentClient client = new DocumentClient(new Uri(""), ""))
             {
                 ResourceResponse<Document> response = client.CreateDocumentAsync(collection.SelfLink, new { id = "an id", value = "some value" }).Result;
                 sessionToken = response.SessionToken;
                 Document created = response.Resource;
                 docSelfLink = created.SelfLink;
             }
                
             using (DocumentClient client = new DocumentClient(new Uri(""), ""))
             {
                 ResourceResponse<Document> read = client.ReadDocumentAsync(docSelfLink, new RequestOptions { SessionToken = sessionToken }).Result; 
             }
             ]]>
             </code>
             </example>
             <seealso cref="P:Microsoft.Azure.Documents.Client.RequestOptions.ConsistencyLevel"/>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.RequestOptions.ResourceTokenExpirySeconds">
            <summary>
            Gets or sets the expiry time for resource token. Used when creating/updating/reading permissions.
            </summary>
            <value>
            The expiry time in seconds for the resource token.
            </value>
            <remarks>
            When working with DocumentDB Users and Permissions, the way to instantiate an instance of <see cref="T:Microsoft.Azure.Documents.Client.DocumentClient"/> is to 
            get the <see cref="P:Microsoft.Azure.Documents.Permission.Token"/> for the resource the <see cref="T:Microsoft.Azure.Documents.User"/> wants to access and pass this 
            to the authKeyOrResourceToken parameter of <see cref="T:Microsoft.Azure.Documents.Client.DocumentClient"/> constructor
            <para>
            When requesting this Token, a RequestOption for ResourceTokenExpirySeconds can be used to set the length of time to elapse before the token expires.
            This value can range from 10 seconds, to 5 hours (or 18,000 seconds)
            The default value for this, should none be supplied is 1 hour (or 3,600 seconds).
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Client.DocumentClient"/>  
            <seealso cref="T:Microsoft.Azure.Documents.Permission"/>  
            <seealso cref="T:Microsoft.Azure.Documents.User"/>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.RequestOptions.OfferType">
            <summary>
            Gets or sets the offer type for the resource. 
            </summary>
            <value>
            The offer type value.
            </value>
            <remarks>
            This option is only valid when creating a document collection.
            <para>
            Refer to http://azure.microsoft.comdocumentation/articles/documentdb-performance-levels/ for the list of valid
            offer types.
            </para>
            </remarks>
            <example>
            The followng example shows how to create a collection with the S2 offer.
            <code language="c#">
            <![CDATA[
            await client.CreateDocumentCollectionAsync(
                database.SelfLink, 
                new DocumentCollection { Id = "newcoll" }, 
                new RequestOptions { OfferType = "S2" });
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.DocumentCollection"/>
            <seealso cref="T:Microsoft.Azure.Documents.Offer"/>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.RequestOptions.OfferThroughput">
            <summary>
            Gets or sets the offer throughput provisioned for a collection in measurement of Requests-per-Unit.
            </summary>
            <value>
            The provisioned throughtput for this offer.
            </value>
            <remarks>
            This option is only valid when creating a document collection.
            <para>
            Refer to http://azure.microsoft.com/documentation/articles/documentdb-performance-levels/ for details on provision offer throughput.
            </para>
            </remarks>
            <example>
            The followng example shows how to create a collection with offer throughtput.
            <code language="c#">
            <![CDATA[
            await client.CreateDocumentCollectionAsync(
                database.SelfLink, 
                new DocumentCollection { Id = "newcoll" }, 
                new RequestOptions { OfferThroughput = 50000 });
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.DocumentCollection"/>
            <seealso cref="T:Microsoft.Azure.Documents.OfferV2"/>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.RequestOptions.PartitionKey">
            <summary>
            Gets or sets the <see cref="P:Microsoft.Azure.Documents.Client.RequestOptions.PartitionKey"/> for the current request.
            </summary>
            <remarks>
            <para>
            Partition key is used to identify the target partition for this request.  It must be set on read and delete
            operations for all document requests; create, read, update and delete operations for all document attachment requests;
            and execute operation on stored producedures.
            
            For create and update operations on documents, the partition key is optional.  When absent, the client library will
            extract the partition key from the document before sending the request to the server.
            </para>
            </remarks>
            <example>
            The followng example shows how to read a document in a partitioned collection using <see cref="P:Microsoft.Azure.Documents.Client.RequestOptions.PartitionKey"/>.
            The example assumes the collection is created with a <see cref="T:Microsoft.Azure.Documents.PartitionKeyDefinition"/> of the 'id' property in all the documents.
            <code language="c#">
            <![CDATA[
            await client.ReadDocumentAsync(
                document.SelfLink, 
                new RequestOptions { PartitionKey = new PartitionKey(document.Id) } );
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.DocumentCollection"/>
            <seealso cref="T:Microsoft.Azure.Documents.PartitionKeyDefinition"/>
        </member>
        <member name="T:Microsoft.Azure.Documents.Client.ResourceResponse`1">
            <summary>
            Represents the template class used by DocumentDB methods returning single objects.
            </summary> 
            <typeparam name="T">the resource type.</typeparam>
            <remarks>
            All responses from creates, reads, updates and deletes of DocumentDB resources returns the response wrapped in a 
            ResourceResponse object. This contains the metadata from the response headers from the DocumentDB call including
            the request units (RequestCharge), activity ID and quotas/usage of resources.
            </remarks>
            <example>
            The following example extracts the request units consumed, activity ID and StatusCode from a CreateDocumentAsync call.
            <code language="c#">
            <![CDATA[
            ResourceResponse<Document> response = await client.CreateDocumentAsync(collectionLink, document);
            Console.WriteLine(response.RequestCharge);
            Console.WriteLine(response.ActivityId); 
            Console.WriteLine(response.StatusCode); // HttpStatusCode.Created or 201
            ]]>
            </code>
            </example>
            <seealso cref="P:Microsoft.Azure.Documents.Client.ResourceResponse`1.Resource"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.FeedResponse`1"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.ResourceResponse`1.op_Implicit(Microsoft.Azure.Documents.Client.ResourceResponse{`0})~`0">
            <summary>
            Returns the resource in the response implicitly.
            </summary>
            <param name="source">The ResourceResponse source.</param>
            <returns>The resource object.</returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceResponse`1.DatabaseQuota">
            <summary>
            Gets the maximum quota for database resources within the account. 
            </summary>
            <value>
            The maximum quota for the account.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceResponse`1.DatabaseUsage">
            <summary>
            The current number of database resources within the account.
            </summary>
            <value>
            The number of databases.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceResponse`1.CollectionQuota">
            <summary>
            Gets the maximum quota for collection resources within an account.
            </summary>
            <value>
            The maximum quota for the account.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceResponse`1.CollectionUsage">
            <summary>
            The current number of collection resources within the account.
            </summary>
            <value>
            The number of collections.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceResponse`1.UserQuota">
            <summary>
            Gets the maximum quota for user resources within an account.
            </summary>
            <value>
            The maximum quota for the account.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceResponse`1.UserUsage">
            <summary>
            The current number of user resources within the account.
            </summary>
            <value>
            The number of users.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceResponse`1.PermissionQuota">
            <summary>
            Gets the maximum quota for permission resources within an account.
            </summary>
            <value>
            The maximum quota for the account.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceResponse`1.PermissionUsage">
            <summary>
            The current number of permission resources within the account. 
            </summary>
            <value>
            The number of permissions.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceResponse`1.CollectionSizeQuota">
            <summary>
            Maximum size of a collection in kilobytes.
            </summary>
            <value>
            Quota in kilobytes.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceResponse`1.CollectionSizeUsage">
            <summary>
            Current size of a collection in kilobytes. 
            </summary>
            <value>
            Current collection size in kilobytes.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceResponse`1.DocumentQuota">
            <summary>
            Maximum size of a documents within a collection in kilobytes.
            </summary>
            <value>
            Quota in kilobytes.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceResponse`1.DocumentUsage">
            <summary>
            Current size of documents within a collection in kilobytes. 
            </summary>
            <value>
            Current documents size in kilobytes.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceResponse`1.StoredProceduresQuota">
            <summary>
            Gets the maximum quota of stored procedures for a collection.
            </summary>
            <value>
            The maximum quota.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceResponse`1.StoredProceduresUsage">
            <summary>
            The current number of stored procedures for a collection.
            </summary>
            <value>
            Current number of stored procedures.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceResponse`1.TriggersQuota">
            <summary>
            Gets the maximum quota of triggers for a collection. 
            </summary>
            <value>
            The maximum quota.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceResponse`1.TriggersUsage">
            <summary>
            The current number of triggers for a collection.
            </summary>
            <value>
            Current number of triggers.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceResponse`1.UserDefinedFunctionsQuota">
            <summary>
            Gets the maximum quota of user defined functions for a collection. 
            </summary>
            <value>
            Maximum quota.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceResponse`1.UserDefinedFunctionsUsage">
            <summary>
            The current number of user defined functions for a collection.
            </summary>
            <value>
            Current number of user defined functions.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceResponse`1.DocumentCount">
            <summary>
            Current count of documents within a collection. 
            </summary>
            <value>
            Current count of documents.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceResponse`1.ActivityId">
            <summary>
            Gets the activity ID for the request.
            </summary>
            <value>
            The activity ID for the request.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceResponse`1.SessionToken">
            <summary>
            Gets the session token for use in sesssion consistency reads.
            </summary>
            <value>
            The session token for use in session consistency.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceResponse`1.StatusCode">
            <summary>
            Gets the HTTP status code associated with the response.
            </summary>
            <value>
            The HTTP status code associated with the response.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceResponse`1.MaxResourceQuota">
            <summary>
            Gets the maximum size limit for this entity.
            </summary>
            <value>
            The maximum size limit for this entity. Measured in kilobytes for document resources 
            and in counts for other resources.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceResponse`1.CurrentResourceQuotaUsage">
            <summary>
            Gets the current size of this entity.
            </summary>
            <value>
            The current size for this entity. Measured in kilobytes for document resources 
            and in counts for other resources.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceResponse`1.Resource">
            <summary>
            Gets the resource returned in the response.
            </summary>
            <value>
            The resource returned in the response.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceResponse`1.RequestCharge">
            <summary>
            Gets the request charge for this request.
            </summary>
            <value>
            The request charge measured in reqest units.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceResponse`1.ResponseHeaders">
            <summary>
            Gets the response headers.
            </summary>
            <value>
            The response headers.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceResponse`1.ContentLocation">
            <summary>
            The content parent location, for example, dbs/foo/colls/bar
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceResponse`1.IndexTransformationProgress">
            <summary>
            Gets the progress of an index transformation, if one is underway.
            </summary>
            <value>
            An integer from 0 to 100 representing percentage completion of the index transformation process.
            Returns -1 if the index transformation progress header could not be found.
            </value>
            <remarks>
            An index will be rebuilt when the IndexPolicy of a collection is updated.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceResponse`1.LazyIndexingProgress">
            <summary>
            Gets the progress of lazy indexing.
            </summary>
            <value>
            An integer from 0 to 100 representing percentage completion of the lazy indexing process.
            Returns -1 if the lazy indexing progress header could not be found.
            </value>
            <remarks>
            Lazy indexing progress only applies to the collection with indexing mode Lazy.
            </remarks>
        </member>
        <member name="T:Microsoft.Azure.Documents.Routing.LocationHelper">
            <summary>
            https://azure.microsoft.com/en-us/regions/
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Routing.LocationHelper.GetLocationEndpoint(System.Uri,System.String)">
            <summary>
            for example, for https://foo.documents.azure.com:443/ and "West US", this will return https://foo-westus.documents.azure.com:443/
            </summary>
            <param name="serviceEndpoint"></param>
            <param name="location"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Azure.Documents.Client.StoredProcedureResponse`1">
            <summary>
            Represents the response returned from a stored procedure. Wraps the response body and headers.
            </summary> 
            <typeparam name="TValue">The returned value type of the store procedure.</typeparam>
            <remarks>
            Stored procedures can return any string output via the getContext().getResponse().setBody() method.
            This response body could be a serialized JSON object, or any other type.
            Within the .NET SDK, you can deserialize the response into a corresponding TValue type.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.StoredProcedureResponse`1.op_Implicit(Microsoft.Azure.Documents.Client.StoredProcedureResponse{`0})~`0">
            <summary>
            Gets the resource implicitly.
            </summary>
            <param name="source">Stored procedure response.</param>
            <returns>The returned resource.</returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.StoredProcedureResponse`1.ActivityId">
            <summary>
            Gets the Activity ID of the request.
            </summary>
            <value>
            The Activity ID of the request.
            </value>
            <remarks>Every request is traced with a globally unique ID. Include activity ID in tracing application failures and when contacting DocumentDB support</remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.StoredProcedureResponse`1.SessionToken">
            <summary>
            Gets the token for use with session consistency requests.
            </summary>
            <value>
            The token for use with session consistency requests.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.StoredProcedureResponse`1.StatusCode">
            <summary>
            Gets the request completion status code.
            </summary>
            <value>The request completion status code</value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.StoredProcedureResponse`1.MaxResourceQuota">
            <summary>
            Gets the delimited string containing the quota of each resource type within the collection.
            </summary>
            <value>The delimited string containing the number of used units per resource type within the collection.</value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.StoredProcedureResponse`1.CurrentResourceQuotaUsage">
            <summary>
            Gets the delimited string containing the usage of each resource type within the collection.
            </summary>
            <value>The delimited string containing the number of used units per resource type within the collection.</value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.StoredProcedureResponse`1.RequestCharge">
            <summary>
            Gets the number of normalized request units (RUs) charged.
            </summary>
            <value>
            The number of normalized request units (RUs) charged.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.StoredProcedureResponse`1.ResponseHeaders">
            <summary>
            Gets the headers associated with the response.
            </summary>
            <value>
            Headers associated with the response.
            </value>
            <remarks>
            Provides access to all HTTP response headers returned from the 
            DocumentDB API.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.StoredProcedureResponse`1.Response">
            <summary>
            Gets the response of a stored procedure, serialized into the given type.
            </summary>
            <value>The response of a stored procedure, serialized into the given type.</value>
        </member>
        <member name="T:Microsoft.Azure.Documents.ClientResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.AuthTokenNotFound">
            <summary>
              Looks up a localized string similar to The client does not have any valid token for the requested resource {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.BadQuery_IllegalMemberAccess">
            <summary>
              Looks up a localized string similar to Query expression is invalid, member {0} of type {1} is invalid..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.BadQuery_InvalidArrayIndexExpression">
            <summary>
              Looks up a localized string similar to Query expression is invalid, expression {0} is unsupported in this context. Supported expressions are MemberAccess and ArrayIndex..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.BadQuery_InvalidArrayIndexType">
            <summary>
              Looks up a localized string similar to Type {0} for an array index parameter is invalid. Array index parameter must be int..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.BadQuery_InvalidComparison">
            <summary>
              Looks up a localized string similar to Query expression is invalid, expression {0} must either have LHS or RHS as constant..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.BadQuery_InvalidComparisonType">
            <summary>
              Looks up a localized string similar to Query expression is invalid, expression {0} of type {1} cannot be used in this context..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.BadQuery_InvalidExpression">
            <summary>
              Looks up a localized string similar to Query expression is invalid, expression {0} is unsupported. Supported expressions are &apos;Queryable.Where&apos;, &apos;Queryable.Select&apos; &amp; &apos;Queryable.SelectMany&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.BadQuery_InvalidLeftExpression">
            <summary>
              Looks up a localized string similar to Query expression is invalid, expression {0} is not allowed in this context..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.BadQuery_InvalidMemberAccessExpression">
            <summary>
              Looks up a localized string similar to Query expression is invalid, expression {0} is unsupported in this context. Supported expressions are parameter reference, array index and property reference..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.BadQuery_InvalidMethodCall">
            <summary>
              Looks up a localized string similar to Query expression is invalid, method call {0} is not allowed at this context. Allowed methods are {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.BadQuery_InvalidQueryType">
            <summary>
              Looks up a localized string similar to QueryType {0} is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.BadQuery_InvalidReturnType">
            <summary>
              Looks up a localized string similar to Query expression is invalid, expression return type {0} is unsupported. Query must evaluate to IEnumerable..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.BadQuery_TooManySelectManyArguments">
            <summary>
              Looks up a localized string similar to Query expression is invalid, expression {0} contains too many arguments. .
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.BadQuery_TransformQueryException">
            <summary>
              Looks up a localized string similar to An error occured while evaluating the transform expression {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.BadSession">
            <summary>
              Looks up a localized string similar to Session object retrieved from client with endpoint {0} cannot be used on a client initialized to endpoint {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.BinaryOperatorNotSupported">
            <summary>
              Looks up a localized string similar to Binary operator &apos;{0}&apos; is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.ConstantTypeIsNotSupported">
            <summary>
              Looks up a localized string similar to Constant of type &apos;{0}&apos; is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.ConstructorInvocationNotSupported">
            <summary>
              Looks up a localized string similar to Constructor invocation is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.ExpectedMethodCallsMethods">
            <summary>
              Looks up a localized string similar to Expected a static IQueryable or IEnumerable extension method, received an instance method..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.ExpressionTypeIsNotSupported">
            <summary>
              Looks up a localized string similar to Expression with NodeType &apos;{0}&apos; is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.FailedToEvaluateSpatialExpression">
            <summary>
              Looks up a localized string similar to Expression tree cannot be processed because evaluation of Spatial expression failed..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.InputIsNotIDocumentQuery">
            <summary>
              Looks up a localized string similar to Input is not of type IDocumentQuery..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.InvalidArgumentsCount">
            <summary>
              Looks up a localized string similar to Incorrect number of arguments for method &apos;{0}&apos;. Expected &apos;{1}&apos; but received &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.InvalidCallToUserDefinedFunctionProvider">
            <summary>
              Looks up a localized string similar to This method should only be called within Linq expression to Invoke a User-defined function..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.InvalidRangeError">
            <summary>
              Looks up a localized string similar to Range low value must be less than or equal the high value..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.InvalidTakeValue">
            <summary>
              Looks up a localized string similar to The count value provided for a Take expression must be an integer..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.InvalidTypesForMethod">
            <summary>
              Looks up a localized string similar to Method &apos;{0}&apos; can not be invoked for type &apos;{1}&apos;. Supported types are &apos;[{2}]&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.MediaLinkInvalid">
            <summary>
              Looks up a localized string similar to MediaLink is invalid.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.MemberBindingNotSupported">
            <summary>
              Looks up a localized string similar to Member binding is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.MethodNotSupported">
            <summary>
              Looks up a localized string similar to Method &apos;{0}&apos; is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.NotSupported">
            <summary>
              Looks up a localized string similar to Not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.OnlyLINQMethodsAreSupported">
            <summary>
              Looks up a localized string similar to Method &apos;{0}&apos; is not supported. Only LINQ Methods are supported..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.PartitionKeyExtractError">
            <summary>
              Looks up a localized string similar to Unable to extract partition key from document. Ensure that you have provided a valid PartitionKeyValueExtractor function..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.PartitionPropertyNotFound">
            <summary>
              Looks up a localized string similar to Partition property not found in the document..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.PartitionResolver_DatabaseAlreadyExist">
            <summary>
              Looks up a localized string similar to An IPartitionResolver already exists for this database.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.PartitionResolver_DatabaseDoesntExist">
            <summary>
              Looks up a localized string similar to No IPartitionResolver available for this database.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.PathExpressionsOnly">
            <summary>
              Looks up a localized string similar to Only path expressions are supported for SelectMany..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.RangeNotFoundError">
            <summary>
              Looks up a localized string similar to A containing range for {0} doesn&apos;t exist in the partition map..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.StringCompareToInvalidConstant">
            <summary>
              Looks up a localized string similar to The right hand side of string.CompareTo() comparison must be constant &apos;0&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.StringCompareToInvalidOperator">
            <summary>
              Looks up a localized string similar to Invalid operator for string.CompareTo(). Vaid operators are (&apos;==&apos;, &apos;&lt;&apos;, &apos;&lt;=&apos;, &apos;&gt;&apos; or &apos;&gt;=&apos;).
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.UdfNameIsNullOrEmpty">
            <summary>
              Looks up a localized string similar to User-defined function name can not be null or empty..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.UnaryOperatorNotSupported">
            <summary>
              Looks up a localized string similar to Unary operator &apos;{0}&apos; is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.UnexpectedAuthTokenType">
            <summary>
              Looks up a localized string similar to Unexpected authorization token type &apos;({0})&apos;. Expected &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.UnexpectedTokenType">
            <summary>
              Looks up a localized string similar to Unexpected token type: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.UnsupportedPartitionKey">
            <summary>
              Looks up a localized string similar to Unsupported type {0} for partitionKey..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ClientResources.ValueAndAnonymousTypesAndGeometryOnly">
            <summary>
              Looks up a localized string similar to Instantiation of only value types, anonymous types and spatial types are supported..
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.ClientRetryPolicy">
            <summary>
            Client policy is combination of failover retry + throttling retry.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.ClientRetryPolicy.ShouldRetry(System.Exception,System.TimeSpan@,System.Exception@)">
            <summary> 
            Should the caller retry the operation.
            </summary>
            <param name="exception">Exception that occured when the operation was tried</param>
            <param name="retryDelay">Duration to wait before the operation is retried</param>
            <param name="exceptionToThrow">Translated exception the caller should throw when not asked to retry</param>
            <returns>True indicates caller should retry, False otherwise</returns>
        </member>
        <member name="T:Microsoft.Azure.Documents.Client.ConnectionMode">
            <summary>
            Represents the connection mode to be used by the client.
            </summary>
            <remarks>
            Direct and Gateway connectivity modes are supported. Gateway is the default. 
            Refer to <see>http://azure.microsoft.com/documentation/articles/documentdb-interactions-with-resources/#connectivity-options</see> for additional details.
            </remarks>
            <example>
            <code language="c#">
            <![CDATA[
            DocumentClient client = new DocumentClient(endpointUri, masterKey, new ConnectionPolicy { ConnectionMode = ConnectionMode.Direct });
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ConnectionPolicy"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.Protocol"/>
        </member>
        <member name="F:Microsoft.Azure.Documents.Client.ConnectionMode.Gateway">
            <summary>
            Use the DocumentDB gateway to route all requests. The gateway proxies requests to the right data partition.
            </summary>
            <remarks>
            Use Gateway connectivity when within firewall settings do not allow Direct connectivity. All connections 
            are made to the database account's endpoint through the standard HTTPS port (443).
            </remarks>
        </member>
        <member name="F:Microsoft.Azure.Documents.Client.ConnectionMode.Direct">
            <summary>
            Uses direct connectivity to the data nodes. Use gateway only to initialize and cache logical addresses and refresh on updates.
            </summary>
            <remarks>
            Use Direct connectivity for best performance. Connections are made to the data nodes on DocumentDB's clusters 
            on a range of port numbers either using HTTPS or TCP/SSL.
            </remarks>
        </member>
        <member name="T:Microsoft.Azure.Documents.Client.DocumentClient">
            <summary>
            Provides a client-side logical representation of the Azure DocumentDB service. 
            This client is used to configure and execute requests against the service.
            </summary>
            <threadSafety>
            This type is thread safe.
            </threadSafety>
            <remarks>
            The service client that encapsulates the endpoint and credentials and connection policy used to access the DocumentDB service.
            It is recommended to cache and reuse this instance within your application rather than creating a new instance for every operation.  
            
            <para>
            When your app uses DocumentClient, you should call its IDisposable.Dispose implementation when you are finished using it.  
            Depending on your programming technique, you can do this in one of two ways: 
            </para>
            
            <para>
            1. By using a language construct such as the using statement in C#. 
            The using statement is actually a syntactic convenience. 
            At compile time, the language compiler implements the intermediate language (IL) for a try/catch block.
            <code language="c#">
            <![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("endpoint"), "authKey"))
            {
                ...
            }
            ]]>
            </code>
            </para>
            
            <para>
            2. By wrapping the call to the IDisposable.Dispose implementation in a try/catch block. 
            The following example replaces the using block in the previous example with a try/catch/finally block.
            <code language="c#">
            <![CDATA[
            DocumentClient client = new DocumentClient(new Uri("endpoint"), "authKey"))
            try{
                ...               
            }
            finally{
                if (client != null) client.Dispose();
            }
            ]]>
            </code>
            </para>
            
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateAttachmentAsync(System.Uri,System.Object,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates an attachment as an asychronous operation.
            </summary>
            <param name="documentUri">the self-link of the document to create an attachment for.</param>
            <param name="attachment">the attachment object.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateAttachmentAsync(System.Uri,System.IO.Stream,Microsoft.Azure.Documents.Client.MediaOptions)">
            <summary>
            Creates an attachment as an asynchronous operation.
            </summary>
            <param name="documentUri">the attachments link for the document.</param>
            <param name="mediaStream">the stream of the attachment media.</param>
            <param name="options">the media options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentAsync(System.Uri,System.Object,Microsoft.Azure.Documents.Client.RequestOptions,System.Boolean)">
            <summary>
            Creates a document as an asychronous operation.
            </summary>
            <param name="documentCollectionUri">the self-link of the collection to create the document in.</param>
            <param name="document">the document object.</param>
            <param name="options">The request options for the request.</param>
            <param name="disableAutomaticIdGeneration">Disables the automatic id generation, will throw an exception if id is missing.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentCollectionAsync(System.Uri,Microsoft.Azure.Documents.DocumentCollection,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates a collection as an asychronous operation.
            </summary>
            <param name="databaseUri">the self-link of the database to create the collection in.</param>
            <param name="documentCollection">the Microsoft.Azure.Documents.DocumentCollection object.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateStoredProcedureAsync(System.Uri,Microsoft.Azure.Documents.StoredProcedure,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates a stored procedure as an asychronous operation.
            </summary>
            <param name="collectionUri">the self-link of the collection to create the stored procedure in.</param>
            <param name="storedProcedure">the Microsoft.Azure.Documents.StoredProcedure object.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateTriggerAsync(System.Uri,Microsoft.Azure.Documents.Trigger,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates a trigger as an asychronous operation.
            </summary>
            <param name="collectionUri">the self-link of the collection to create the trigger in.</param>
            <param name="trigger">the Microsoft.Azure.Documents.Trigger object.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateUserDefinedFunctionAsync(System.Uri,Microsoft.Azure.Documents.UserDefinedFunction,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates a user defined function as an asychronous operation.
            </summary>
            <param name="collectionUri">the self-link of the collection to create the user defined function in.</param>
            <param name="function">the Microsoft.Azure.Documents.UserDefinedFunction object.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreatePermissionAsync(System.Uri,Microsoft.Azure.Documents.Permission,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates a permission as an asychronous operation.
            </summary>
            <param name="userUri">the self-link of the user to create the permission for.</param>
            <param name="permission">the Microsoft.Azure.Documents.Permission object.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateUserAsync(System.Uri,Microsoft.Azure.Documents.User,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates a user as an asychronous operation.
            </summary>
            <param name="databaseUri">the self-link of the database to create the user in.</param>
            <param name="user">the Microsoft.Azure.Documents.User object.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.UpsertAttachmentAsync(System.Uri,System.Object,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Upserts an attachment as an asychronous operation.
            </summary>
            <param name="documentUri">the URI of the document to upsert an attachment for.</param>
            <param name="attachment">the attachment object.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.UpsertAttachmentAsync(System.Uri,System.IO.Stream,Microsoft.Azure.Documents.Client.MediaOptions,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Upserts an attachment as an asynchronous operation.
            </summary>
            <param name="documentUri">the URI of the document to upsert an attachment for.</param>
            <param name="mediaStream">the stream of the attachment media.</param>
            <param name="options">the media options for the request.</param>
            <param name="requestOptions">Request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.UpsertDocumentAsync(System.Uri,System.Object,Microsoft.Azure.Documents.Client.RequestOptions,System.Boolean)">
            <summary>
            Upserts a document as an asychronous operation.
            </summary>
            <param name="documentCollectionUri">the URI of the collection to upsert the document in.</param>
            <param name="document">the document object.</param>
            <param name="options">The request options for the request.</param>
            <param name="disableAutomaticIdGeneration">Disables the automatic id generation, will throw an exception if id is missing.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.UpsertStoredProcedureAsync(System.Uri,Microsoft.Azure.Documents.StoredProcedure,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Upserts a stored procedure as an asychronous operation.
            </summary>
            <param name="collectionUri">the URI of the collection to upsert the stored procedure in.</param>
            <param name="storedProcedure">the Microsoft.Azure.Documents.StoredProcedure object.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.UpsertTriggerAsync(System.Uri,Microsoft.Azure.Documents.Trigger,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Upserts a trigger as an asychronous operation.
            </summary>
            <param name="collectionUri">the URI of the collection to upsert the trigger in.</param>
            <param name="trigger">the Microsoft.Azure.Documents.Trigger object.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.UpsertUserDefinedFunctionAsync(System.Uri,Microsoft.Azure.Documents.UserDefinedFunction,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Upserts a user defined function as an asychronous operation.
            </summary>
            <param name="collectionUri">the URI of the collection to upsert the user defined function in.</param>
            <param name="function">the Microsoft.Azure.Documents.UserDefinedFunction object.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.UpsertPermissionAsync(System.Uri,Microsoft.Azure.Documents.Permission,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Upserts a permission as an asychronous operation.
            </summary>
            <param name="userUri">the URI of the user to upsert the permission for.</param>
            <param name="permission">the Microsoft.Azure.Documents.Permission object.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.UpsertUserAsync(System.Uri,Microsoft.Azure.Documents.User,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Upserts a user as an asychronous operation.
            </summary>
            <param name="databaseUri">the URI of the database to upsert the user in.</param>
            <param name="user">the Microsoft.Azure.Documents.User object.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.DeleteAttachmentAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete an attachment as an asynchronous operation.
            </summary>
            <param name="attachmentUri">the self-link of the attachment to delete.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.DeleteDatabaseAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a database as an asynchronous operation.
            </summary>
            <param name="databaseUri">the self-link of the database to delete.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.DeleteDocumentAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a document as an asynchronous operation.
            </summary>
            <param name="documentUri">the self-link of the document to delete.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.DeleteDocumentCollectionAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a collection as an asynchronous operation.
            </summary>
            <param name="documentCollectionUri">the self-link of the collection to delete.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.DeleteStoredProcedureAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a stored procedure as an asynchronous operation.
            </summary>
            <param name="storedProcedureUri">the self-link of the stored procedure to delete.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.DeleteTriggerAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a trigger as an asynchronous operation.
            </summary>
            <param name="triggerUri">the self-link of the trigger to delete.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.DeleteUserDefinedFunctionAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a user defined function as an asynchronous operation.
            </summary>
            <param name="functionUri">the self-link of the trigger to delete.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.DeletePermissionAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a permission as an asynchronous operation.
            </summary>
            <param name="permissionUri">the self-link of the trigger to delete.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.DeleteUserAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a user as an asynchronous operation.
            </summary>
            <param name="userUri">the self-link of the user to delete.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.DeleteConflictAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a conflict as an asynchronous operation.
            </summary>
            <param name="conflictUri">the self-link of the conflict to delete.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReplaceAttachmentAsync(System.Uri,Microsoft.Azure.Documents.Attachment,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Replaces an attachment as an asynchronous operation.
            </summary>
            <param name="attachmentsUri">the updated attachment.</param>
            <param name="attachment">the attachment resource.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReplaceDocumentAsync(System.Uri,System.Object,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Replaces a document as an asynchronous operation.
            </summary>
            <param name="documentCollectionUri">the self-link of the document to be updated.</param>
            <param name="document">the updated document.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReplaceDocumentCollectionAsync(System.Uri,Microsoft.Azure.Documents.DocumentCollection,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Replaces a document collection as an asynchronous operation.
            </summary>
            <param name="documentCollectionUri">the self-link of the document collection to be updated.</param>
            <param name="documentCollection">the updated document collection.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReplaceStoredProcedureAsync(System.Uri,Microsoft.Azure.Documents.StoredProcedure,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Replace the specified stored procedure.
            </summary>
            <param name="storedProcedureUri">the self-link for the attachment.</param>
            <param name="storedProcedure">the updated stored procedure.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReplaceTriggerAsync(System.Uri,Microsoft.Azure.Documents.Trigger,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Replaces a trigger as an asynchronous operation.
            </summary>
            <param name="triggerUri">the self-link for the attachment.</param>
            <param name="trigger">the updated trigger.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReplaceUserDefinedFunctionAsync(System.Uri,Microsoft.Azure.Documents.UserDefinedFunction,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Replaces a user defined function as an asynchronous operation.
            </summary>
            <param name="userDefinedFunctionUri">the self-link for the attachment.</param>
            <param name="function">the updated user defined function.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReplacePermissionAsync(System.Uri,Microsoft.Azure.Documents.Permission,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Replaces a permission as an asynchronous operation.
            </summary>
            <param name="permissionUri">the self-link for the attachment.</param>
            <param name="permission">the updated permission.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReplaceUserAsync(System.Uri,Microsoft.Azure.Documents.User,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Replaces a user as an asynchronous operation.
            </summary>
            <param name="userUri">the self-link for the attachment.</param>
            <param name="user">the updated user.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadAttachmentAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads an <see cref="T:Microsoft.Azure.Documents.Attachment"/> as an asynchronous operation.
            </summary>
            <param name="attachmentUri">A URI to the Attachment resource to be read.</param>
            <param name="options">The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps an <see cref="T:Microsoft.Azure.Documents.Attachment"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="attachmentUri"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads an Attachment resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection
            // - doc_id is the ID property of the Document
            // - attachment_id is the ID property of the Attachment resource you wish to read. 
            var attachLink = UriFactory.CreateAttachmentUri("db_id", "coll_id", "doc_id", "attachment_id");
            Attachment attachment = await client.ReadAttachmentAsync(attachLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the service. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Attachment"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadDatabaseAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Database"/> as an asynchronous operation.
            </summary>
            <param name="databaseUri">A URI to the Database resource to be read.</param>
            <param name="options">The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Database"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="databaseUri"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a Database resource where 
            // - db_id is the ID property of the Database you wish to read. 
            var dbLink = UriFactory.CreateDatabaseUri("db_id");
            Database database = await client.ReadDatabaseAsync(dbLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the service. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Database"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadDocumentAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Document"/> as an asynchronous operation.
            </summary>
            <param name="documentUri">A URI to the Document resource to be read.</param>
            <param name="options">The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Document"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="documentUri"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a Document resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection
            // - doc_id is the ID property of the Document you wish to read. 
            var docLink = UriFactory.CreateDocumentUri("db_id", "coll_id", "doc_id");
            Document document = await client.ReadDocumentAsync(docLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the service. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Document"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadDocumentCollectionAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> as an asynchronous operation.
            </summary>
            <param name="documentCollectionUri">A URI to the DocumentCollection resource to be read.</param>
            <param name="options">The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="documentCollectionUri"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a Document resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection you wish to read. 
            var collLink = UriFactory.CreateCollectionUri("db_id", "coll_id");
            DocumentCollection coll = await client.ReadDocumentCollectionAsync(collLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the service. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.DocumentCollection"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadStoredProcedureAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> as an asynchronous operation.
            </summary>
            <param name="storedProcedureUri">A URI to the StoredProcedure resource to be read.</param>
            <param name="options">The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="storedProcedureUri"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a StoredProcedure resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection 
            // - sproc_id is the ID property of the StoredProcedure you wish to read. 
            var sprocLink = UriFactory.CreateStoredProcedureUri("db_id", "coll_id", "sproc_id");
            StoredProcedure sproc = await client.ReadStoredProcedureAsync(sprocLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the service. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.StoredProcedure"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadTriggerAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Trigger"/> as an asynchronous operation.
            </summary>
            <param name="triggerUri">A URI to the Trigger resource to be read.</param>
            <param name="options">The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Trigger"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="triggerUri"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a Trigger resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection 
            // - trigger_id is the ID property of the Trigger you wish to read. 
            var triggerLink = UriFactory.CreateTriggerUri("db_id", "coll_id", "trigger_id");
            Trigger trigger = await client.ReadTriggerAsync(triggerLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the service. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Trigger"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadUserDefinedFunctionAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> as an asynchronous operation.
            </summary>
            <param name="functionUri">A URI to the User Defined Function resource to be read.</param>
            <param name="options">The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="functionUri"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a UserDefinedFunction resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection 
            // - udf_id is the ID property of the UserDefinedFunction you wish to read. 
            var udfLink = UriFactory.CreateUserDefinedFunctionUri("db_id", "coll_id", "udf_id");
            UserDefinedFunction udf = await client.ReadUserDefinedFunctionAsync(udfLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the service. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadPermissionAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Permission"/> resource as an asynchronous operation.
            </summary>
            <param name="permissionUri">A URI to the Permission resource to be read.</param>
            <param name="options">The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Permission"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="permissionUri"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a Permission resource where 
            // - db_id is the ID property of the Database
            // - user_id is the ID property of the User 
            // - permission_id is the ID property of the Permission you wish to read. 
            var permissionLink = UriFactory.CreatePermissionUri("db_id", "coll_id", "user_id");
            Permission permission = await client.ReadPermissionAsync(permissionLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the service. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Permission"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadUserAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.User"/> as an asynchronous operation.
            </summary>
            <param name="userUri">A URI to the User resource to be read.</param>
            <param name="options">The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.User"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="userUri"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a User resource where 
            // - db_id is the ID property of the Database
            // - user_id is the ID property of the User you wish to read. 
            var userLink = UriFactory.CreateUserUri("db_id", "user_id");
            User user = await client.ReadUserAsync(userLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the service. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.User"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadConflictAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Conflict"/> as an asynchronous operation.
            </summary>
            <param name="conflictUri">A URI to the Conflict resource to be read.</param>
            <param name="options">The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Conflict"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="conflictUri"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a Conflict resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection
            // - conflict_id is the ID property of the Conflict you wish to read. 
            var conflictLink = UriFactory.CreateConflictUri("db_id", "coll_id", "conflict_id");
            Conflict conflict = await client.ReadConflictAsync(conflictLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the service. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Conflict"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadAttachmentFeedAsync(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of attachments for a document as an asynchronous operation.
            </summary>
            <param name="attachmentsUri">the link for the attachments.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadDocumentCollectionFeedAsync(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of collections for a database as an asynchronous operation.
            </summary>
            <param name="collectionsUri">the link for the collections.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadStoredProcedureFeedAsync(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of stored procedures for a collection as an asynchronous operation.
            </summary>
            <param name="storedProceduresUri">the link for the stored procedures.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadTriggerFeedAsync(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of triggers for a collection as an asynchronous operation.
            </summary>
            <param name="triggersUri">the link for the triggers.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadUserDefinedFunctionFeedAsync(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of user defined functions for a collection as an asynchronous operation.
            </summary>
            <param name="userDefinedFunctionsUri">the link for the user defined functions.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadPermissionFeedAsync(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of permissions for a user as an asynchronous operation.
            </summary>
            <param name="permissionsUri">the link for the permissions.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadDocumentFeedAsync(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of documents for a collection as an asynchronous operation.
            </summary>
            <param name="documentsUri">the link for the documents.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadUserFeedAsync(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of users for a database as an asynchronous operation.
            </summary>
            <param name="usersUri">the link for the users.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadConflictFeedAsync(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of conflicts for a collection as an asynchronous operation.
            </summary>
            <param name="conflictsUri">the link for the conflicts.</param>
            <param name="options">The request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ExecuteStoredProcedureAsync``1(System.Uri,System.Object[])">
            <summary>
            Executes a stored procedure against a collection as an asynchronous operation.
            </summary>
            <typeparam name="TValue">the type of the stored procedure's return value.</typeparam>
            <param name="storedProcedureUri">the self-link to the collection.</param>
            <param name="procedureParams">the parameters for the stored procedure execution.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateAttachmentQuery``1(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Extension method to create a query for attachments.
            </summary>
            <typeparam name="T">the type of object to query.</typeparam>
            <param name="attachmentsUri">the link to the attachments.</param>
            <param name="feedOptions">the options for processing the query results feed.</param>
            <returns>the query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateAttachmentQuery``1(System.Uri,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Extension method to create a query for attachments.
            </summary>
            <param name="attachmentsUri">the link to the attachments.</param>
            <param name="sqlExpression">the sql query.</param>
            <param name="feedOptions">the options for processing the query results feed.</param>
            <returns>the query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateAttachmentQuery``1(System.Uri,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Extension method to create a query for attachments.
            </summary>
            <param name="attachmentsUri">the link to the attachments.</param>
            <param name="querySpec">the sql query.</param>
            <param name="feedOptions">the options for processing the query results feed.</param>
            <returns>the query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateAttachmentQuery(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Extension method to create a query for attachments.
            </summary>
            <param name="attachmentsUri">the link to the attachments.</param>
            <param name="feedOptions">the options for processing the query results feed.</param>
            <returns>the query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateAttachmentQuery(System.Uri,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Extension method to create a query for attachments.
            </summary>
            <param name="attachmentsUri">the link to the attachments.</param>
            <param name="sqlExpression">the sql query.</param>
            <param name="feedOptions">the options for processing the query results feed.</param>
            <returns>the query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateAttachmentQuery(System.Uri,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Extension method to create a query for attachments.
            </summary>
            <param name="attachmentsUri">the link to the attachments.</param>
            <param name="querySpec">the sql query.</param>
            <param name="feedOptions">the options for processing the query results feed.</param>
            <returns>the query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentCollectionQuery(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Extension method to create a query for document collections.
            </summary>
            <param name="databaseUri">the link to the collections.</param>
            <param name="feedOptions">the options for processing the query results feed.</param>
            <returns>the query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentCollectionQuery(System.Uri,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Extension method to create a query for document collections.
            </summary>
            <param name="databaseUri">the link to the collections.</param>
            <param name="sqlExpression">the sql query.</param>
            <param name="feedOptions">the options for processing the query results feed.</param>
            <returns>the query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentCollectionQuery(System.Uri,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Extension method to create a query for document collections.
            </summary>
            <param name="databaseUri">the link to the collections.</param>
            <param name="querySpec">the sql query.</param>
            <param name="feedOptions">the options for processing the query results feed.</param>
            <returns>the query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateStoredProcedureQuery(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Extension method to create query for stored procedures.
            </summary>
            <param name="storedProceduresUri">the link to the stored procedures.</param>
            <param name="feedOptions">the options for processing the query results feed.</param>
            <returns>the query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateStoredProcedureQuery(System.Uri,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Extension method to create query for stored procedures.
            </summary>
            <param name="storedProceduresUri">the link to the stored procedures.</param>
            <param name="sqlExpression">the sql query.</param>
            <param name="feedOptions">the options for processing the query results feed.</param>
            <returns>the query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateStoredProcedureQuery(System.Uri,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Extension method to create query for stored procedures.
            </summary>
            <param name="storedProceduresUri">the link to the stored procedures.</param>
            <param name="querySpec">the sql query.</param>
            <param name="feedOptions">the options for processing the query results feed.</param>
            <returns>the query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateTriggerQuery(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Extension method to create query for triggers.
            </summary>
            <param name="triggersUri">the link to the triggers.</param>
            <param name="feedOptions">the options for processing the query results feed.</param>
            <returns>the query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateTriggerQuery(System.Uri,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Extension method to create query for triggers.
            </summary>
            <param name="triggersUri">the link to the triggers.</param>
            <param name="sqlExpression">the sql query.</param>
            <param name="feedOptions">the options for processing the query results feed.</param>
            <returns>the query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateTriggerQuery(System.Uri,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Extension method to create query for triggers.
            </summary>
            <param name="triggersUri">the link to the triggers.</param>
            <param name="querySpec">the sql query.</param>
            <param name="feedOptions">the options for processing the query results feed.</param>
            <returns>the query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateUserDefinedFunctionQuery(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Extension method to create a query for user-defined functions.
            </summary>
            <param name="userDefinedFunctionsUri">the link to the user-defined functions.</param>
            <param name="feedOptions">the options for processing the query results feed.</param>
            <returns>the query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateUserDefinedFunctionQuery(System.Uri,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Extension method to create a query for user-defined functions.
            </summary>
            <param name="userDefinedFunctionsUri">the link to the user-defined functions.</param>
            <param name="sqlExpression">the sql query.</param>
            <param name="feedOptions">the options for processing the query results feed.</param>
            <returns>the query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateUserDefinedFunctionQuery(System.Uri,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Extension method to create a query for user-defined functions.
            </summary>
            <param name="userDefinedFunctionsUri">the link to the user-defined functions.</param>
            <param name="querySpec">the sql query.</param>
            <param name="feedOptions">the options for processing the query results feed.</param>
            <returns>the query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateConflictQuery(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Extension method to create a query for conflicts.
            </summary>
            <param name="conflictsUri">the link to the conflicts.</param>
            <param name="feedOptions">the options for processing the query results feed.</param>
            <returns>the query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateConflictQuery(System.Uri,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Extension method to create a query for conflicts.
            </summary>
            <param name="conflictsUri">the link to the conflicts.</param>
            <param name="sqlExpression">the sql query.</param>
            <param name="feedOptions">the options for processing the query results feed.</param>
            <returns>the query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateConflictQuery(System.Uri,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Extension method to create a query for conflicts.
            </summary>
            <param name="conflictsUri">the link to the conflicts.</param>
            <param name="querySpec">the sql query.</param>
            <param name="feedOptions">the options for processing the query results feed.</param>
            <returns>the query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentQuery``1(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions,System.Object)">
            <summary>
            Extension method to create a query for documents.
            </summary>
            <typeparam name="T">the type of object to query.</typeparam>
            <param name="documentCollectionOrDatabaseUri">The URI of the document collection, e.g. dbs/db_rid/colls/coll_rid/. 
            Alternatively, this can be a URI of the database when using an <see cref="T:Microsoft.Azure.Documents.Client.IPartitionResolver"/>, e.g. dbs/db_rid/</param>
            <param name="feedOptions">the options for processing the query results feed.</param>
            <param name="partitionKey">Optional partition key that can be used with an IPartitionResolver.</param>
            <returns>the query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentQuery``1(System.Uri,System.String,Microsoft.Azure.Documents.Client.FeedOptions,System.Object)">
            <summary>
            Extension method to create a query for documents.
            </summary>
            <typeparam name="T">the type of object to query.</typeparam>
            <param name="documentCollectionOrDatabaseUri">The URI of the document collection, e.g. dbs/db_rid/colls/coll_rid/. 
            Alternatively, this can be a URI of the database when using an <see cref="T:Microsoft.Azure.Documents.Client.IPartitionResolver"/>, e.g. dbs/db_rid/</param>
            <param name="sqlExpression">the sql query.</param>
            <param name="feedOptions">the options for processing the query results feed.</param>
            <param name="partitionKey">Optional partition key that can be used with an IPartitionResolver.</param>
            <returns>the query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentQuery``1(System.Uri,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions,System.Object)">
            <summary>
            Extension method to create a query for documents.
            </summary>
            <typeparam name="T">the type of object to query.</typeparam>
            <param name="documentCollectionOrDatabaseUri">The URI of the document collection, e.g. dbs/db_rid/colls/coll_rid/. 
            Alternatively, this can be a URI of the database when using an <see cref="T:Microsoft.Azure.Documents.Client.IPartitionResolver"/>, e.g. dbs/db_rid/</param>
            <param name="querySpec">the sql query.</param>
            <param name="feedOptions">the options for processing the query results feed.</param>
            <param name="partitionKey">Optional partition key that can be used with an IPartitionResolver.</param>
            <returns>the query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentQuery(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions,System.Object)">
            <summary>
            Extension method to create a query for documents.
            </summary>
            <param name="documentCollectionOrDatabaseUri">The URI of the document collection, e.g. dbs/db_rid/colls/coll_rid/. 
            Alternatively, this can be a URI of the database when using an <see cref="T:Microsoft.Azure.Documents.Client.IPartitionResolver"/>, e.g. dbs/db_rid/</param>
            <param name="feedOptions">the options for processing the query results feed.</param>
            <param name="partitionKey">Optional partition key that can be used with an IPartitionResolver.</param>
            <returns>the query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentQuery(System.Uri,System.String,Microsoft.Azure.Documents.Client.FeedOptions,System.Object)">
            <summary>
            Extension method to create a query for documents.
            </summary>
            <param name="documentCollectionOrDatabaseUri">The URI of the document collection, e.g. dbs/db_rid/colls/coll_rid/. 
            Alternatively, this can be a URI of the database when using an <see cref="T:Microsoft.Azure.Documents.Client.IPartitionResolver"/>, e.g. dbs/db_rid/</param>
            <param name="sqlExpression">the sql query.</param>
            <param name="feedOptions">the options for processing the query results feed.</param>
            <param name="partitionKey">Optional partition key that can be used with an IPartitionResolver.</param>
            <returns>the query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentQuery(System.Uri,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions,System.Object)">
            <summary>
            Extension method to create a query for documents.
            </summary>
            <param name="documentCollectionOrDatabaseUri">The URI of the document collection, e.g. dbs/db_rid/colls/coll_rid/. 
            Alternatively, this can be a URI of the database when using an <see cref="T:Microsoft.Azure.Documents.Client.IPartitionResolver"/>, e.g. dbs/db_rid/</param>
            <param name="querySpec">the sql query.</param>
            <param name="feedOptions">the options for processing the query results feed.</param>
            <param name="partitionKey">Optional partition key that can be used with an IPartitionResolver.</param>
            <returns>the query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateUserQuery(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Extension method to create a query for users.
            </summary>
            <param name="usersUri">the link to the users.</param>
            <param name="feedOptions">the options for processing the query results feed.</param>
            <returns>the query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateUserQuery(System.Uri,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Extension method to create a query for users.
            </summary>
            <param name="usersUri">the link to the users.</param>
            <param name="sqlExpression">the sql query.</param>
            <param name="feedOptions">the options for processing the query results feed.</param>
            <returns>the query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateUserQuery(System.Uri,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Extension method to create a query for users.
            </summary>
            <param name="usersUri">the link to the users.</param>
            <param name="querySpec">the sql query.</param>
            <param name="feedOptions">the options for processing the query results feed.</param>
            <returns>the query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreatePermissionQuery(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Extension method to create a query for permissions.
            </summary>
            <param name="permissionsUri">the link to the permissions.</param>
            <param name="feedOptions">the options for processing the query results feed.</param>
            <returns>the query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreatePermissionQuery(System.Uri,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Extension method to create a query for permissions.
            </summary>
            <param name="permissionsUri">the link to the permissions.</param>
            <param name="sqlExpression">the sql query.</param>
            <param name="feedOptions">the options for processing the query results feed.</param>
            <returns>the query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreatePermissionQuery(System.Uri,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Extension method to create a query for permissions.
            </summary>
            <param name="permissionsUri">the link to the permissions.</param>
            <param name="querySpec">the sql query.</param>
            <param name="feedOptions">the options for processing the query results feed.</param>
            <returns>the query result set.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.#ctor(System.Uri,System.Security.SecureString,Microsoft.Azure.Documents.Client.ConnectionPolicy,System.Nullable{Microsoft.Azure.Documents.ConsistencyLevel})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Client.DocumentClient"/> class using the 
            specified DocumentDB service endpoint, key, and connection policy.
            </summary>
            <param name="serviceEndpoint">
            The service endpoint to use to create the client.
            </param>
            <param name="authKey">
            The list of Permission objects to use to create the client.
            </param>
            <param name="connectionPolicy">
            (Optional) The connection policy for the client. If none is passed, the default is used <see cref="P:Microsoft.Azure.Documents.Client.DocumentClient.ConnectionPolicy"/>
            </param>
            <param name="desiredConsistencyLevel">
            (Optional) This can be used to weaken the database account consistency level for read operations. 
            If this is not set the database account consistency level will be used for all requests.
            </param>
            <remarks>
            The service endpoint and the authorization key can be obtained from the Azure Management Portal. 
            The authKey used here is encrypted for privacy when being used, and deleted from computer memory when no longer needed
            <para>
            Using Direct connectivity, wherever possible, is recommended
            </para>
            </remarks>
            <seealso cref="T:System.Uri"/>
            <seealso cref="T:System.Security.SecureString"/>
            <seealso cref="P:Microsoft.Azure.Documents.Client.DocumentClient.ConnectionPolicy"/>
            <seealso cref="P:Microsoft.Azure.Documents.Client.DocumentClient.ConsistencyLevel"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.#ctor(System.Uri,System.String,Microsoft.Azure.Documents.Client.ConnectionPolicy,System.Nullable{Microsoft.Azure.Documents.ConsistencyLevel})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Client.DocumentClient"/> class using the 
            specified service endpoint, an autorization key (or resource token) and a connection policy.
            </summary>
            <param name="serviceEndpoint">The service endpoint to use to create the client.</param>
            <param name="authKeyOrResourceToken">The authorization key or resource token to use to create the client.</param>
            <param name="connectionPolicy">(Optional) The connection policy for the client.</param>
            <param name="desiredConsistencyLevel">(Optional) The default consistency policy for client operations.</param>
            <remarks>
            The service endpoint can be obtained from the Azure Management Portal. 
            If you are connecting using one of the Master Keys, these can be obtained along with the endpoint from the Azure Management Portal
            If however you are connecting as a specific DocumentDB User, the value passed to <paramref name="authKeyOrResourceToken"/> is the ResourceToken obtained from the permission feed for the user.
            <para>
            Using Direct connectivity, wherever possible, is recommended.
            </para>
            </remarks>
            <seealso cref="T:System.Uri"/>
            <seealso cref="P:Microsoft.Azure.Documents.Client.DocumentClient.ConnectionPolicy"/>
            <seealso cref="P:Microsoft.Azure.Documents.Client.DocumentClient.ConsistencyLevel"/>/// 
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.#ctor(System.Uri,System.Collections.Generic.IList{Microsoft.Azure.Documents.Permission},Microsoft.Azure.Documents.Client.ConnectionPolicy,System.Nullable{Microsoft.Azure.Documents.ConsistencyLevel})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Client.DocumentClient"/> class using the 
            specified DocumentDB service endpoint, a list of permission objects and a connection policy.
            </summary>
            <param name="serviceEndpoint">The service endpoint to use to create the client.</param>
            <param name="permissionFeed">A list of Permission objects to use to create the client.</param>
            <param name="connectionPolicy">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.ConnectionPolicy"/> to use for this connection.</param>
            <param name="desiredConsistencyLevel">(Optional) The default consistency policy for client operations.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="permissionFeed"/> is not supplied.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="permissionFeed"/> is not a valid permission link.</exception>
            <remarks>
            If no <paramref name="connectionPolicy"/> is provided, then the default <see cref="T:Microsoft.Azure.Documents.Client.ConnectionPolicy"/> will be used.
            Using Direct connectivity, wherever possible, is recommended.
            </remarks>
            <seealso cref="T:System.Uri"/>
            <seealso cref="T:Microsoft.Azure.Documents.Permission"/>
            <seealso cref="P:Microsoft.Azure.Documents.Client.DocumentClient.ConnectionPolicy"/>
            <seealso cref="P:Microsoft.Azure.Documents.Client.DocumentClient.ConsistencyLevel"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.#ctor(System.Uri,System.Collections.Generic.IList{Microsoft.Azure.Documents.ResourceToken},Microsoft.Azure.Documents.Client.ConnectionPolicy,System.Nullable{Microsoft.Azure.Documents.ConsistencyLevel})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Client.DocumentClient"/> class using the 
            specified DocumentDB service endpoint, a list of <see cref="T:Microsoft.Azure.Documents.ResourceToken"/> objects and a connection policy.
            </summary>
            <param name="serviceEndpoint">The service endpoint to use to create the client.</param>
            <param name="resourceTokens">A list of <see cref="T:Microsoft.Azure.Documents.ResourceToken"/> objects to use to create the client.</param>
            <param name="connectionPolicy">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.ConnectionPolicy"/> to use for this connection.</param>
            <param name="desiredConsistencyLevel">(Optional) The default consistency policy for client operations.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="resourceTokens"/> is not supplied.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="resourceTokens"/> is not a valid permission link.</exception>
            <remarks>
            If no <paramref name="connectionPolicy"/> is provided, then the default <see cref="T:Microsoft.Azure.Documents.Client.ConnectionPolicy"/> will be used.
            Using Direct connectivity, wherever possible, is recommended.
            </remarks>
            <seealso cref="T:System.Uri"/>
            <seealso cref="T:Microsoft.Azure.Documents.Permission"/>
            <seealso cref="P:Microsoft.Azure.Documents.Client.DocumentClient.ConnectionPolicy"/>
            <seealso cref="P:Microsoft.Azure.Documents.Client.DocumentClient.ConsistencyLevel"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.#ctor(System.Uri,System.Collections.Generic.IDictionary{System.String,System.String},Microsoft.Azure.Documents.Client.ConnectionPolicy,System.Nullable{Microsoft.Azure.Documents.ConsistencyLevel})">
            <summary>
            Initializes a new instance of the Microsoft.Azure.Documents.Client.DocumentClient class using the 
            specified DocumentDB service endpoint, a dictionary of resource tokens and a connection policy.
            </summary>
            <param name="serviceEndpoint">The service endpoint to use to create the client.</param>
            <param name="resourceTokens">A dictionary of resource ids and resource tokens.</param>
            <param name="connectionPolicy">(Optional) The connection policy for the client.</param>
            <param name="desiredConsistencyLevel">(Optional) The default consistency policy for client operations.</param>
            <remarks>Using Direct connectivity, wherever possible, is recommended</remarks>
            <seealso cref="T:System.Uri"/>
            <seealso cref="P:Microsoft.Azure.Documents.Client.DocumentClient.ConnectionPolicy"/>
            <seealso cref="P:Microsoft.Azure.Documents.Client.DocumentClient.ConsistencyLevel"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.OpenAsync">
            <summary>
            Open the connection to validate that the client initialization is successful.
            </summary>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> object.
            </returns>
            <remarks>
            This method is recommended to be called, after the constructor, but before calling any other methods on the DocumentClient instance.
            If there are any initialization exceptions, this method will throw them (set on the task). 
            Alternately, calling any API will throw initialization exception at the first call.
            </remarks>
            <example>
            <code language="c#">
            <![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                await client.OpenAsync();
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.GetSessionToken(System.String)">
            <summary>
            Gets or sets the session object used for session consistency version tracking for specific collection.
            </summary>
            <param name="collectionLink">Collection for which session token must be retrieved.</param>
            <value>
            The session token used for version tracking when the consistency level is set to Session.
            </value>
            <remarks>
            The session token can be saved and supplied to a request via <see cref="P:Microsoft.Azure.Documents.Client.RequestOptions.SessionToken"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.Dispose">
            <summary>
            Disposes the client.
            </summary>
            <example>
            <code language="c#">
            <![CDATA[
            DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"); 
            if (client != null) client.Dispose();
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.Dispose(System.Boolean)">
            <summary>
            Disposes the resources.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.Finalize">
            <summary>
            Class destructor.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateAttachmentAsync(System.String,System.Object,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates an attachment as an asychronous operation.
            </summary>
            <param name="documentLink">The self-link of the parent document for this new attachment. E.g. dbs/db_rid/colls/col_rid/docs/doc_rid/ </param>
            <param name="attachment">The attachment object.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> object representing the service response for the asynchronous operation.
            </returns>
            <remarks>
            
            </remarks>
            <example>
            The example below creates a new document, and then creates a new attachment for that document
            <code language="c#">
            <![CDATA[
            dynamic d = new 
            {
                id = "DOC1800243243470"
            };
                
            Document doc = await client.CreateDocumentAsync(collectionSelfLink, d);
            
            //Create an Attachment which links to binary content stored somewhere else
            //Use the MediaLink property of Attachment to set where the binary resides
            //MediaLink can also point at another Attachment within DocumentDB.
            Attachment a = await client.CreateAttachmentAsync(doc.SelfLink, new Attachment { Id = "foo", ContentType = "text/plain", MediaLink = "link to your media" });
            
            //Because Attachment is a Dynamic object you can use SetPropertyValue method to any property you like
            //Even if that property doesn't exist. Here we are creating two new properties on the Attachment we created above.
            a.SetPropertyValue("Foo", "some value");
            a.SetPropertyValue("Bar", "some value");
            
            //Now update the Attachment object in the database to persist the new properties on the object
            client.ReplaceAttachmentAsync(a);
            
            //Let's now create another Attachment except this time we're going to use a Dynamic object instead 
            //of a <see cref="Microsoft.Azure.Documents.Attachment"/> as we did above.
            var b = await client.CreateAttachmentAsync(doc.SelfLink, new { id = "foo", contentType = "text/plain", media="link to your media", a = 5, b = 6 });
            
            //Now you will have a Document in your database with two attachments.
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Attachment"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDatabaseAsync(Microsoft.Azure.Documents.Database,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates a database resource as an asychronous operation.
            </summary>
            <param name="database">The specification for the <see cref="T:Microsoft.Azure.Documents.Database"/> to create.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>The <see cref="T:Microsoft.Azure.Documents.Database"/> that was created within a task object representing the service response for the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="database"/> is not set</exception>
            <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Database are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>400</term><description>BadRequest - This means something was wrong with the database object supplied. It is likely that an id was not supplied for the new Database.</description>
                </item>
                <item>
                    <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.Database"/> with an id matching the id field of <paramref name="database"/> already existed</description>
                </item>
            </list>
            </exception>
            <example>
            The example below creates a new <see cref="T:Microsoft.Azure.Documents.Database"/> with an Id property of 'MyDatabase'
            This code snippet is intended to be used from within an Asynchronous method as it uses the await keyword
            <code language="c#">
            <![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Database db = await client.CreateDatabaseAsync(new Database { Id = "MyDatabase" });
            }
            ]]>
            </code>
            </example>
            <example>
            If you would like to construct a <see cref="T:Microsoft.Azure.Documents.Database"/> from within a Synchronous method then you need to use the following code
            <code language="c#">
            <![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Database db = await client.CreateDatabaseAsync(new Database { Id = "MyDatabase" });
            }
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Database"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentAsync(System.String,System.Object,Microsoft.Azure.Documents.Client.RequestOptions,System.Boolean)">
            <summary>
            Creates a Document as an asychronous operation.
            </summary>
            <param name="documentsFeedOrDatabaseLink">The self-link of the <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> to create the document in. E.g. dbs/db_rid/colls/coll_rid/docs/ </param>
            <param name="document">The document object to create.</param>
            <param name="options">(Optional) Any request options you wish to set. E.g. Specifying a Trigger to execute when creating the document. <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/></param>
            <param name="disableAutomaticIdGeneration">(Optional) Disables the automatic id generation, If this is True the system will throw an exception if the id property is missing from the Document.</param>
            <returns>The <see cref="T:Microsoft.Azure.Documents.Document"/> that was created contained within a <see cref="T:System.Threading.Tasks.Task"/> object representing the service response for the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="documentsFeedOrDatabaseLink"/> or <paramref name="document"/> is not set.</exception>
            <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>400</term><description>BadRequest - This means something was wrong with the document supplied. It is likely that <paramref name="disableAutomaticIdGeneration"/> was true and an id was not supplied</description>
                </item>
                <item>
                    <term>403</term><description>Forbidden - This likely means the collection in to which you were trying to create the document is full.</description>
                </item>     
                <item>
                    <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.Document"/> with an id matching the id field of <paramref name="document"/> already existed</description>
                </item>
                <item>
                    <term>413</term><description>RequestEntityTooLarge - This means the <see cref="T:Microsoft.Azure.Documents.Document"/> exceeds the current max entity size. Consult documentation for limits and quotas.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            DocumentDB supports a number of different ways to work with documents. A document can extend <see cref="T:Microsoft.Azure.Documents.Resource"/>
            <code language="c#">
            <![CDATA[
            public class MyObject : Resource
            {
                public string MyProperty {get; set;}
            }
            
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.CreateDocumentAsync("dbs/db_rid/colls/coll_rid/docs/", new MyObject { MyProperty = "A Value" });
            }
            ]]>
            </code>
            </example>
            <example>
            A document can be any POCO object that can be serialized to JSON, even if it doesn't extend from <see cref="T:Microsoft.Azure.Documents.Resource"/> 
            <code language="c#">
            <![CDATA[
            public class MyPOCO
            {
                public string MyProperty {get; set;}
            }
            
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.CreateDocumentAsync("dbs/db_rid/colls/coll_rid/docs/", new MyPOCO { MyProperty = "A Value" });
            }
            ]]>
            </code>
            </example>
            <example>
            Finally, a Document can also be a dynamic object
            <code language="c#">
            <![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.CreateDocumentAsync("dbs/db_rid/colls/coll_rid/docs/", new { SomeProperty = "A Value" } );
            }
            ]]>
            </code>
            </example>
            <example>
            Create a Document and execute a Pre and Post Trigger
            <code language="c#">
            <![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.CreateDocumentAsync(
                    "dbs/db_rid/colls/coll_rid/docs/",
                    new { id = "DOC123213443" },
                    new RequestOptions
                    {
                        PreTriggerInclude = new List<string> { "MyPreTrigger" },
                        PostTriggerInclude = new List<string> { "MyPostTrigger" }
                    });
            }
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Document"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentCollectionAsync(System.String,Microsoft.Azure.Documents.DocumentCollection,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates a collection as an asychronous operation.
            </summary>
            <param name="databaseLink">The self-link of the database to create the collection in. E.g. dbs/db_rid/</param>
            <param name="documentCollection">The <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> object.</param>
            <param name="options">(Optional) Any <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> you wish to provide when creating a Collection. E.g. RequestOptions.OfferType="S1". </param>
            <returns>The <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> that was created contained within a <see cref="T:System.Threading.Tasks.Task"/> object representing the service response for the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="databaseLink"/> or <paramref name="documentCollection"/> is not set.</exception>
            <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an id was not supplied for the new collection.</description>
                </item>
                <item>
                    <term>403</term><description>Forbidden - This means you attempted to exceed your quota for collections. Contact support to have this quota increased.</description>
                </item>     
                <item>
                    <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> with an id matching the id you supplied already existed.</description>
                </item>
            </list>
            </exception>
            <example>
            
            <code language="c#">
            <![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                //Create a new collection with an Offer set to S3
                //Not passing in RequestOptions.OfferType will result in a collection with the default Offer set. 
                DocumentCollection coll = await client.CreateDocumentCollectionAsync(databaseLink,
                    new DocumentCollection { Id = "My Collection" }, 
                    new RequestOptions { OfferType = "S3"} );
            }
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.DocumentCollection"/>
            <seealso cref="T:Microsoft.Azure.Documents.Offer"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateStoredProcedureAsync(System.String,Microsoft.Azure.Documents.StoredProcedure,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates a stored procedure as an asychronous operation.
            </summary>
            <param name="collectionLink">The self-link of the collection to create the stored procedure in. E.g. dbs/db_rid/colls/col_rid/</param>
            <param name="storedProcedure">The <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> object to create.</param>
            <param name="options">(Optional) Any <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
            <returns>The <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> that was created contained within a <see cref="T:System.Threading.Tasks.Task"/> object representing the service response for the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="collectionLink"/> or <paramref name="storedProcedure"/> is not set.</exception>
            <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an Id was not supplied for the stored procedure or the Body was malformed.</description>
                </item>
                <item>
                    <term>403</term><description>Forbidden - You have reached your quota of stored procedures for the collection supplied. Contact support to have this quota increased.</description>
                </item>     
                <item>
                    <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> with an id matching the id you supplied already existed.</description>
                </item>
                <item>
                    <term>413</term><description>RequestEntityTooLarge - This means the body of the <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> you tried to create was too large.</description>
                </item>
            </list>
            </exception>
            <example>
            
            <code language="c#">
            <![CDATA[
            //Create a new stored procedure called "HelloWorldSproc" that takes in a single param called "name".
            StoredProcedure sproc = await client.CreateStoredProcedureAsync(collectionLink, new StoredProcedure
            {
               Id = "HelloWorldSproc",
               Body = @"function (name){
                           var response = getContext().getResponse();
                           response.setBody('Hello ' + name);
                        }"
            });
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.StoredProcedure"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateTriggerAsync(System.String,Microsoft.Azure.Documents.Trigger,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates a trigger as an asychronous operation.
            </summary>
            <param name="collectionLink">The self-link of the <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> to create the trigger in. E.g. dbs/db_rid/colls/col_rid/ </param>
            <param name="trigger">The <see cref="T:Microsoft.Azure.Documents.Trigger"/> object to create.</param>
            <param name="options">(Optional) Any <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
            <returns>A task object representing the service response for the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="collectionLink"/> or <paramref name="trigger"/> is not set.</exception>
            <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an Id was not supplied for the new trigger or that the Body was malformed.</description>
                </item>
                <item>
                    <term>403</term><description>Forbidden - You have reached your quota of triggers for the collection supplied. Contact support to have this quota increased.</description>
                </item>     
                <item>
                    <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.Trigger"/> with an id matching the id you supplied already existed.</description>
                </item>
                <item>
                    <term>413</term><description>RequestEntityTooLarge - This means the body of the <see cref="T:Microsoft.Azure.Documents.Trigger"/> you tried to create was too large.</description>
                </item>
            </list>
            </exception>
            <example>
            
            <code language="c#">
            <![CDATA[
            //Create a trigger that validates the contents of a document as it is created and adds a 'timestamp' property if one was not found. 
            Trigger trig = await client.CreateTriggerAsync(collectionLink, new Trigger
            {
                Id = "ValidateDocuments",
                Body = @"function validate() {
                                    var context = getContext();
                                    var request = context.getRequest();                                                             
                                    var documentToCreate = request.getBody();
                                    
                                    // validate properties
                                    if (!('timestamp' in documentToCreate)) {
                                        var ts = new Date();
                                        documentToCreate['timestamp'] = ts.getTime();
                                    }
                                    
                                    // update the document that will be created
                                    request.setBody(documentToCreate);
                                  }",
                TriggerType = TriggerType.Pre,
                TriggerOperation = TriggerOperation.Create
            });
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Trigger"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateUserDefinedFunctionAsync(System.String,Microsoft.Azure.Documents.UserDefinedFunction,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates a user defined function as an asychronous operation.
            </summary>
            <param name="collectionLink">The self-link of the <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> to create the user defined function in. E.g. dbs/db_rid/colls/col_rid/ </param>
            <param name="function">The <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> object to create.</param>
            <param name="options">(Optional) Any <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
            <returns>A task object representing the service response for the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="collectionLink"/> or <paramref name="function"/> is not set.</exception>
            <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an Id was not supplied for the new user defined function or that the Body was malformed.</description>
                </item>
                <item>
                    <term>403</term><description>Forbidden - You have reached your quota of user defined functions for the collection supplied. Contact support to have this quota increased.</description>
                </item>     
                <item>
                    <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> with an id matching the id you supplied already existed.</description>
                </item>
                <item>
                    <term>413</term><description>RequestEntityTooLarge - This means the body of the <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> you tried to create was too large.</description>
                </item>
            </list>
            </exception>
            <example>
            
            <code language="c#">
            <![CDATA[
            //Create a user defined function that converts a string to upper case
            UserDefinedFunction udf = client.CreateUserDefinedFunctionAsync(collectionLink, new UserDefinedFunction
            {
               Id = "ToUpper",
               Body = @"function toUpper(input) {
                                   return input.toUpperCase();
                                }",
            });
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreatePermissionAsync(System.String,Microsoft.Azure.Documents.Permission,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates a permission on a user object as an asychronous operation.
            </summary>
            <param name="userLink">The self-link of the user to create the permission for. E.g. dbs/db_rid/users/user_rid/ </param>
            <param name="permission">The <see cref="T:Microsoft.Azure.Documents.Permission"/> object.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>A task object representing the service response for the asynchronous operation which contains the created <see cref="T:Microsoft.Azure.Documents.Permission"/> object.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="userLink"/> or <paramref name="permission"/> is not set.</exception>
            <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>400</term><description>BadRequest - This means something was wrong with the request supplied.</description>
                </item>
                <item>
                    <term>403</term><description>Forbidden - You have reached your quota of permission objects. Contact support to have this quota increased.</description>
                </item>     
                <item>
                    <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.Permission"/> with an id matching the id you supplied already existed.</description>
                </item>
            </list>
            </exception>
            <example>
            
            <code language="c#">
            <![CDATA[
            //Create a read-only permission object for a specific user
            Permission p = await client.CreatePermissionAsync(userLink, new Permission { Id = "ReadPermission", PermissionMode = PermissionMode.Read });
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Permission"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateUserAsync(System.String,Microsoft.Azure.Documents.User,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates a permission on a user object as an asychronous operation.
            </summary>
            <param name="databaseLink">The self-link of the database to create the user in. E.g. dbs/db_rid/ </param>
            <param name="user">The <see cref="T:Microsoft.Azure.Documents.User"/> object to create.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>A task object representing the service response for the asynchronous operation which contains the created <see cref="T:Microsoft.Azure.Documents.User"/> object.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="databaseLink"/> or <paramref name="user"/> is not set.</exception>
            <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>400</term><description>BadRequest - This means something was wrong with the request supplied.</description>
                </item>
                <item>
                    <term>403</term><description>Forbidden - You have reached your quota of user objects for this database. Contact support to have this quota increased.</description>
                </item>     
                <item>
                    <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.User"/> with an id matching the id you supplied already existed.</description>
                </item>
            </list>
            </exception>
            <example>
            
            <code language="c#">
            <![CDATA[
            //Create a new user called joeBloggs in the specified database
            User user = await client.CreateUserAsync(databaseLink, new User { Id = "joeBloggs" });
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.User"/>   
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.DeleteAttachmentAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <returns></returns>
            <summary>
            Delete an <see cref="T:Microsoft.Azure.Documents.Attachment"/> from the database as an asynchronous operation.
            </summary>
            <param name="attachmentLink">The self-link of the <see cref="T:Microsoft.Azure.Documents.Attachment"/> to delete. E.g. dbs/db_rid/colls/col_rid/docs/doc_rid/attachments/attachment_rid/ </param>
            <param name="options">(Optional) Any options you wish to set for this request.</param>
            <returns>A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which will contain information about the request issued.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="attachmentLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Delete an attachment using its selfLink property
            //To get the attachmentLink you would have to query for the Attachment, using CreateAttachmentQuery(),  and then refer to its .SelfLink property
            await client.DeleteAttachmentAsync(attachmentLink);
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Attachment"/>  
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.DeleteDatabaseAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a <see cref="T:Microsoft.Azure.Documents.Database"/> as an asynchronous operation.
            </summary>
            <param name="databaseLink">The self-link of the <see cref="T:Microsoft.Azure.Documents.Database"/> to delete. E.g. dbs/db_rid/ </param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which will contain information about the request issued.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="databaseLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Delete a database using its selfLink property
            //To get the databaseLink you would have to query for the Database, using CreateDatabaseQuery(),  and then refer to its .SelfLink property
            await client.DeleteDatabaseAsync(databaseLink);
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Database"/>  
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> 
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.DeleteDocumentAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a <see cref="T:Microsoft.Azure.Documents.Document"/> as an asynchronous operation.
            </summary>
            <param name="documentLink">The self-link of the <see cref="T:Microsoft.Azure.Documents.Document"/> to delete. E.g. dbs/db_rid/colls/col_rid/docs/doc_rid/ </param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which will contain information about the request issued.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="documentLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Delete a document using its selfLink property
            //To get the documentLink you would have to query for the Document, using CreateDocumentQuery(),  and then refer to its .SelfLink property
            await client.DeleteDocumentAsync(documentLink);
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Database"/>  
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.DeleteDocumentCollectionAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> as an asynchronous operation.
            </summary>
            <param name="documentCollectionLink">The self-link of the <see cref="T:Microsoft.Azure.Documents.Document"/> to delete. E.g. dbs/db_rid/colls/col_rid/ </param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which will contain information about the request issued.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="documentCollectionLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Delete a collection using its selfLink property
            //To get the collectionLink you would have to query for the Collection, using CreateDocumentCollectionQuery(),  and then refer to its .SelfLink property
            await client.DeleteDocumentCollectionAsync(collectionLink);
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.DocumentCollection"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.DeleteStoredProcedureAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> as an asynchronous operation.
            </summary>
            <param name="storedProcedureLink">The self-link of the <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> to delete. E.g. dbs/db_rid/colls/col_rid/sprocs/sproc_rid/ </param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which will contain information about the request issued.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="storedProcedureLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Delete a stored procedure using its selfLink property.
            //To get the sprocLink you would have to query for the Stored Procedure, using CreateStoredProcedureQuery(),  and then refer to its .SelfLink property
            await client.DeleteStoredProcedureAsync(sprocLink);
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.StoredProcedure"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.DeleteTriggerAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a <see cref="T:Microsoft.Azure.Documents.Trigger"/> as an asynchronous operation.
            </summary>
            <param name="triggerLink">The self-link of the <see cref="T:Microsoft.Azure.Documents.Trigger"/> to delete. E.g. dbs/db_rid/colls/col_rid/triggers/trigger_rid/ </param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which will contain information about the request issued.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="triggerLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Delete a trigger using its selfLink property.
            //To get the triggerLink you would have to query for the Trigger, using CreateTriggerQuery(),  and then refer to its .SelfLink property
            await client.DeleteTriggerAsync(triggerLink);
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Trigger"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.DeleteUserDefinedFunctionAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> as an asynchronous operation.
            </summary>
            <param name="functionLink">The self-link of the <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> to delete. E.g. dbs/db_rid/colls/col_rid/udfs/udf_rid/ </param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which will contain information about the request issued.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="functionLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Delete a user defined function using its selfLink property.
            //To get the functionLink you would have to query for the User Defined Function, using CreateUserDefinedFunctionQuery(),  and then refer to its .SelfLink property
            await client.DeleteUserDefinedFunctionAsync(functionLink);
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.DeletePermissionAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a <see cref="T:Microsoft.Azure.Documents.Permission"/> as an asynchronous operation.
            </summary>
            <param name="permissionLink">The self-link of the <see cref="T:Microsoft.Azure.Documents.Permission"/> to delete. E.g. dbs/db_rid/users/user_rid/permissions/permission_rid/ </param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which will contain information about the request issued.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="permissionLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Delete a permission using its selfLink property.
            //To get the permissionLink you would have to query for the Permission object, using CreateStoredProcedureQuery(), and then refer to its .SelfLink property
            await client.DeletePermissionAsync(permissionLink);
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Permission"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.DeleteUserAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a <see cref="T:Microsoft.Azure.Documents.User"/> as an asynchronous operation.
            </summary>
            <param name="userLink">The self-link of the <see cref="T:Microsoft.Azure.Documents.User"/> to delete. E.g. dbs/db_rid/users/user_rid/ </param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which will contain information about the request issued.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="userLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Delete a user using its selfLink property.
            //To get the userLink you would have to query for the User object, using CreateUserQuery(), and then refer to its .SelfLink property
            await client.DeleteUserAsync(userLink);
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Permission"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.DeleteConflictAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Delete a <see cref="T:Microsoft.Azure.Documents.Conflict"/> as an asynchronous operation.
            </summary>
            <param name="conflictLink">The self-link of the <see cref="T:Microsoft.Azure.Documents.Conflict"/> to delete. E.g. dbs/db_rid/colls/coll_rid/conflicts/ </param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which will contain information about the request issued.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="conflictLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Delete a conflict using its selfLink property.
            //To get the conflictLink you would have to query for the Conflict object, using CreateConflictQuery(), and then refer to its .SelfLink property
            await client.DeleteConflictAsync(conflictLink);
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Conflict"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReplaceAttachmentAsync(Microsoft.Azure.Documents.Attachment,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Replaces a <see cref="T:Microsoft.Azure.Documents.Attachment"/> as an asynchronous operation.
            </summary>
            <param name="attachment">The updated <see cref="T:Microsoft.Azure.Documents.Attachment"/> to replace the existing resource with.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Attachment"/> containing the updated resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="attachment"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Fetch the item to be updated
            Attachment attachment = client.CreateAttachmentQuery(attachmentLink)
                                        .Where(r => r.Id == "attachment id")    
                                        .AsEnumerable()
                                        .SingleOrDefault();
                   
            //Update some properties on the found resource
            attachment.MediaLink = "updated value";
            
            //Now persist these changes to the database by replacing the original resource
            Attachment updated = await client.ReplaceAttachmentAsync(attachment);
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Attachment"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReplaceDocumentCollectionAsync(Microsoft.Azure.Documents.DocumentCollection,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Replaces a document collection as an asynchronous operation.
            </summary>
            <param name="documentCollection">the updated document collection.</param>
            <param name="options">the request options for the request.</param>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReplaceDocumentAsync(System.String,System.Object,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Replaces a <see cref="T:Microsoft.Azure.Documents.Document"/> as an asynchronous operation.
            </summary>
            <param name="documentSelfLink">the self-link of the document to be updated. E.g. dbs/db_rid/colls/col_rid/docs/doc_rid/ </param>
            <param name="document">The updated <see cref="T:Microsoft.Azure.Documents.Document"/> to replace the existing resource with.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Document"/> containing the updated resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="documentSelfLink"/> or <paramref name="document"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                </item>
            </list>
            </exception>
            <example>
            In this example, instead of using a strongly typed <see cref="T:Microsoft.Azure.Documents.Document"/>, we will work with our own POCO object and not rely on the dynamic nature of the Document class.
            <code language="c#">
            <![CDATA[
            public class MyPoco
            {
                public string Id {get; set;}
                public string MyProperty {get; set;}
            }
            
            //Get the doc back as a Document so you have access to doc.SelfLink
            Document doc = client.CreateDocumentQuery<Document>(collectionLink)
                                   .Where(r => r.Id == "doc id")    
                                   .AsEnumerable()
                                   .SingleOrDefault();
                   
            //Now dynamically cast doc back to your MyPoco
            MyPoco poco = (dynamic)doc;
            
            //Update some properties of the poco object
            poco.MyProperty = "updated value";
                   
            //Now persist these changes to the database using doc.SelLink and the update poco object
            Document updated = await client.ReplaceDocumentAsync(doc.SelfLink, poco);
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Document"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReplaceDocumentAsync(Microsoft.Azure.Documents.Document,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Replaces a <see cref="T:Microsoft.Azure.Documents.Document"/> as an asynchronous operation.
            </summary>
            <param name="document">The updated <see cref="T:Microsoft.Azure.Documents.Document"/> to replace the existing resource with.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Document"/> containing the updated resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="document"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                </item>
            </list>
            </exception>
            <example>
            This example uses <see cref="T:Microsoft.Azure.Documents.Document"/> and takes advantage of the fact that it is a dynamic object and uses SetProperty to dynamically update properties on the document
            <code language="c#">
            <![CDATA[
            //Fetch the Document to be updated
            Document doc = client.CreateDocumentQuery<Document>(collectionLink)
                                        .Where(r => r.Id == "doc id")    
                                        .AsEnumerable()
                                        .SingleOrDefault();
                   
            //Update some properties on the found resource
            doc.SetPropertyValue("MyProperty", "updated value");
            
            //Now persist these changes to the database by replacing the original resource
            Document updated = await client.ReplaceDocumentAsync(doc);
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Document"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReplaceStoredProcedureAsync(Microsoft.Azure.Documents.StoredProcedure,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Replaces a <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> as an asynchronous operation.
            </summary>
            <param name="storedProcedure">The updated <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> to replace the existing resource with.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> containing the updated resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="storedProcedure"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Fetch the resource to be updated
            StoredProcedure sproc = client.CreateStoredProcedureQuery(sprocsLink)
                                             .Where(r => r.Id == "sproc id")    
                                             .AsEnumerable()
                                             .SingleOrDefault();
                          
            //Update some properties on the found resource
            sproc.Body = "function () {new javascript body for sproc}";
                    
            //Now persist these changes to the database by replacing the original resource
            StoredProcedure updated = await client.ReplaceStoredProcedureAsync(sproc);
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.StoredProcedure"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReplaceTriggerAsync(Microsoft.Azure.Documents.Trigger,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Replaces a <see cref="T:Microsoft.Azure.Documents.Trigger"/> as an asynchronous operation.
            </summary>
            <param name="trigger">The updated <see cref="T:Microsoft.Azure.Documents.Trigger"/> to replace the existing resource with.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Trigger"/> containing the updated resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="trigger"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Fetch the resource to be updated
            Trigger trigger = client.CreateTriggerQuery(sprocsLink)
                                          .Where(r => r.Id == "trigger id")    
                                          .AsEnumerable()
                                          .SingleOrDefault();
                          
            //Update some properties on the found resource
            trigger.Body = "function () {new javascript body for trigger}";
                    
            //Now persist these changes to the database by replacing the original resource
            Trigger updated = await client.ReplaceTriggerAsync(sproc);
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Trigger"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReplaceUserDefinedFunctionAsync(Microsoft.Azure.Documents.UserDefinedFunction,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Replaces a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> as an asynchronous operation.
            </summary>
            <param name="function">The updated <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> to replace the existing resource with.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> containing the updated resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="function"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Fetch the resource to be updated
            UserDefinedFunction udf = client.CreateUserDefinedFunctionQuery(functionsLink)
                                                .Where(r => r.Id == "udf id")    
                                                .AsEnumerable()
                                                .SingleOrDefault();
                          
            //Update some properties on the found resource
            udf.Body = "function () {new javascript body for udf}";
                    
            //Now persist these changes to the database by replacing the original resource
            UserDefinedFunction updated = await client.ReplaceUserDefinedFunctionAsync(udf);
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReplacePermissionAsync(Microsoft.Azure.Documents.Permission,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Replaces a <see cref="T:Microsoft.Azure.Documents.Permission"/> as an asynchronous operation.
            </summary>
            <param name="permission">The updated <see cref="T:Microsoft.Azure.Documents.Permission"/> to replace the existing resource with.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Permission"/> containing the updated resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="permission"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Fetch the resource to be updated
            Permission permission = client.CreatePermissionQuery(permissionsLink)
                                                .Where(r => r.Id == "permission id")    
                                                .AsEnumerable()
                                                .SingleOrDefault();
                          
            //Change the permission mode to All
            permission.PermissionMode = PermissionMode.All;
                    
            //Now persist these changes to the database by replacing the original resource
            Permission updated = await client.ReplacePermissionAsync(permission);
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Permission"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReplaceUserAsync(Microsoft.Azure.Documents.User,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Replaces a <see cref="T:Microsoft.Azure.Documents.User"/> as an asynchronous operation.
            </summary>
            <param name="user">The updated <see cref="T:Microsoft.Azure.Documents.User"/> to replace the existing resource with.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.User"/> containing the updated resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="user"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Fetch the resource to be updated
            User user = client.CreateUserQuery(usersLink)
                                     .Where(r => r.Id == "user id")    
                                     .AsEnumerable()
                                     .SingleOrDefault();
                          
            //Change the user mode to All
            user.Id = "some new method";
                    
            //Now persist these changes to the database by replacing the original resource
            User updated = await client.ReplaceUserAsync(user);
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.User"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReplaceOfferAsync(Microsoft.Azure.Documents.Offer)">
            <summary>
            Replaces a <see cref="T:Microsoft.Azure.Documents.Offer"/> as an asynchronous operation.
            </summary>
            <param name="offer">The updated <see cref="T:Microsoft.Azure.Documents.Offer"/> to replace the existing resource with.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Offer"/> containing the updated resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="offer"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Fetch the resource to be updated
            Offer offer = client.CreateOfferQuery()
                                     .Where(r => r.ResourceLink == "collection selfLink")    
                                     .AsEnumerable()
                                     .SingleOrDefault();
                          
            //Change the user mode to All
            offer.OfferType = "S3";
                    
            //Now persist these changes to the database by replacing the original resource
            Offer updated = await client.ReplaceOfferAsync(offer);
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Offer"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadAttachmentAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads an <see cref="T:Microsoft.Azure.Documents.Attachment"/> as an asynchronous operation.
            </summary>
            <param name="attachmentLink">The link to the attachment to be read.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Attachment"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="attachmentLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads an Attachment resource where 
            // - sample_db is the ID property of the Database
            // - sample_coll is the ID property of the DocumentCollection
            // - sample_doc is the ID property of the Document
            // - attachment_id is the ID property of the Attachment resource you wish to read. 
            var attachLink = "/dbs/sample_db/colls/sample_coll/docs/sample_doc/attachments/attachment_id/";
            Attachment attachment = await client.ReadAttachmentAsync(attachLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the service. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            <para>
            The example shown uses ID-based links, where the link is composed of the ID properties used when the resources were created.
            You can still use the <see cref="P:Microsoft.Azure.Documents.Resource.SelfLink"/> property of the Database if you prefer. A self-link is a URI for a resource that is made up of Resource Identifiers  (or the _rid properties).
            ID-based links and SelfLink will both work.
            The format for <paramref name="attachmentLink"/> is always "/dbs/{db identifier}/colls/{coll identifier}/docs/{doc identifier}/attachments/{attachment identifier}" only 
            the values within the {} change depending on which method you wish to use to address the resource.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Attachment"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
            <seealso cref="T:System.Uri"/> 
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadDatabaseAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Database"/> as an asynchronous operation.
            </summary>
            <param name="databaseLink">The link of the Database resource to be read.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Database"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="databaseLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a Database resource where 
            // - database_id is the ID property of the Database resource you wish to read. 
            var dbLink = "/dbs/database_id";
            Database database = await client.ReadDatabaseAsync(dbLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the Database. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            <para>
            The example shown uses ID-based links, where the link is composed of the ID properties used when the resources were created.
            You can still use the <see cref="P:Microsoft.Azure.Documents.Resource.SelfLink"/> property of the Database if you prefer. A self-link is a URI for a resource that is made up of Resource Identifiers  (or the _rid properties).
            ID-based links and SelfLink will both work.
            The format for <paramref name="databaseLink"/> is always "/dbs/{db identifier}" only 
            the values within the {} change depending on which method you wish to use to address the resource.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Database"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
            <seealso cref="T:System.Uri"/> 
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadDocumentAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Document"/> as an asynchronous operation.
            </summary>
            <param name="documentLink">The link for the document to be read.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Document"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="documentLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //This reads a document record from a database & collection where 
            // - sample_database is the ID of the database
            // - sample_collection is the ID of the collection
            // - document_id is the ID of the document resource
            var docLink = "/dbs/sample_database/colls/sample_collection/docs/document_id";
            Document doc = await client.ReadDocumentAsync(docLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the Database. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            <para>
            The example shown uses ID-based links, where the link is composed of the ID properties used when the resources were created.
            You can still use the <see cref="P:Microsoft.Azure.Documents.Resource.SelfLink"/> property of the Document if you prefer. A self-link is a URI for a resource that is made up of Resource Identifiers  (or the _rid properties).
            ID-based links and SelfLink will both work.
            The format for <paramref name="documentLink"/> is always "/dbs/{db identifier}/colls/{coll identifier}/docs/{doc identifier}" only 
            the values within the {} change depending on which method you wish to use to address the resource.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Document"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
            <seealso cref="T:System.Uri"/> 
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadDocumentCollectionAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> as an asynchronous operation.
            </summary>
            <param name="documentCollectionLink">The link for the DocumentCollection to be read.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="documentCollectionLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //This reads a DocumentCollection record from a database where 
            // - sample_database is the ID of the database
            // - collection_id is the ID of the collection resource to be read
            var collLink = "/dbs/sample_database/colls/collection_id";
            DocumentCollection coll = await client.ReadDocumentCollectionAsync(collLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the Database. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            <para>
            The example shown uses ID-based links, where the link is composed of the ID properties used when the resources were created.
            You can still use the <see cref="P:Microsoft.Azure.Documents.Resource.SelfLink"/> property of the DocumentCollection if you prefer. A self-link is a URI for a resource that is made up of Resource Identifiers  (or the _rid properties).
            ID-based links and SelfLink will both work.
            The format for <paramref name="documentCollectionLink"/> is always "/dbs/{db identifier}/colls/{coll identifier}" only 
            the values within the {} change depending on which method you wish to use to address the resource.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.DocumentCollection"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
            <seealso cref="T:System.Uri"/> 
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadStoredProcedureAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> as an asynchronous operation.
            </summary>
            <param name="storedProcedureLink">The link of the stored procedure to be read.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="storedProcedureLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a StoredProcedure from a Database and DocumentCollection where 
            // - sample_database is the ID of the database
            // - sample_collection is the ID of the collection
            // - sproc_id is the ID of the stored procedure to be read
            var sprocLink = "/dbs/sample_database/colls/sample_collection/sprocs/sproc_id";
            StoredProcedure sproc = await client.ReadStoredProcedureAsync(sprocLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the Database. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            <para>
            The example shown uses ID-based links, where the link is composed of the ID properties used when the resources were created.
            You can still use the <see cref="P:Microsoft.Azure.Documents.Resource.SelfLink"/> property of the Stored Procedure if you prefer. A self-link is a URI for a resource that is made up of Resource Identifiers  (or the _rid properties).
            ID-based links and SelfLink will both work.
            The format for <paramref name="storedProcedureLink"/> is always "/dbs/{db identifier}/colls/{coll identifier}/sprocs/{sproc identifier}" 
            only the values within the {...} change depending on which method you wish to use to address the resource.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.StoredProcedure"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
            <seealso cref="T:System.Uri"/> 
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadTriggerAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Trigger"/> as an asynchronous operation.
            </summary>
            <param name="triggerLink">The link to the Trigger to be read.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Trigger"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="triggerLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a Trigger from a Database and DocumentCollection where 
            // - sample_database is the ID of the database
            // - sample_collection is the ID of the collection
            // - trigger_id is the ID of the trigger to be read
            var triggerLink = "/dbs/sample_database/colls/sample_collection/triggers/trigger_id";
            Trigger trigger = await client.ReadTriggerAsync(triggerLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the Database. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            <para>
            The example shown uses ID-based links, where the link is composed of the ID properties used when the resources were created.
            You can still use the <see cref="P:Microsoft.Azure.Documents.Resource.SelfLink"/> property of the Trigger if you prefer. A self-link is a URI for a resource that is made up of Resource Identifiers  (or the _rid properties).
            ID-based links and SelfLink will both work.
            The format for <paramref name="triggerLink"/> is always "/dbs/{db identifier}/colls/{coll identifier}/triggers/{trigger identifier}" 
            only the values within the {...} change depending on which method you wish to use to address the resource.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Trigger"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
            <seealso cref="T:System.Uri"/> 
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadUserDefinedFunctionAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> as an asynchronous operation.
            </summary>
            <param name="functionLink">The link to the User Defined Function to be read.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="functionLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a User Defined Function from a Database and DocumentCollection where 
            // - sample_database is the ID of the database
            // - sample_collection is the ID of the collection
            // - udf_id is the ID of the user-defined function to be read
            var udfLink = "/dbs/sample_database/colls/sample_collection/udfs/udf_id";
            UserDefinedFunction udf = await client.ReadUserDefinedFunctionAsync(udfLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the Database. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            <para>
            The example shown uses ID-based links, where the link is composed of the ID properties used when the resources were created.
            You can still use the <see cref="P:Microsoft.Azure.Documents.Resource.SelfLink"/> property of the User Defined Function if you prefer. A self-link is a URI for a resource that is made up of Resource Identifiers  (or the _rid properties).
            ID-based links and SelfLink will both work.
            The format for <paramref name="functionLink"/> is always "/dbs/{db identifier}/colls/{coll identifier}/udfs/{udf identifier}" 
            only the values within the {...} change depending on which method you wish to use to address the resource.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
            <seealso cref="T:System.Uri"/> 
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadPermissionAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Permission"/> as an asynchronous operation.
            </summary>
            <param name="permissionLink">The link for the Permission resource to be read.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Permission"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="permissionLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a Permission resource from a Database and User where 
            // - sample_database is the ID of the database
            // - sample_user is the ID of the user
            // - permission_id is the ID of the permission to be read
            var permissionLink = "/dbs/sample_database/users/sample_user/permissions/permission_id";
            Permission permission = await client.ReadPermissionAsync(permissionLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the Database. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            <para>
            The example shown uses ID-based links, where the link is composed of the ID properties used when the resources were created.
            You can still use the <see cref="P:Microsoft.Azure.Documents.Resource.SelfLink"/> property of the Permission if you prefer. A self-link is a URI for a resource that is made up of Resource Identifiers  (or the _rid properties).
            ID-based links and SelfLink will both work.
            The format for <paramref name="permissionLink"/> is always "/dbs/{db identifier}/users/{user identifier}/permissions/{permission identifier}" 
            only the values within the {...} change depending on which method you wish to use to address the resource.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Permission"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
            <seealso cref="T:System.Uri"/> 
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadUserAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.User"/> as an asynchronous operation.
            </summary>
            <param name="userLink">The link to the User resource to be read.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.User"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="userLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a User resource from a Database
            // - sample_database is the ID of the database
            // - user_id is the ID of the user to be read
            var userLink = "/dbs/sample_database/users/user_id";
            User user = await client.ReadUserAsync(userLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the Database. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            <para>
            The example shown uses ID-based links, where the link is composed of the ID properties used when the resources were created.
            You can still use the <see cref="P:Microsoft.Azure.Documents.Resource.SelfLink"/> property of the User if you prefer. A self-link is a URI for a resource that is made up of Resource Identifiers  (or the _rid properties).
            ID-based links and SelfLink will both work.
            The format for <paramref name="userLink"/> is always "/dbs/{db identifier}/users/{user identifier}" 
            only the values within the {...} change depending on which method you wish to use to address the resource.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.User"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
            <seealso cref="T:System.Uri"/> 
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadConflictAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Conflict"/> as an asynchronous operation.
            </summary>
            <param name="conflictLink">The link to the Conflict to be read.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Conflict"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="conflictLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads a Conflict resource from a Database
            // - sample_database is the ID of the database
            // - sample_collection is the ID of the collection
            // - conflict_id is the ID of the conflict to be read
            var conflictLink = "/dbs/sample_database/colls/sample_collection/conflicts/conflict_id";
            Conflict conflict = await client.ReadConflictAsync(conflictLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the Database. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            <para>
            The example shown uses ID-based links, where the link is composed of the ID properties used when the resources were created.
            You can still use the <see cref="P:Microsoft.Azure.Documents.Resource.SelfLink"/> property of the Conflict if you prefer. A self-link is a URI for a resource that is made up of Resource Identifiers  (or the _rid properties).
            ID-based links and SelfLink will both work.
            The format for <paramref name="conflictLink"/> is always "/dbs/{db identifier}/colls/{collectioon identifier}/conflicts/{conflict identifier}" 
            only the values within the {...} change depending on which method you wish to use to address the resource.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Conflict"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
            <seealso cref="T:System.Uri"/> 
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadOfferAsync(System.String)">
            <summary>
            Reads an <see cref="T:Microsoft.Azure.Documents.Offer"/> as an asynchronous operation.
            </summary>
            <param name="offerLink">The link to the Offer to be read.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Offer"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="offerLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            //Reads an Offer resource from a Database
            // - offer_id is the ID of the conflict to be read
            var offerLink = "/offers/offer_id";
            Offer offer = await client.ReadOfferAsync(offerLink);
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            Doing a read of a resource is the most efficient way to get a resource from the Database. If you know the resource's ID, do a read instead of a query by ID.
            </para>
            <para>
            For an Offer, id is always generated internally by the system when the linked resource is created. id and _rid are always the same for Offer.
            </para>
            <para>
            The format for <paramref name="offerLink"/> is always "/offers/{offer identifier}" 
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Conflict"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
            <seealso cref="T:System.Uri"/> 
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadAttachmentFeedAsync(System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.Attachment"/> for a document as an asynchronous operation.
            </summary>
            <param name="attachmentsLink">The SelfLink of the resources to be read. E.g. /dbs/db_rid/colls/coll_rid/docs/doc_rid/attachments/ </param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Attachment"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="attachmentsLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource feed you tried to read did not exist. Check the parent rids are correct.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read Attachment feed 10 items at a time until there are no more to read
                FeedResponse<Attachment> response = await client.ReadAttachmentFeedAsync("/dbs/db_rid/colls/coll_rid/docs/doc_rid/attachments/ ", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Attachment"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadDatabaseFeedAsync(Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.Database"/> for a database account as an asynchronous operation.
            </summary>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Database"/> containing the read resource record.
            </returns>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<Database> response = await client.ReadDatabaseFeedAsync(new FeedOptions 
                                                                            { 
                                                                                MaxItemCount = 10, 
                                                                                RequestContinuation = continuation 
                                                                            });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Database"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadDocumentCollectionFeedAsync(System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> for a database as an asynchronous operation.
            </summary>
            <param name="collectionsLink">The SelfLink of the resources to be read. E.g. /dbs/db_rid/colls/ </param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="collectionsLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource feed you tried to read did not exist. Check the parent rids are correct.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<DocumentCollection> response = await client.ReadDocumentCollectionFeedAsync("/dbs/db_rid/colls/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.DocumentCollection"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadStoredProcedureFeedAsync(System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> for a collection as an asynchronous operation.
            </summary>
            <param name="storedProceduresLink">The SelfLink of the resources to be read. E.g. /dbs/db_rid/colls/col_rid/sprocs/ </param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="storedProceduresLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource feed you tried to read did not exist. Check the parent rids are correct.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<StoredProcedure> response = await client.ReadStoredProcedureFeedAsync("/dbs/db_rid/colls/col_rid/sprocs/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.StoredProcedure"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadTriggerFeedAsync(System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.Trigger"/> for a collection as an asynchronous operation.
            </summary>
            <param name="triggersLink">The SelfLink of the resources to be read. E.g. /dbs/db_rid/colls/col_rid/triggers/ </param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Trigger"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="triggersLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource feed you tried to read did not exist. Check the parent rids are correct.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<Trigger> response = await client.ReadTriggerFeedAsync("/dbs/db_rid/colls/col_rid/triggers/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Trigger"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadUserDefinedFunctionFeedAsync(System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> for a collection as an asynchronous operation.
            </summary>
            <param name="userDefinedFunctionsLink">The SelfLink of the resources to be read. E.g. /dbs/db_rid/colls/col_rid/udfs/ </param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="userDefinedFunctionsLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource feed you tried to read did not exist. Check the parent rids are correct.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<UserDefinedFunction> response = await client.ReadUserDefinedFunctionFeedAsync("/dbs/db_rid/colls/col_rid/udfs/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadPermissionFeedAsync(System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.Permission"/> for a user as an asynchronous operation.
            </summary>
            <param name="permissionsLink">The SelfLink of the resources to be read. E.g. /dbs/db_rid/users/user_rid/permissions/ </param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Permission"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="permissionsLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource feed you tried to read did not exist. Check the parent rids are correct.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<Permission> response = await client.ReadPermissionFeedAsync("/dbs/db_rid/users/user_rid/permissions/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Permission"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadDocumentFeedAsync(System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of documents for a specified collection. This takes returns a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which will contain an enumerable list of dynamic objects.
            </summary>
            <param name="documentsLink">The SelfLink of the resources to be read. E.g. /dbs/db_rid/colls/coll_rid/docs/ </param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> containing dynamic objects representing the items in the feed.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="documentsLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource feed you tried to read did not exist. Check the parent rids are correct.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<dynamic> response = await client.ReadDocumentFeedAsync("/dbs/db_rid/colls/coll_rid/docs/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]>
            </code>
            </example>
            <remarks>
            Instead of FeedResponse{Document} this method takes advantage of dynamic objects in .NET. This way a single feed result can contain any kind of Document, or POCO object. 
            This is important becuse a DocumentCollection can contain different kinds of documents.
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadUserFeedAsync(System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.User"/> for a database as an asynchronous operation.
            </summary>
            <param name="usersLink">The SelfLink of the resources to be read. E.g. /dbs/db_rid/users/ </param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.User"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="usersLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource feed you tried to read did not exist. Check the parent rids are correct.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<User> response = await client.ReadUserFeedAsync("/dbs/db_rid/users/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.User"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadConflictFeedAsync(System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.Conflict"/> for a collection as an asynchronous operation.
            </summary>
            <param name="conflictsLink">The SelfLink of the resources to be read. E.g. /dbs/db_rid/colls/coll_rid/conflicts/ </param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Conflict"/> containing the read resource record.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="conflictsLink"/> is not set.</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>404</term><description>NotFound - This means the resource feed you tried to read did not exist. Check the parent rids are correct.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<Conflict> response = await client.ReadConflictAsync("/dbs/db_rid/colls/coll_rid/conflicts/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Conflict"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadOffersFeedAsync(Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.Offer"/> for a database account as an asynchronous operation.
            </summary>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            A <see cref="N:System.Threading.Tasks"/> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> which wraps a <see cref="T:Microsoft.Azure.Documents.Offer"/> containing the read resource record.
            </returns>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            <code language="c#">
            <![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<Offer> response = await client.ReadOfferAsync(new FeedOptions 
                                                                            { 
                                                                                MaxItemCount = 10, 
                                                                                RequestContinuation = continuation 
                                                                            });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Offer"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ExecuteStoredProcedureAsync``1(System.String,System.Object[])">
            <summary>
            Executes a stored procedure against a collection as an asynchronous operation.
            </summary>
            <typeparam name="TValue">The type of the stored procedure's return value.</typeparam>
            <param name="storedProcedureLink">The self-link to the stored procedure to execute.</param>
            <param name="procedureParams">(Optional) An array of dynamic objects representing the parameters for the stored procedure.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="storedProcedureLink"/> is not set.</exception>
            <returns>The task object representing the service response for the asynchronous operation which would contain any response set in the stored procedure.</returns>
            <example>
            <code language="c#">
            <![CDATA[
            //Execute a StoredProcedure with ResourceId of "sproc_rid" that takes two "Player" documents, does some stuff, and returns a bool
            StoredProcedureResponse<bool> sprocResponse = await client.ExecuteStoredProcedureAsync<bool>(
                                                                    "/dbs/db_rid/colls/col_rid/sprocs/sproc_rid/",
                                                                    new Player { id="1", name="joe" } , 
                                                                    new Player { id="2", name="john" } 
                                                                );
                                                                
            if (sprocResponse.Response) Console.WriteLine("Congrats, the stored procedure did some stuff");
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.StoredProcedure"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.StoredProcedureResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ExecuteStoredProcedureAsync``1(System.String,Microsoft.Azure.Documents.Client.RequestOptions,System.Object[])">
            <summary>
            Executes a stored procedure against a partitioned collection as an asynchronous operation, specifiying a target partition.
            </summary>
            <typeparam name="TValue">The type of the stored procedure's return value.</typeparam>
            <param name="storedProcedureLink">The self-link to the stored procedure to execute.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <param name="procedureParams">(Optional) An array of dynamic objects representing the parameters for the stored procedure.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="storedProcedureLink"/> is not set.</exception>
            <returns>The task object representing the service response for the asynchronous operation which would contain any response set in the stored procedure.</returns>
            <example>
            <code language="c#">
            <![CDATA[
            //Execute a StoredProcedure with ResourceId of "sproc_rid" that takes two "Player" documents, does some stuff, and returns a bool
            StoredProcedureResponse<bool> sprocResponse = await client.ExecuteStoredProcedureAsync<bool>(
                                                                    "/dbs/db_rid/colls/col_rid/sprocs/sproc_rid/", 
                                                                    new RequestOptions { PartitionKey = new PartitionKey(1) },
                                                                    new Player { id="1", name="joe" } , 
                                                                    new Player { id="2", name="john" } 
                                                                );
                                                                
            if (sprocResponse.Response) Console.WriteLine("Congrats, the stored procedure did some stuff");
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.StoredProcedure"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.StoredProcedureResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.UpsertAttachmentAsync(System.String,System.Object,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Upserts an attachment as an asychronous operation.
            </summary>
            <param name="documentLink">The self-link of the parent document for this new attachment. E.g. dbs/db_rid/colls/col_rid/docs/doc_rid/ </param>
            <param name="attachment">The attachment object.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> object representing the service response for the asynchronous operation.
            </returns>
            <remarks>
            
            </remarks>
            <example>
            The example below creates a new document, and then upserts a new attachment for that document
            <code language="c#">
            <![CDATA[
            dynamic d = new 
            {
                id = "DOC1800243243470"
            };
                
            Document doc = await client.CreateDocumentAsync(collectionSelfLink, d);
            
            //Upsert an Attachment which links to binary content stored somewhere else
            //Use the MediaLink property of Attachment to set where the binary resides
            //MediaLink can also point at another Attachment within DocumentDB.
            Attachment a = await client.UpsertAttachmentAsync(doc.SelfLink, new Attachment { Id = "foo", ContentType = "text/plain", MediaLink = "link to your media" });
            
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Attachment"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.UpsertDatabaseAsync(Microsoft.Azure.Documents.Database,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Upserts a database resource as an asychronous operation.
            </summary>
            <param name="database">The specification for the <see cref="T:Microsoft.Azure.Documents.Database"/> to upsert.</param>
            <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <returns>The <see cref="T:Microsoft.Azure.Documents.Database"/> that was upserted within a task object representing the service response for the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="database"/> is not set</exception>
            <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Database are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>400</term><description>BadRequest - This means something was wrong with the database object supplied. It is likely that an id was not supplied for the new Database.</description>
                </item>
                <item>
                    <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.Database"/> with an id matching the id field of <paramref name="database"/> already existed</description>
                </item>
            </list>
            </exception>
            <example>
            The example below upserts a new <see cref="T:Microsoft.Azure.Documents.Database"/> with an Id property of 'MyDatabase'
            This code snippet is intended to be used from within an Asynchronous method as it uses the await keyword
            <code language="c#">
            <![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Database db = await client.UpsertDatabaseAsync(new Database { Id = "MyDatabase" });
            }
            ]]>
            </code>
            
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Database"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.UpsertDocumentAsync(System.String,System.Object,Microsoft.Azure.Documents.Client.RequestOptions,System.Boolean)">
            <summary>
            Upserts a Document as an asychronous operation.
            </summary>
            <param name="documentsFeedOrDatabaseLink">The self-link of the <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> to upsert the document in. E.g. dbs/db_rid/colls/coll_rid/docs/ </param>
            <param name="document">The document object to upsert.</param>
            <param name="options">(Optional) Any request options you wish to set. E.g. Specifying a Trigger to execute when creating the document. <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/></param>
            <param name="disableAutomaticIdGeneration">(Optional) Disables the automatic id generation, If this is True the system will throw an exception if the id property is missing from the Document.</param>
            <returns>The <see cref="T:Microsoft.Azure.Documents.Document"/> that was upserted contained within a <see cref="T:System.Threading.Tasks.Task"/> object representing the service response for the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="documentsFeedOrDatabaseLink"/> or <paramref name="document"/> is not set.</exception>
            <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>400</term><description>BadRequest - This means something was wrong with the document supplied. It is likely that <paramref name="disableAutomaticIdGeneration"/> was true and an id was not supplied</description>
                </item>
                <item>
                    <term>403</term><description>Forbidden - This likely means the collection in to which you were trying to upsert the document is full.</description>
                </item>     
                <item>
                    <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.Document"/> with an id matching the id field of <paramref name="document"/> already existed</description>
                </item>
                <item>
                    <term>413</term><description>RequestEntityTooLarge - This means the <see cref="T:Microsoft.Azure.Documents.Document"/> exceeds the current max entity size. Consult documentation for limits and quotas.</description>
                </item>
                <item>
                    <term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description>
                </item>
            </list>
            </exception>
            <example>
            DocumentDB supports a number of different ways to work with documents. A document can extend <see cref="T:Microsoft.Azure.Documents.Resource"/>        
            <code language="c#">
            <![CDATA[
            public class MyObject : Resource
            {
                public string MyProperty {get; set;}
            }
            
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.UpsertDocumentAsync("dbs/db_rid/colls/coll_rid/docs/", new MyObject { MyProperty = "A Value" });
            }
            ]]>
            </code>
            </example>
            <example>
            A document can be any POCO object that can be serialized to JSON, even if it doesn't extend from <see cref="T:Microsoft.Azure.Documents.Resource"/> 
            <code language="c#">
            <![CDATA[
            public class MyPOCO
            {
                public string MyProperty {get; set;}
            }
            
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.UpsertDocumentAsync("dbs/db_rid/colls/coll_rid/docs/", new MyPOCO { MyProperty = "A Value" });
            }
            ]]>
            </code>
            </example>
            <example>
            A Document can also be a dynamic object
            <code language="c#">
            <![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.UpsertDocumentAsync("dbs/db_rid/colls/coll_rid/docs/", new { SomeProperty = "A Value" } );
            }
            ]]>
            </code>
            </example>
            <example>
            Upsert a Document and execute a Pre and Post Trigger
            <code language="c#">
            <![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.UpsertDocumentAsync(
                    "dbs/db_rid/colls/coll_rid/docs/",
                    new { id = "DOC123213443" },
                    new RequestOptions
                    {
                        PreTriggerInclude = new List<string> { "MyPreTrigger" },
                        PostTriggerInclude = new List<string> { "MyPostTrigger" }
                    });
            }
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Document"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.UpsertDocumentCollectionAsync(System.String,Microsoft.Azure.Documents.DocumentCollection,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Upserts a collection as an asychronous operation.
            </summary>
            <param name="databaseLink">The self-link of the database to upsert the collection in. E.g. dbs/db_rid/</param>
            <param name="documentCollection">The <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> object.</param>
            <param name="options">(Optional) Any <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> you wish to provide when creating a Collection. E.g. RequestOptions.OfferType="S1". </param>
            <returns>The <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> that was upserted contained within a <see cref="T:System.Threading.Tasks.Task"/> object representing the service response for the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="databaseLink"/> or <paramref name="documentCollection"/> is not set.</exception>
            <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an id was not supplied for the new collection.</description>
                </item>
                <item>
                    <term>403</term><description>Forbidden - This means you attempted to exceed your quota for collections. Contact support to have this quota increased.</description>
                </item>     
                <item>
                    <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> with an id matching the id you supplied already existed.</description>
                </item>
            </list>
            </exception>
            <example>
            
            <code language="c#">
            <![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                //Upsert a new collection with an Offer set to S3
                //Not passing in RequestOptions.OfferType will result in a collection with the default Offer set. 
                DocumentCollection coll = await client.UpsertDocumentCollectionAsync(databaseLink,
                    new DocumentCollection { Id = "My Collection" }, 
                    new RequestOptions { OfferType = "S3"} );
            }
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.DocumentCollection"/>
            <seealso cref="T:Microsoft.Azure.Documents.Offer"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.UpsertStoredProcedureAsync(System.String,Microsoft.Azure.Documents.StoredProcedure,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Upserts a stored procedure as an asychronous operation.
            </summary>
            <param name="collectionLink">The self-link of the collection to upsert the stored procedure in. E.g. dbs/db_rid/colls/col_rid/</param>
            <param name="storedProcedure">The <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> object to upsert.</param>
            <param name="options">(Optional) Any <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
            <returns>The <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> that was upserted contained within a <see cref="T:System.Threading.Tasks.Task"/> object representing the service response for the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="collectionLink"/> or <paramref name="storedProcedure"/> is not set.</exception>
            <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an Id was not supplied for the stored procedure or the Body was malformed.</description>
                </item>
                <item>
                    <term>403</term><description>Forbidden - You have reached your quota of stored procedures for the collection supplied. Contact support to have this quota increased.</description>
                </item>     
                <item>
                    <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> with an id matching the id you supplied already existed.</description>
                </item>
                <item>
                    <term>413</term><description>RequestEntityTooLarge - This means the body of the <see cref="T:Microsoft.Azure.Documents.StoredProcedure"/> you tried to upsert was too large.</description>
                </item>
            </list>
            </exception>
            <example>
            
            <code language="c#">
            <![CDATA[
            //Upsert a new stored procedure called "HelloWorldSproc" that takes in a single param called "name".
            StoredProcedure sproc = await client.UpsertStoredProcedureAsync(collectionLink, new StoredProcedure
            {
               Id = "HelloWorldSproc",
               Body = @"function (name){
                           var response = getContext().getResponse();
                           response.setBody('Hello ' + name);
                        }"
            });
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.StoredProcedure"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.UpsertTriggerAsync(System.String,Microsoft.Azure.Documents.Trigger,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Upserts a trigger as an asychronous operation.
            </summary>
            <param name="collectionLink">The self-link of the <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> to upsert the trigger in. E.g. dbs/db_rid/colls/col_rid/ </param>
            <param name="trigger">The <see cref="T:Microsoft.Azure.Documents.Trigger"/> object to upsert.</param>
            <param name="options">(Optional) Any <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
            <returns>A task object representing the service response for the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="collectionLink"/> or <paramref name="trigger"/> is not set.</exception>
            <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an Id was not supplied for the new trigger or that the Body was malformed.</description>
                </item>
                <item>
                    <term>403</term><description>Forbidden - You have reached your quota of triggers for the collection supplied. Contact support to have this quota increased.</description>
                </item>     
                <item>
                    <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.Trigger"/> with an id matching the id you supplied already existed.</description>
                </item>
                <item>
                    <term>413</term><description>RequestEntityTooLarge - This means the body of the <see cref="T:Microsoft.Azure.Documents.Trigger"/> you tried to upsert was too large.</description>
                </item>
            </list>
            </exception>
            <example>
            
            <code language="c#">
            <![CDATA[
            //Upsert a trigger that validates the contents of a document as it is created and adds a 'timestamp' property if one was not found. 
            Trigger trig = await client.UpsertTriggerAsync(collectionLink, new Trigger
            {
                Id = "ValidateDocuments",
                Body = @"function validate() {
                                    var context = getContext();
                                    var request = context.getRequest();                                                             
                                    var documentToCreate = request.getBody();
                                    
                                    // validate properties
                                    if (!('timestamp' in documentToCreate)) {
                                        var ts = new Date();
                                        documentToCreate['timestamp'] = ts.getTime();
                                    }
                                    
                                    // update the document that will be created
                                    request.setBody(documentToCreate);
                                  }",
                TriggerType = TriggerType.Pre,
                TriggerOperation = TriggerOperation.Create
            });
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Trigger"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.UpsertUserDefinedFunctionAsync(System.String,Microsoft.Azure.Documents.UserDefinedFunction,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Upserts a user defined function as an asychronous operation.
            </summary>
            <param name="collectionLink">The self-link of the <see cref="T:Microsoft.Azure.Documents.DocumentCollection"/> to upsert the user defined function in. E.g. dbs/db_rid/colls/col_rid/ </param>
            <param name="function">The <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> object to upsert.</param>
            <param name="options">(Optional) Any <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>for this request.</param>
            <returns>A task object representing the service response for the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="collectionLink"/> or <paramref name="function"/> is not set.</exception>
            <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an Id was not supplied for the new user defined function or that the Body was malformed.</description>
                </item>
                <item>
                    <term>403</term><description>Forbidden - You have reached your quota of user defined functions for the collection supplied. Contact support to have this quota increased.</description>
                </item>     
                <item>
                    <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> with an id matching the id you supplied already existed.</description>
                </item>
                <item>
                    <term>413</term><description>RequestEntityTooLarge - This means the body of the <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/> you tried to upsert was too large.</description>
                </item>
            </list>
            </exception>
            <example>
            
            <code language="c#">
            <![CDATA[
            //Upsert a user defined function that converts a string to upper case
            UserDefinedFunction udf = client.UpsertUserDefinedFunctionAsync(collectionLink, new UserDefinedFunction
            {
               Id = "ToUpper",
               Body = @"function toUpper(input) {
                                   return input.toUpperCase();
                                }",
            });
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.UpsertPermissionAsync(System.String,Microsoft.Azure.Documents.Permission,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Upserts a permission on a user object as an asychronous operation.
            </summary>
            <param name="userLink">The self-link of the user to Upsert the permission for. E.g. dbs/db_rid/users/user_rid/ </param>
            <param name="permission">The <see cref="T:Microsoft.Azure.Documents.Permission"/> object.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>A task object representing the service response for the asynchronous operation which contains the upserted <see cref="T:Microsoft.Azure.Documents.Permission"/> object.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="userLink"/> or <paramref name="permission"/> is not set.</exception>
            <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>400</term><description>BadRequest - This means something was wrong with the request supplied.</description>
                </item>
                <item>
                    <term>403</term><description>Forbidden - You have reached your quota of permission objects. Contact support to have this quota increased.</description>
                </item>     
                <item>
                    <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.Permission"/> with an id matching the id you supplied already existed.</description>
                </item>
            </list>
            </exception>
            <example>
            
            <code language="c#">
            <![CDATA[
            //Upsert a read-only permission object for a specific user
            Permission p = await client.UpsertPermissionAsync(userLink, new Permission { Id = "ReadPermission", PermissionMode = PermissionMode.Read });
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Permission"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.UpsertUserAsync(System.String,Microsoft.Azure.Documents.User,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Upserts a permission on a user object as an asychronous operation.
            </summary>
            <param name="databaseLink">The self-link of the database to upsert the user in. E.g. dbs/db_rid/ </param>
            <param name="user">The <see cref="T:Microsoft.Azure.Documents.User"/> object to upsert.</param>
            <param name="options">(Optional) The request options for the request.</param>
            <returns>A task object representing the service response for the asynchronous operation which contains the upserted <see cref="T:Microsoft.Azure.Documents.User"/> object.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="databaseLink"/> or <paramref name="user"/> is not set.</exception>
            <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
            <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table">
                <listheader>
                    <term>StatusCode</term><description>Reason for exception</description>
                </listheader>
                <item>
                    <term>400</term><description>BadRequest - This means something was wrong with the request supplied.</description>
                </item>
                <item>
                    <term>403</term><description>Forbidden - You have reached your quota of user objects for this database. Contact support to have this quota increased.</description>
                </item>     
                <item>
                    <term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.User"/> with an id matching the id you supplied already existed.</description>
                </item>
            </list>
            </exception>
            <example>
            
            <code language="c#">
            <![CDATA[
            //Upsert a new user called joeBloggs in the specified database
            User user = await client.UpsertUserAsync(databaseLink, new User { Id = "joeBloggs" });
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.User"/>   
            <seealso cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateAttachmentAsync(System.String,System.IO.Stream,Microsoft.Azure.Documents.Client.MediaOptions,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Creates an <see cref="T:Microsoft.Azure.Documents.Attachment"/> with the contents of the provided <paramref name="mediaStream"/> as an asynchronous operation.
            </summary>
            <param name="attachmentsLink">The attachments link for the document. E.g. dbs/db_rid/colls/col_rid/docs/doc_rid/attachments/ </param>
            <param name="mediaStream">the <see cref="T:System.IO.Stream"/> of the attachment media.</param>
            <param name="options">the <see cref="T:Microsoft.Azure.Documents.Client.MediaOptions"/> for the request.</param>
            <param name="requestOptions">Request options.</param>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="attachmentsLink"/> or <paramref name="mediaStream"/> is not set.</exception>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
            <example>
            <code language="c#">
            <![CDATA[
            //This attachment could be any binary you want to attach. Like images, videos, word documents, pdfs etc. it doesn't matter
            using (FileStream fileStream = new FileStream(@".\something.pdf", FileMode.Open))
            {
                //Create the attachment
                Attachment attachment = await client.CreateAttachmentAsync("dbs/db_rid/colls/coll_rid/docs/doc_rid/attachments/", 
                                                    fileStream, 
                                                    new MediaOptions 
                                                    { 
                                                        ContentType = "application/pdf", 
                                                        Slug = "something.pdf" 
                                                    });
            }
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Attachment"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> 
            <seealso cref="T:System.IO.Stream"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.UpsertAttachmentAsync(System.String,System.IO.Stream,Microsoft.Azure.Documents.Client.MediaOptions,Microsoft.Azure.Documents.Client.RequestOptions)">
            <summary>
            Upserts an <see cref="T:Microsoft.Azure.Documents.Attachment"/> with the contents of the provided <paramref name="mediaStream"/> as an asynchronous operation.
            </summary>
            <param name="attachmentsLink">The attachments link for the document. E.g. dbs/db_rid/colls/col_rid/docs/doc_rid/attachments/ </param>
            <param name="mediaStream">the <see cref="T:System.IO.Stream"/> of the attachment media.</param>
            <param name="options">the <see cref="T:Microsoft.Azure.Documents.Client.MediaOptions"/> for the request.</param>
            <param name="requestOptions">the <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions"/> for the request.</param>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="attachmentsLink"/> or <paramref name="mediaStream"/> is not set.</exception>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
            <example>
            <code language="c#">
            <![CDATA[
            //This attachment could be any binary you want to attach. Like images, videos, word documents, pdfs etc. it doesn't matter
            using (FileStream fileStream = new FileStream(@".\something.pdf", FileMode.Open))
            {
                //Upsert the attachment
                Attachment attachment = await client.UpsertAttachmentAsync("dbs/db_rid/colls/coll_rid/docs/doc_rid/attachments/", 
                                                    fileStream, 
                                                    new MediaOptions 
                                                    { 
                                                        ContentType = "application/pdf", 
                                                        Slug = "something.pdf" 
                                                    });
            }
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Attachment"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1"/> 
            <seealso cref="T:System.IO.Stream"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.UpdateMediaAsync(System.String,System.IO.Stream,Microsoft.Azure.Documents.Client.MediaOptions)">
            <summary>
            Replaces the specified media's content as an asynchronous operation.
            </summary>
            <param name="mediaLink">The self-link for the media to be updated. /medias/media_rid </param>
            <param name="mediaStream">The <see cref="T:System.IO.Stream"/> of the attachment media.</param>
            <param name="options">The <see cref="T:Microsoft.Azure.Documents.Client.MediaOptions"/> for the request.</param>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="mediaLink"/> or <paramref name="mediaStream"/> is not set.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="mediaLink"/> is not in the form of /medias/{mediaId}.</exception>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
            <example>
            <code language="c#">
            <![CDATA[
            //This attachment could be any binary you want to attach. Like images, videos, word documents, pdfs etc. it doesn't matter
            using (FileStream fileStream = new FileStream(@".\something.pdf", FileMode.Open))
            {
                //Update the attachment media
                await client.UpdateMediaAsync("/medias/media_rid", fileStream, 
                                new MediaOptions 
                                { 
                                    ContentType = "application/pdf", 
                                    Slug = "something.pdf" 
                                });
            }
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Client.MediaOptions"/> 
            <seealso cref="T:Microsoft.Azure.Documents.Client.MediaResponse"/> 
            <seealso cref="T:System.IO.Stream"/>
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadMediaMetadataAsync(System.String)">
            <summary>
            Retrieves the metadata associated with the specified attachment content (aka media) as an asynchronous operation.
            </summary>
            <param name="mediaLink">the self-link for the media to read metadata for. E.g. /medias/media_rid </param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="mediaLink"/> is not set.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="mediaLink"/> is not in the form of /medias/{mediaId}.</exception>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
            <seealso cref="T:Microsoft.Azure.Documents.Client.MediaResponse"/> 
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadMediaAsync(System.String)">
            <summary>
            Retrieves the specified attachment content (aka media).
            </summary>
            <param name="mediaLink">The self-link for the media to read. E.g. /medias/media_rid</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="mediaLink"/> is not set.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="mediaLink"/> is not in the form of /medias/{mediaId}.</exception>
            <returns>The task object representing the service response for the asynchronous operation.</returns>
            <seealso cref="T:Microsoft.Azure.Documents.Client.MediaResponse"/> 
            <seealso cref="T:System.Threading.Tasks.Task"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.Microsoft#Azure#Documents#IAuthorizationTokenProvider#GetUserAuthorizationToken(System.String,System.String,System.String,System.Collections.Specialized.NameValueCollection,Microsoft.Azure.Documents.AuthorizationTokenType)">
            <summary>
            </summary>
            <param name="resourceAddress"></param>
            <param name="resourceType"></param>
            <param name="requestVerb"></param>
            <param name="headers"></param>
            <param name="tokenType">unused, use token based upon what is passed in constructor</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.GetDatabaseAccountAsync">
            <summary>
            Read the <see cref="T:Microsoft.Azure.Documents.DatabaseAccount"/> as an asynchronous operation.
            </summary>
            <returns>
            A <see cref="T:Microsoft.Azure.Documents.DatabaseAccount"/> wrapped in a <see cref="T:System.Threading.Tasks.Task"/> object.
            </returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.GetStoreProxyAsync(System.String,Microsoft.Azure.Documents.ResourceType,Microsoft.Azure.Documents.OperationType)">
            <summary>
            Certain requests must be routed through gateway even when the client connectivity mode is direct.
            For e.g., DocumentCollection creation. This method returns the <see cref="T:Microsoft.Azure.Documents.IBackendProxy"/> based
            on the input <paramref name="resourceType"/> and request operation type <paramref name="operationType"/>
            </summary>
            <param name="resourceAddress"></param>
            <param name="resourceType">Type of resource</param>
            <param name="operationType">Request operation type</param>
            <returns>Returns <see cref="T:Microsoft.Azure.Documents.IBackendProxy"/> to which the request must be sent</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.DocumentClient.GetLinkForRouting(Microsoft.Azure.Documents.Resource)">
            <summary>
            The preferred link used in replace operation in SDK.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.DocumentClient.PartitionResolvers">
            <summary>
            Partition Resolvers as a Dictionary of database link to IPartitionResolver to be used in partitioning.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.DocumentClient.Session">
            <summary>
            Gets or sets the session object used for session consistency version tracking
            </summary>
            <remarks>
            <value>
            The session object used for version tracking when the consistency level is set to Session.
            </value>
            The session object can be saved and shared between two DocumentClient instances within the same AppDomain.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.DocumentClient.ServiceEndpoint">
            <summary>
            Gets the endpoint Uri for the service endpoint.
            </summary>
            <value>
            The Uri for the service endpoint.
            </value>
            <seealso cref="T:System.Uri"/>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.DocumentClient.WriteEndpoint">
            <summary>
            Gets the current write endpoint chosen based on availability and preference.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.DocumentClient.ReadEndpoint">
            <summary>
            Gets the current read endpoint chosen based on availability and preference.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.DocumentClient.ConnectionPolicy">
            <summary>
            Gets the Connection policy used by the client.
            </summary>
            <value>
            The Connection policy used by the client.
            </value>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ConnectionPolicy"/>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.DocumentClient.ResourceTokens">
            <summary>
            Gets a dictionary of resource tokens used by the client.
            </summary>
            <value>
            A dictionary of resource tokens used by the client.
            </value>
            <seealso cref="T:System.Collections.Generic.IDictionary`2"/>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.DocumentClient.AuthKey">
            <summary>
            Gets the AuthKey used by the client.
            </summary>
            <value>
            The AuthKey used by the client.
            </value>
            <seealso cref="T:System.Security.SecureString"/>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.DocumentClient.ConsistencyLevel">
            <summary>
            Gets the configured consistency level of the client. 
            </summary>
            <value>
            The configured <see cref="T:Microsoft.Azure.Documents.ConsistencyLevel"/> of the client.
            </value>
            <seealso cref="T:Microsoft.Azure.Documents.ConsistencyLevel"/>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.DocumentClient.RetryPolicy">
            <summary>
            Gets and Sets the retry policy on the client. 
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.PartitionKeyMismatchRetryPolicy.ShouldRetry(System.Exception,System.TimeSpan@,System.Exception@)">
            <summary> 
            Should the caller retry the operation.
            </summary>
            <param name="exception">Exception that occured when the operation was tried</param>
            <param name="retryDelay">Duration to wait before the operation is retried</param>
            <param name="exceptionToThrow">Translated exception the caller should throw when not asked to retry</param>
            <returns>True indicates caller should retry, False otherwise</returns>
        </member>
        <member name="T:Microsoft.Azure.Documents.Query.QueryCompatibilityMode">
            <summary>
            A client query compatibility mode when making query request.
            Can be used to force a specific query request format.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.Query.QueryCompatibilityMode.Default">
            <summary>
            Default (latest) query format.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.Query.QueryCompatibilityMode.Query">
            <summary>
            Query (application/query+json).
            Default.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.Query.QueryCompatibilityMode.SqlQuery">
            <summary>
            SqlQuery (application/sql).
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.ConstantEvaluator.PartialEval(System.Linq.Expressions.Expression,System.Func{System.Linq.Expressions.Expression,System.Boolean})">
            <summary> 
            Performs evaluation and replacement of independent sub-trees 
            </summary> 
            <param name="expression">The root of the expression tree.</param>
            <param name="fnCanBeEvaluated">A function that decides whether a given expression node can be part of the local function.</param>
            <returns>A new tree with sub-trees evaluated and replaced.</returns> 
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.ConstantEvaluator.PartialEval(System.Linq.Expressions.Expression)">
            <summary> 
            Performs evaluation and replacement of independent sub-trees 
            </summary> 
            <param name="expression">The root of the expression tree.</param>
            <returns>A new tree with sub-trees evaluated and replaced.</returns> 
        </member>
        <member name="T:Microsoft.Azure.Documents.Linq.Nominator">
            <summary> 
            Performs bottom-up analysis to determine which nodes can possibly 
            be part of an evaluated sub-tree. 
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.Linq.SubtreeEvaluator">
            <summary> 
            Evaluates and replaces sub-trees when first candidate is reached (top-down) 
            </summary> 
        </member>
        <member name="T:Microsoft.Azure.Documents.Client.ResourceFeedReaderClientExtensions">
            <summary>
            Client extensions for creating <see cref="T:Microsoft.Azure.Documents.Client.ResourceFeedReader`1"/> objects.
            </summary>
            <remarks>
            For additional details and examples, please refer to <see cref="T:Microsoft.Azure.Documents.Client.ResourceFeedReader`1"/>.
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceFeedReader`1"/>
            <seealso cref="T:Microsoft.Azure.Documents.Resource"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.DocumentClient"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.ResourceFeedReaderClientExtensions.CreateDatabaseFeedReader(Microsoft.Azure.Documents.Client.DocumentClient,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Creates a Feed Reader for Databases 
            </summary>
            <param name="client">The <see cref="T:Microsoft.Azure.Documents.Client.DocumentClient"/> instance.</param>
            <param name="options">the <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> options for the request.</param>
            <returns>A <see cref="T:Microsoft.Azure.Documents.Client.ResourceFeedReader`1"/> instance.</returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.ResourceFeedReaderClientExtensions.CreateDocumentFeedReader(Microsoft.Azure.Documents.Client.DocumentClient,System.String,Microsoft.Azure.Documents.Client.FeedOptions,System.Object)">
            <summary>
            Creates a Feed Reader for Documents.
            </summary>
            <param name="client">The <see cref="T:Microsoft.Azure.Documents.Client.DocumentClient"/> instance.</param>
            <param name="documentsFeedOrDatabaseLink">The link for documents or self-link for database in case a partition resolver is used with the client</param>
            <param name="options">the <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> options for the request.</param>
            <param name="partitionKey">The key used to determine the target collection</param>
            <returns>A <see cref="T:Microsoft.Azure.Documents.Client.ResourceFeedReader`1"/> instance.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.ResourceFeedReaderClientExtensions.CreateDocumentCollectionFeedReader(Microsoft.Azure.Documents.Client.DocumentClient,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Creates a Feed Reader for DocumentCollections.
            </summary>
            <param name="client">The <see cref="T:Microsoft.Azure.Documents.Client.DocumentClient"/> instance.</param>
            <param name="collectionsLink">The link for collections</param>
            <param name="options">the <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> options for the request.</param>
            <returns>A <see cref="T:Microsoft.Azure.Documents.Client.ResourceFeedReader`1"/> instance.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.ResourceFeedReaderClientExtensions.CreateUserFeedReader(Microsoft.Azure.Documents.Client.DocumentClient,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Creates a Feed Reader for Users.
            </summary>
            <param name="client">The <see cref="T:Microsoft.Azure.Documents.Client.DocumentClient"/> instance.</param>
            <param name="usersLink">The link for users</param>
            <param name="options">the <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> options for the request.</param>
            <returns>A <see cref="T:Microsoft.Azure.Documents.Client.ResourceFeedReader`1"/> instance.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.ResourceFeedReaderClientExtensions.CreatePermissionFeedReader(Microsoft.Azure.Documents.Client.DocumentClient,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Creates a Feed Reader for Permissions.
            </summary>
            <param name="client">The <see cref="T:Microsoft.Azure.Documents.Client.DocumentClient"/> instance.</param>
            <param name="permissionsLink"></param>
            <param name="options">the <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> options for the request.</param>
            <returns>A <see cref="T:Microsoft.Azure.Documents.Client.ResourceFeedReader`1"/> instance.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.ResourceFeedReaderClientExtensions.CreateStoredProcedureFeedReader(Microsoft.Azure.Documents.Client.DocumentClient,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Creates a Feed Reader for StoredProcedures.
            </summary>
            <param name="client">The <see cref="T:Microsoft.Azure.Documents.Client.DocumentClient"/> instance.</param>
            <param name="storedProceduresLink">The link for stored procedures</param>
            <param name="options">the <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> options for the request.</param>
            <returns>A <see cref="T:Microsoft.Azure.Documents.Client.ResourceFeedReader`1"/> instance.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.ResourceFeedReaderClientExtensions.CreateTriggerFeedReader(Microsoft.Azure.Documents.Client.DocumentClient,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Creates a Feed Reader for Triggers.
            </summary>
            <param name="client">The <see cref="T:Microsoft.Azure.Documents.Client.DocumentClient"/> instance.</param>
            <param name="triggersLink">The link for triggers</param>
            <param name="options">the <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> options for the request.</param>
            <returns>A <see cref="T:Microsoft.Azure.Documents.Client.ResourceFeedReader`1"/> instance.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.ResourceFeedReaderClientExtensions.CreateUserDefinedFunctionFeedReader(Microsoft.Azure.Documents.Client.DocumentClient,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Creates a Feed Reader for UserDefinedFunctions.
            </summary>
            <param name="client">The <see cref="T:Microsoft.Azure.Documents.Client.DocumentClient"/> instance.</param>
            <param name="userDefinedFunctionsLink">The link for userDefinedFunctions</param>
            <param name="options">the <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> options for the request.</param>
            <returns>A <see cref="T:Microsoft.Azure.Documents.Client.ResourceFeedReader`1"/> instance.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.ResourceFeedReaderClientExtensions.CreateAttachmentFeedReader(Microsoft.Azure.Documents.Client.DocumentClient,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Creates a Feed Reader for Attachments
            </summary>
            <param name="client">The <see cref="T:Microsoft.Azure.Documents.Client.DocumentClient"/> instance.</param>
            <param name="attachmentsLink">The link for attachments</param>
            <param name="options">the <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> options for the request.</param>
            <returns>A <see cref="T:Microsoft.Azure.Documents.Client.ResourceFeedReader`1"/> instance.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.ResourceFeedReaderClientExtensions.CreateConflictFeedReader(Microsoft.Azure.Documents.Client.DocumentClient,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Creates a Feed Reader for Conflicts.
            </summary>
            <param name="client">The <see cref="T:Microsoft.Azure.Documents.Client.DocumentClient"/> instance.</param>
            <param name="conflictsLink">The link for conflicts</param>
            <param name="options">the <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/> options for the request.</param>
            <returns>A <see cref="T:Microsoft.Azure.Documents.Client.ResourceFeedReader`1"/> instance.</returns>
        </member>
        <member name="T:Microsoft.Azure.Documents.Linq.UserDefinedFunctionProvider">
            <summary>
            Helper class to invoke User Defined Functions via Linq queries.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.UserDefinedFunctionProvider.Invoke(System.String,System.Object[])">
            <summary>
            Helper method to invoke User Defined Functions via Linq queries.
            </summary>
            <param name="udfName">the UserDefinedFunction name</param>
            <param name="arguments">the arguments of the UserDefinedFunction</param>
            <returns></returns>
            <remarks>
            This is a stub helper method for use within LINQ expressions. Cannot be called directly. 
            Refer to http://azure.microsoft.com/documentation/articles/documentdb-sql-query/#linq-to-documentdb-sql for more details about the LINQ provider.
            Refer to http://azure.microsoft.com/documentation/articles/documentdb-sql-query/#javascript-integration for more details about user defined functions.
            </remarks>
            <example> 
            <code language="c#">
            <![CDATA[
             await client.CreateUserDefinedFunctionAsync(collectionLink, new UserDefinedFunction { Id = "calculateTax", Body = @"function(amt) { return amt * 0.05; }" });
             var queryable = client.CreateDocumentQuery<Book>(collectionLink).Select(b => UserDefinedFunctionProvider.Invoke("calculateTax", b.Price));
             
            // Equivalent to SELECT * FROM books b WHERE udf.toLowerCase(b.title) = 'war and peace'" 
            await client.CreateUserDefinedFunctionAsync(collectionLink, new UserDefinedFunction { Id = "toLowerCase", Body = @"function(s) { return s.ToLowerCase(); }" });
            queryable = client.CreateDocumentQuery<Book>(collectionLink).Where(b => UserDefinedFunctionProvider.Invoke("toLowerCase", b.Title) == "war and peace");
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/>
        </member>
        <member name="T:Microsoft.Azure.Documents.ResourceToken">
            <summary>
            Resource token to be used to access resources.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ResourceToken.ResourceLink">
            <summary> 
            Gets or sets the self-link of resource to which the token applies.
            </summary>
            <value>
            The self-link of the resource to which the token applies.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.ResourceToken.ResourcePartitionKey">
            <summary>
            Gets or sets optional partition key value for the token.
            A permission applies to resources when two conditions are met:
                  1. <see cref="P:Microsoft.Azure.Documents.ResourceToken.ResourceLink"/> is prefix of resource's link.
                        For example "/dbs/mydatabase/colls/mycollection" applies to "/dbs/mydatabase/colls/mycollection" and "/dbs/mydatabase/colls/mycollection/docs/mydocument"
                  2. <see cref="P:Microsoft.Azure.Documents.ResourceToken.ResourcePartitionKey"/> is superset of resource's partition key.
                        For example absent/empty partition key is superset of all partition keys.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.ResourceToken.Token">
            <summary>
            Gets the access token granting the defined permission.
            </summary>
            <value>
            The access token granting the defined permission.
            </value>
        </member>
        <member name="T:Microsoft.Azure.Documents.Client.RetryPolicy">
            <summary>
            Represents the RetryPolicy assocated with a DocumentClient.
            Currently we only retry on RequestsTooLarge. In the future, we might extend to try on othe conditions.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.RetryPolicy.#ctor(Microsoft.Azure.Documents.Routing.GlobalEndpointManager,System.Boolean)">
            <summary>
            Initialize the instance of the ConnectionPolicy class
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.RetryPolicy.MaxRetryAttemptsOnRequest">
            <summary>
            Gets or sets the maximum number of retry in case of resource throttled, for request
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.RetryPolicy.MaxRetryAttemptsOnQuery">
            <summary>
            Gets or sets the maximum number of retry in case of resource throttled, for LINQ query
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.Client.ConnectionPolicy">
            <summary>
            Represents the connection policy assocated with a DocumentClient. 
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.ConnectionPolicy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Client.ConnectionPolicy"/> class.
            </summary> 
            <remarks>
            The default values of ConnectionPolicy:
            RequestTimeout = 60
            MediaRequestTimeout = 300
            ConnectionMode = Gateway
            MediaReadMode = Buffered
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ConnectionPolicy.MaxConcurrentFanoutRequests">
            <summary>
            Gets or sets the maximum number of concurrent fanout requests
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ConnectionPolicy.RequestTimeout">
            <summary>
            Gets or sets the request timeout (time to wait for response from network peer). 
            </summary>
            <value>The request timeout.</value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ConnectionPolicy.MediaRequestTimeout">
            <summary>
            Gets or sets time to wait for response from network peer for attachment content (a.k.a. media) operations.
            </summary>
            <value>
            The time to wait for response from network peer for attachment content operations.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ConnectionPolicy.ConnectionMode">
            <summary>
            Gets or sets the connection mode used by the client.
            </summary>
            <value>
            The connection mode used by the client. 
            </value>
            <remarks>
            Can be Gateway or Direct.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ConnectionPolicy.MediaReadMode">
            <summary>
            Gets or sets the attachment content (a.k.a. media) download mode.
            </summary>
            <value>
            The download mode for the attachment content.
            </value>
            <remarks>
            Can be Streamed or Buffered.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ConnectionPolicy.ConnectionProtocol">
            <summary>
            Gets or sets the connection protocol.
            </summary>
            <value>
            The connection protocol for use with the DocumentClient. 
            </value>
            <remarks>
            This setting is not used when <see cref="P:Microsoft.Azure.Documents.Client.ConnectionPolicy.ConnectionMode"/> is Gateway. Gateway mode only supports HTTPS.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ConnectionPolicy.Default">
            <summary>
            Gets the default connection policy.
            </summary>
            <value>
            The default values of ConnectionPolicy:
            </value>
            <remarks>
            The default values of ConnectionPolicy:
            RequestTimeout = 60
            MediaRequestTimeout = 300
            ConnectionMode = Gateway
            MediaReadMode = Buffered
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ConnectionPolicy.UserAgentSuffix">
            <summary>
            A suffix to be added to the default user-agent.
            </summary>
            <value>
            A suffix to be added to the default user-agent.
            </value>
            <remarks>
            The usage Setting this after sending any request won't have any effect.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ConnectionPolicy.PreferredLocations">
            <summary>
            Change to public when we release GeoSDK.
            Ordered list of location preference to use.         
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ConnectionPolicy.DisableAutomaticFailover">
            <summary>
            Change to public when we release GeoSDK.
            When set, Client is locked to the region passed as endpoint in docclient.
            </summary>
        </member>
        <member name="E:Microsoft.Azure.Documents.Client.ConnectionPolicy.PreferenceChanged">
            <summary>
            GlobalEndpointManager will subscribe to this event if user update the preferredLocations list.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.Linq.ExpressionToSql">
            <summary>
            Core Linq to DocDBSQL translator.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.ExpressionToSql.TranslateQuery(System.Linq.Expressions.Expression)">
            <summary>
            Toplevel entry point.
            </summary>
            <param name="inputExpression">An Expression representing a Query on a IDocumentQuery object.</param>
            <returns>The corresponding SQL query.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.ExpressionToSql.Translate(System.Linq.Expressions.Expression,Microsoft.Azure.Documents.Linq.TranslationContext)">
            <summary>
            Translate an expression into a query.
            Query is constructed as a side-effect in context.currentQuery.
            </summary>
            <param name="inputExpression">Expression to translate.</param>
            <param name="context">Context for translation.</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.ExpressionToSql.VisitScalarExpression(System.Linq.Expressions.Expression,Microsoft.Azure.Documents.Linq.TranslationContext)">
            <summary>
            Visitor which produces a SqlScalarExpression.
            </summary>
            <param name="inputExpression">Expression to visit.</param>
            <param name="context">Context information.</param>
            <returns>The translation as a ScalarExpression.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.ExpressionToSql.VisitCollectionLambda(System.Linq.Expressions.Expression,Microsoft.Azure.Documents.Linq.TranslationContext)">
            <summary>
            Visit a lambda which is supposed to return a collection.
            </summary>
            <param name="inputExpression">LambdaExpression with a result which is a collection.</param>
            <param name="context">Translation context.</param>
            <returns>The collection computed by the lambda.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.ExpressionToSql.VisitMethodCall(System.Linq.Expressions.MethodCallExpression,Microsoft.Azure.Documents.Linq.TranslationContext)">
            <summary>
            Visit a method call, construct the corresponding query in context.currentQuery.
            At ExpressionToSql point only LINQ method calls are allowed.
            These methods are static extension methods of IQueryable or IEnumerable.
            </summary>
            <param name="inputExpression">Method to translate.</param>
            <param name="context">Query translation context.</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.ExpressionToSql.ConvertPropertyRefToPath(Microsoft.Azure.Documents.Sql.SqlPropertyRefScalarExpression)">
            <summary>
            Property references that refer to array-valued properties are converted to collection references.
            </summary>
            <param name="propRef">Property reference object.</param>
            <returns>An inputPathCollection which contains the same property path as the propRef.</returns>
        </member>
        <member name="T:Microsoft.Azure.Documents.Routing.CollectionRoutingMap`1">
            <summary>
            Stored partition key ranges in an efficient way with some additional information and provides
            convenience methods for working with set of ranges.
            </summary>
            <typeparam name="TPartitionInfo">Type of auxiliary object associated with partition key range. For example AddressInformation[].</typeparam>
        </member>
        <member name="F:Microsoft.Azure.Documents.Routing.CollectionRoutingMap`1.rangeById">
            <summary>
            Partition key range id to partition address and range.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Routing.CollectionRoutingMap`1.OrderedRanges">
            <summary>
            Ranges in increasing order.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Routing.CollectionRoutingMap`1.OrderedPartitionInfo">
            <summary>
            TInfo in the same order as corresponding OrderedRanges.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Routing.DocumentAnalyzer.ExtractPartitionKeyValue(Microsoft.Azure.Documents.Document,Microsoft.Azure.Documents.PartitionKeyDefinition)">
            <summary>
            Extracts effective <see cref="T:Microsoft.Azure.Documents.Routing.PartitionKeyInternal"/> from document.
            </summary>
            <remarks>
            This code doesn't do any validation, as it assumes that IndexingPolicy is valid, as it is coming from the backend.
            Expected format is "/prop1/prop2/?". No array expressions are expected.
            </remarks>
            <param name="document">Document to extract partition key value from.</param>
            <param name="partitionKeyDefinition">Information about partition key.</param>
            <returns>Instance of <see cref="T:Microsoft.Azure.Documents.Routing.PartitionKeyInternal"/>.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Routing.DocumentAnalyzer.GetValueByPath``1(Newtonsoft.Json.Linq.JToken,System.String[],``0)">
            <summary>
            Get the value associated with the specified property name.
            </summary>
            <param name="token">JSON tree.</param>
            <param name="fieldNames">Field names which compose a path to the property to be retrieved.</param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Azure.Documents.Routing.GlobalAddressCache">
            <summary>
            AddressCache implementation for client SDK. Supports cross region address routing based on 
            avaialbility and preference list.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.Routing.GlobalEndpointManager">
            <summary>
            AddressCache implementation for client SDK. Supports cross region address routing based on 
            avaialbility and preference list.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Routing.GlobalEndpointManager.ResolveServiceEndpoint(Microsoft.Azure.Documents.DocumentServiceRequest)">
            <summary>
            For Moq test, make it virtual
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Azure.Documents.Routing.LocationCache">
            <summary>
            Abstraction to resolve the target location(region) for given request.
            It relies on two set of routing policy.
            1) List of available regions(writable and readable).
            2) List of region preferences.
            Based on the two list it picks the current write location and read location.
            Both the list can be changed dynamically and this type reacts to it dynamically by picking new write and read endpoint.
            In future, we can extend this type to support resource specific routing by invoking 
            ILocationResolver.ResolveLocation(Request) which can maintain resource specific routing policy.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Routing.LocationCache.HandleAvailableLocationsChange(Microsoft.Azure.Documents.DatabaseAccount)">
            <summary>
            Use this API to refresh location cache, when available region(s) list is updated/refreshed.
            </summary>
            <param name="databaseAccount"></param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Routing.LocationCache.HandleLocationPreferenceChange(System.Collections.ObjectModel.ReadOnlyCollection{System.String})">
            <summary>
            Use this API to refresh location cache, when user preference list is changed.
            </summary>
            <param name="preferenceList"></param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Routing.LocationCache.GetServiceEndpoint(Microsoft.Azure.Documents.DocumentServiceRequest)">
            <summary>
            GatewayStoreModel.GetEntityUri/GetFeedUri will use this API to get the location of GW to send given request.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Routing.LocationCache.GetAddressCache(Microsoft.Azure.Documents.DocumentServiceRequest)">
            <summary>
            ReplicatedResourceClient will use this API to get the direct connectivity AddressCache for given request.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Azure.Documents.Routing.PartitionKeyDefinitionCache">
            <summary>
            Caches partition key definition for a collection.
            Today partition key cannot be changed for a collection, so we don't refresh this cache.
            The only case when information in this cache can become wrong is if user deletes collection
            and creates new one with the same name and uses name routing.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.Client.TaskHelper">
            <summary>
            The helper function relates to the async Task.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.Linq.ConstantFolding">
            <summary>
            Simplifies an Expression tree evaluating everything that can be evaluated 
            at the current time.  Could be more efficient by evaluating a complete constant subtree at once.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.Linq.GeometrySqlExpressionFactory">
            <summary>
            Constructs <see cref="T:Microsoft.Azure.Documents.Sql.SqlScalarExpression"/> from a geometry <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.GeometrySqlExpressionFactory.Construct(System.Linq.Expressions.Expression)">
            <summary>
            Constructs <see cref="T:Microsoft.Azure.Documents.Sql.SqlScalarExpression"/> from a geometry <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <param name="geometryExpression">
            Expression of type <see cref="T:Microsoft.Azure.Documents.Spatial.Geometry"/>.
            </param>
            <returns>Instance of <see cref="T:Microsoft.Azure.Documents.Sql.SqlScalarExpression"/> representing geometry <paramref name="geometryExpression"/>.</returns>.
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.GeometrySqlExpressionFactory.FromJToken(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Constructs <see cref="T:Microsoft.Azure.Documents.Sql.SqlScalarExpression"/> from a geometry <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="jToken">Json token.</param>
            <returns>Instance of <see cref="T:Microsoft.Azure.Documents.Sql.SqlScalarExpression"/>.</returns>
        </member>
        <member name="T:Microsoft.Azure.Documents.Linq.IDocumentQuery`1">
            <summary>
            Provides methods to support query pagination and asynchronous execution.
            </summary>
            <typeparam name="T">Source Query Type</typeparam>
        </member>
        <member name="T:Microsoft.Azure.Documents.Linq.IDocumentQuery">
            <summary>
            Provides methods to support query pagination and asynchronous execution.
            </summary> 
            <remarks>
            Untyped interface with no methods.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.IDocumentQuery`1.ExecuteNextAsync``1">
            <summary>
            Executes the query and retrieves the next page of results.
            </summary>
            <typeparam name="TResult">The type of the object returned in the query result.</typeparam>
            <returns>The Task object for the asynchronous response from query execution.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.IDocumentQuery`1.ExecuteNextAsync">
            <summary>
            Executes the query and retrieves the next page of results as dynamic objects.
            </summary>
            <returns>The Task object for the asynchronous response from query execution.</returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.Linq.IDocumentQuery`1.HasMoreResults">
            <summary>
            Gets a boolean value representing if there are potentially additional results that can be 
            returned from the query.
            </summary>
            <value>Boolean value representing if there are potentially additional results that can be 
            returned from the query.</value>
            <remarks>Initially returns true. This value is set based on whether the last execution returned a continuation token.</remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQuery`1.ExecuteNextAsync">
            <summary>
            Executes the query to retrieve the next page of results.
            </summary>
            <returns></returns>        
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQuery`1.ExecuteNextAsync``1">
            <summary>
            Executes the query to retrieve the next page of results.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQuery`1.GetEnumerator">
            <summary>
            Retrieves an object that can iterate through the individual results of the query.
            </summary>
            <remarks>
            This triggers a synchronous multi-page load.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQuery`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Synchronous Multi-Page load
            </summary>
            <returns></returns>        
        </member>
        <member name="P:Microsoft.Azure.Documents.Linq.DocumentQuery`1.HasMoreResults">
            <summary>
            Gets a value indicating whether there are additional results to retrieve. 
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryEvaluator.HandleEmptyQuery(System.Linq.Expressions.ConstantExpression)">
            <summary>
            This is to handle the case, where user just executes code like this.
            foreach(Database db in client.CreateDatabaseQuery()) {}        
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryEvaluator.HandleAsSqlTransformExpression(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            foreach(string record in client.CreateDocumentQuery().Navigate("Raw JQuery"))
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Azure.Documents.Linq.DocumentQueryException">
            <summary> 
            Represents an exception from document service queries.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Linq.DocumentQueryException"/> class.</summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Linq.DocumentQueryException"/> class.</summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Linq.DocumentQueryException"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="T:Microsoft.Azure.Documents.Linq.DocumentQueryable">
            <summary>
            This class provides a set of static methods for querying DocumentDB resources.
            </summary>
            <remarks>
             The set of methods declared in the DocumentQueryable class provides an implementation of the standard query methods for querying resources in DocumentDB. 
             These methods enable you to express traversal, filter, and projection operations over data persisted in DocumentDB.  They are defined as methods that 
             extend IQueryable and IOrderedQueryable, and do not perform any querying directly.  Instead, their functionality is to create queries 
             based the resource and query expression provided.  The actual query execution occurs when enumeration forces the expression tree associated with an IQueryable object to be executed.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.CreateAttachmentQuery``1(Microsoft.Azure.Documents.Client.DocumentClient,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for attachments.
            </summary>
            <typeparam name="T">The type of object to query.</typeparam>
            <param name="client">The DocumentClient instance to execute the query.</param>
            <param name="attachmentsLink">The path link for the attachments under a document, e.g. dbs/db_rid/colls/coll_rid/docs/doc_rid/attachments/.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IOrderedQueryable{T} that can evaluate the query.</returns>
            <example>
            This example below queries against attachments of custom types.
            <code language="c#">
            <![CDATA[
            public class PriorityAttachment : Attachment
            {
                [JsonProperty("priority")]
                public int Priority;
            }
            
            foreach (PriorityAttachment attachment in 
                client.CreateAttachmentQuery<PriorityAttachment>(document.AttachmentsLink).Where(a => a.Priority == 0))
            {
                Console.WriteLine("Id: {0}, MediaLink:{1}", attachment.Id, attachment.MediaLink);
            }
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Attachment"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.CreateAttachmentQuery``1(Microsoft.Azure.Documents.Client.DocumentClient,System.String,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for attachments by using a SQL statement. 
            </summary>
            <param name="client">the DocumentClient instance to execute the query.</param>
            <param name="attachmentsLink">The path link for the attachments under a document, e.g. dbs/db_rid/colls/coll_rid/docs/doc_rid/attachments/.</param>
            <param name="sqlExpression">The SQL statement.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{T} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for plain text attachments using a SQL query string.
            <code language="c#">
            <![CDATA[
            foreach (Attachment attachment in client.CreateAttachmentQuery(
                document.AttachmentsLink, 
                "SELECT * FROM attachments a WHERE a.contentType = 'text/plain'"))
            {
                Console.WriteLine("Id: {0}, MediaLink:{1}", attachment.Id, attachment.MediaLink);
            }
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Attachment"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.CreateAttachmentQuery``1(Microsoft.Azure.Documents.Client.DocumentClient,System.String,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
             <summary>
              Overloaded. This method creates a query for attachments by using a SQL statement with parameterized values.
              For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec"/>.
             </summary>
             <param name="client">the DocumentClient instance to execute the query.</param>
             <param name="attachmentsLink">The path link for the attachments under a document, e.g. dbs/db_rid/colls/coll_rid/docs/doc_rid/attachments/.</param>
             <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
             <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
             <returns>An IQueryable{T} that can evaluate the query with the provided SQL statement.</returns>
             <example>
             This example below queries for plain text attachments using a parameterized SQL query string.
             <code language="c#">
             <![CDATA[
             var query = new SqlQuerySpec(
                 "SELECT * FROM attachments a WHERE a.contentType = @contentType", 
                 new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@contentType", Value = "text/plain" } }));
            
             foreach (Attachment attachment in client.CreateAttachmentQuery(document.AttachmentsLink, query))
             {
                 Console.WriteLine("Id: {0}, MediaLink:{1}", attachment.Id, attachment.MediaLink);
             }
             ]]>
             </code>
             </example>
             <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
             <seealso cref="T:Microsoft.Azure.Documents.Attachment"/>
             <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.CreateAttachmentQuery(Microsoft.Azure.Documents.Client.DocumentClient,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates create a query for attachments.  It returns an IOrderedQueryable{Attachment}.
            </summary>
            <param name="client">the DocumentClient instance to execute the query.</param>
            <param name="attachmentsLink">The path link for the attachments under a document, e.g. dbs/db_rid/colls/coll_rid/docs/doc_rid/attachments/.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IOrderedQueryable{Attachments} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for plain text attachments using LINQ.
            <code language="c#">
            <![CDATA[
            foreach (Attachment attachment in client.CreateAttachmentQuery(document.AttachmentsLink).Where(a => a.ContentType == "text/plain"))
            {
                Console.WriteLine("Id: {0}, MediaLink:{1}", attachment.Id, attachment.MediaLink);
            }
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Attachment"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.CreateAttachmentQuery(Microsoft.Azure.Documents.Client.DocumentClient,System.String,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for attachments by using a SQL statement.  It returns an IQueryable{dynamic}.
            </summary>
            <param name="client">the DocumentClient instance to execute the query.</param>
            <param name="attachmentsLink">The path link for the attachments under a document, e.g. dbs/db_rid/colls/coll_rid/docs/doc_rid/attachments/.</param>
            <param name="sqlExpression">The SQL statement.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            <code language="c#">
            <![CDATA[
            foreach (Attachment attachment in client.CreateAttachmentQuery<dynamic>(
                document.AttachmentsLink, 
                "SELECT * FROM attachments a WHERE a.priority = 0"))
            {
                Console.WriteLine("Id: {0}, Priority:{1}", attachment.id, attachment.priority);
            }
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Attachment"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.CreateAttachmentQuery(Microsoft.Azure.Documents.Client.DocumentClient,System.String,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
             <summary>
              Overloaded. This method creates a query for attachments by using a SQL statement with parameterized values.  It returns an IQueryable{dynamic}.
              For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec"/>.
             </summary>
             <param name="client">the DocumentClient instance to execute the query.</param>
             <param name="attachmentsLink">The path link for the attachments under a document, e.g. dbs/db_rid/colls/coll_rid/docs/doc_rid/attachments/.</param>
             <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
             <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
             <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
             <example>
             This example below queries for plain text attachments using a parameterized SQL query string.
             <code language="c#">
             <![CDATA[
             var query = new SqlQuerySpec(
                 "SELECT * FROM attachments a WHERE a.priority = @priority", 
                 new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@priority", Value = 0 } }));
            
             foreach (dynamic attachment in client.CreateAttachmentQuery<dynamic>(document.AttachmentsLink, query))
             {
                 Console.WriteLine("Id: {0}, Priority:{1}", attachment.id, attachment.priority);
             }
             ]]>
             </code>
             </example>
             <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
             <seealso cref="T:Microsoft.Azure.Documents.Attachment"/>
             <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.CreateDatabaseQuery(Microsoft.Azure.Documents.Client.DocumentClient,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for database resources under an account.  It returns An IOrderedQueryable{Database&gt;.
            </summary>
            <param name="client">the DocumentClient instance to execute the query.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IOrderedQueryable{Database} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for databases by id.
            <code language="c#">
            <![CDATA[
            Database database = client.CreateDatabaseQuery().Where(d => d.Id == "mydb").AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Database"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.CreateDatabaseQuery(Microsoft.Azure.Documents.Client.DocumentClient,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for database resources under an account by using a SQL statement.  It returns an IQueryable{dynamic}.
            </summary>
            <param name="client">the DocumentClient instance to execute the query.</param>
            <param name="sqlExpression">The SQL statement.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for databases by id.
            <code language="c#">
            <![CDATA[
            Database database = client.CreateDatabaseQuery("SELECT * FROM dbs d WHERE d.id = 'mydb'").AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Database"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.CreateDatabaseQuery(Microsoft.Azure.Documents.Client.DocumentClient,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for database resources under an account by using a SQL statement with parameterized values.  It returns an IQueryable{dynamic}.
             For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec"/>.
            </summary>
            <param name="client">the DocumentClient instance to execute the query.</param>
            <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for databases by id.
            <code language="c#">
            <![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM dbs d WHERE d.id = @id",
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "mydb" }}));
            dynamic database = client.CreateDatabaseQuery<dynamic>(query).AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Database"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.CreateDocumentCollectionQuery(Microsoft.Azure.Documents.Client.DocumentClient,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates create a query for collections under a database.  It returns An IOrderedQueryable{DocumentCollection&gt;.
            </summary>
            <param name="client">the DocumentClient instance to execute the query.</param>
            <param name="collectionsLink">The path link for the collections under a database, e.g. dbs/db_rid/colls/.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IOrderedQueryable{DocumentCollection} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for collections by id.
            <code language="c#">
            <![CDATA[
            DocumentCollection collection = client.CreateDocumentCollectionQuery(databaseLink).Where(c => c.Id == "myColl").AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.DocumentCollection"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.CreateDocumentCollectionQuery(Microsoft.Azure.Documents.Client.DocumentClient,System.String,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates create a query for collections under a database using a SQL statement.   It returns an IQueryable{DocumentCollection}.
            </summary>
            <param name="client">the DocumentClient instance to execute the query.</param>
            <param name="collectionsLink">The path link for the collections under a database, e.g. dbs/db_rid/colls/.</param>
            <param name="sqlExpression">The SQL statement.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for collections by id.
            <code language="c#">
            <![CDATA[
            DocumentCollection collection = client.CreateDocumentCollectionQuery(databaseLink, "SELECT * FROM colls c WHERE c.id = 'mycoll'").AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.DocumentCollection"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.CreateDocumentCollectionQuery(Microsoft.Azure.Documents.Client.DocumentClient,System.String,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates create a query for collections under a database using a SQL statement with parameterized values.  It returns an IQueryable{dynamic}.
             For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec"/>.
            </summary>
            <param name="client">the DocumentClient instance to execute the query.</param>
            <param name="collectionsLink">The path link for the collections under a database, e.g. dbs/db_rid/colls/.</param>
            <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for collections by id.
            <code language="c#">
            <![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM colls c WHERE c.id = @id", new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "mycoll" }}));
            DocumentCollection collection = client.CreateDocumentCollectionQuery(databaseLink, query).AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.DocumentCollection"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.CreateStoredProcedureQuery(Microsoft.Azure.Documents.Client.DocumentClient,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates create a query for stored procedures under a collection.  It returns An IOrderedQueryable{StoredProcedure&gt;.
            </summary>
            <param name="client">the DocumentClient instance to execute the query.</param>
            <param name="storedProceduresLink">The path link for stored procedures under a collection, e.g. dbs/db_rid/colls/coll_rid/sprocs/.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IOrderedQueryable{StoredProcedure} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for stored procedures by id.
            <code language="c#">
            <![CDATA[
            StoredProcedure storedProcedure = client.CreateStoredProcedureQuery(collectionLink).Where(c => c.Id == "helloWorld").AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.StoredProcedure"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.CreateStoredProcedureQuery(Microsoft.Azure.Documents.Client.DocumentClient,System.String,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates create a query for stored procedures under a collection using a SQL statement.  It returns an IQueryable{dynamic}.
            </summary>
            <param name="client">the DocumentClient instance to execute the query.</param>
            <param name="storedProceduresLink">The path link for stored procedures under a collection, e.g. dbs/db_rid/colls/coll_rid/sprocs/.</param>
            <param name="sqlExpression">The SQL statement.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for stored procedures by id.
            <code language="c#">
            <![CDATA[
            StoredProcedure storedProcedure = client.CreateStoredProcedureQuery(collectionLink, "SELECT * FROM sprocs s WHERE s.id = 'HelloWorld'").AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.StoredProcedure"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.CreateStoredProcedureQuery(Microsoft.Azure.Documents.Client.DocumentClient,System.String,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates create a query for stored procedures under a collection using a SQL statement using a SQL statement with parameterized values.  It returns an IQueryable{dynamic}.
             For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec"/>.
            </summary>
            <param name="client">the DocumentClient instance to execute the query.</param>
            <param name="storedProceduresLink">The path link for stored procedures under a collection, e.g. dbs/db_rid/colls/coll_rid/sprocs/.</param>
            <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for stored procedures by id.
            <code language="c#">
            <![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM sprocs s WHERE s.id = @id", new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "HelloWorld" }}));
            StoredProcedure storedProcedure = client.CreateStoredProcedureQuery(collectionLink, query).AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.StoredProcedure"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.CreateTriggerQuery(Microsoft.Azure.Documents.Client.DocumentClient,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates create a query for triggers under a collection.  It returns An IOrderedQueryable{Trigger&gt;.
            </summary>
            <param name="client">the DocumentClient instance to execute the query.</param>
            <param name="triggersLink">The path link for triggers unders a collection, e.g. dbs/db_rid/colls/coll_rid/triggers/.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IOrderedQueryable{Trigger} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for triggers by id.
            <code language="c#">
            <![CDATA[
            Trigger trigger = client.CreateTriggerQuery(collectionLink).Where(t => t.Id == "validate").AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Trigger"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.CreateTriggerQuery(Microsoft.Azure.Documents.Client.DocumentClient,System.String,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates create a query for triggers under a collection.  It returns an IQueryable{dynamic}.
            </summary>
            <param name="client">the DocumentClient instance to execute the query.</param>
            <param name="triggersLink">The path link for triggers unders a collection, e.g. dbs/db_rid/colls/coll_rid/triggers/.</param>
            <param name="sqlExpression">The SQL statement.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for triggers by id.
            <code language="c#">
            <![CDATA[
            Trigger trigger = client.CreateTriggerQuery(collectionLink, "SELECT * FROM triggers t WHERE t.id = 'validate'").AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Trigger"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.CreateTriggerQuery(Microsoft.Azure.Documents.Client.DocumentClient,System.String,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates create a query for triggers under a collection using a SQL statement with parameterized values.  It returns an IQueryable{dynamic}.
             For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec"/>.
            </summary>
            <param name="client">the DocumentClient instance to execute the query.</param>
            <param name="triggersLink">The path link for triggers unders a collection, e.g. dbs/db_rid/colls/coll_rid/triggers/.</param>
            <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{Trigger} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for triggers by id.
            <code language="c#">
            <![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM triggers t WHERE t.id = @id", new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "HelloWorld" }}));
            Trigger trigger = client.CreateTriggerQuery(collectionLink, query).AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Trigger"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.CreateUserDefinedFunctionQuery(Microsoft.Azure.Documents.Client.DocumentClient,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates create a query for udfs under a collection.  It returns An IOrderedQueryable{UserDefinedFunction&gt;.
            </summary>
            <param name="client">the DocumentClient instance to execute the query.</param>
            <param name="userDefinedFunctionsLink">The path link for udfs unders a collection, e.g. dbs/db_rid/colls/coll_rid/udfs/.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IOrderedQueryable{UserDefinedFunction} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for user-defined functions by id.
            <code language="c#">
            <![CDATA[
            UserDefinedFunction udf = client.CreateUserDefinedFunctionQuery(collectionLink).Where(u => u.Id == "sqrt").AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.CreateUserDefinedFunctionQuery(Microsoft.Azure.Documents.Client.DocumentClient,System.String,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates create a query for udfs under a collection using a SQL statement.  It returns an IQueryable{dynamic}.
            </summary>
            <param name="client">the DocumentClient instance to execute the query.</param>
            <param name="userDefinedFunctionsLink">The path link for udfs unders a collection, e.g. dbs/db_rid/colls/coll_rid/udfs/.</param>
            <param name="sqlExpression">The SQL statement.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for user-defined functions by id.
            <code language="c#">
            <![CDATA[
            UserDefinedFunction udf = client.CreateUserDefinedFunctionQuery(collectionLink, "SELECT * FROM udfs u WHERE u.id = 'sqrt'").AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.CreateUserDefinedFunctionQuery(Microsoft.Azure.Documents.Client.DocumentClient,System.String,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates create a query for udfs under a collection with parameterized values.  It returns an IQueryable{dynamic}.
             For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec"/>.
            </summary>
            <param name="client">the DocumentClient instance to execute the query.</param>
            <param name="userDefinedFunctionsLink">The path link for udfs unders a collection, e.g. dbs/db_rid/colls/coll_rid/udfs/.</param>
            <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for user-defined functions by id.
            <code language="c#">
            <![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM udfs u WHERE u.id = @id", new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "sqrt" }}));
            UserDefinedFunction udf = client.CreateUserDefinedFunctionQuery(collectionLink, query).AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.UserDefinedFunction"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.CreateConflictQuery(Microsoft.Azure.Documents.Client.DocumentClient,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates create a query for conflicts under a collection.  It returns An IOrderedQueryable{Conflict}.
            </summary>
            <param name="client">the DocumentClient instance to execute the query.</param>
            <param name="conflictsLink">The path link for conflicts unders a collection, e.g. dbs/db_rid/colls/coll_rid/conflicts/.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IOrderedQueryable{Conflict} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for conflicts by id.
            <code language="c#">
            <![CDATA[
            Conflict conflict = client.CreateConflictQuery(collectionLink).Where(c => c.Id == "summary").AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Conflict"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.CreateConflictQuery(Microsoft.Azure.Documents.Client.DocumentClient,System.String,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates create a query for conflicts under a collection.  It returns an IQueryable{Conflict}.
            </summary>
            <param name="client">the DocumentClient instance to execute the query.</param>
            <param name="conflictsLink">The path link for conflicts unders a collection, e.g. dbs/db_rid/colls/coll_rid/conflicts/.</param>
            <param name="sqlExpression">The SQL statement.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{dynamic} that can evaluate the query with the the provided SQL statement.</returns>
            <example>
            This example below queries for conflicts by id.
            <code language="c#">
            <![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM conflicts c WHERE c.id = @id", new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "summary" }}));
            Conflict conflict = client.CreateConflictQuery(collectionLink, query).AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Conflict"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.CreateConflictQuery(Microsoft.Azure.Documents.Client.DocumentClient,System.String,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates create a query for conflicts under a collection with parameterized values.  It returns an IQueryable{dynamic}.
             For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec"/>.
            </summary>
            <param name="client">the DocumentClient instance to execute the query.</param>
            <param name="conflictsLink">The path link for conflicts unders a collection, e.g. dbs/db_rid/colls/coll_rid/conflicts/.</param>
            <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
            <example>
            This example below queries for conflicts by id.
            <code language="c#">
            <![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM conflicts c WHERE c.id = @id", new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "summary" }}));
            dynamic conflict = client.CreateConflictQuery<dynamic>(collectionLink, query).AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Document"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.CreateDocumentQuery``1(Microsoft.Azure.Documents.Client.DocumentClient,System.String,Microsoft.Azure.Documents.Client.FeedOptions,System.Object)">
            <summary>
            Overloaded. This method creates a query for documents under a collection.
            </summary>
            <typeparam name="T">The type of object to query.</typeparam>
            <param name="client">The DocumentClient instance to execute the query.</param>
            <param name="documentsFeedOrDatabaseLink">The path link for the documents under a collection, e.g. dbs/db_rid/colls/coll_rid/docs/. 
            Alternatively, this can be a path link to the database when using an <see cref="T:Microsoft.Azure.Documents.Client.IPartitionResolver"/>, e.g. dbs/db_rid/</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <param name="partitionKey">Optional partition key that can be used with an <see cref="T:Microsoft.Azure.Documents.Client.IPartitionResolver"/>.</param>
            <returns>An IOrderedQueryable{T} that can evaluate the query.</returns>
            <example>
            This example below queries for some book documents.
            <code language="c#">
            <![CDATA[
            public class Book 
            {
                [JsonProperty("title")]
                public string Title {get; set;}
                
                public Author Author {get; set;}
                
                public int Price {get; set;}
            }
            
            public class Author
            {
                public string FirstName {get; set;}
                public string LastName {get; set;}
            }
             
            // Query by the Title property
            Book book = client.CreateDocumentQuery<Book>(collectionLink).Where(b => b.Title == "War and Peace").AsEnumerable().FirstOrDefault();
            
            // Query a nested property
            Book otherBook = client.CreateDocumentQuery<Book>(collectionLink).Where(b => b.Author.FirstName == "Leo").AsEnumerable().FirstOrDefault();
            
            // Perform a range query (needs an IndexType.Range on price or FeedOptions.EnableScansInQuery)
            foreach (Book matchingBook in client.CreateDocumentQuery<Book>(collectionLink).Where(b => b.Price > 100))
            {
                // Iterate through books
            }
            
            // Query asychronously. Optionally set FeedOptions.MaxItemCount to control page size
            var queryable = client.CreateDocumentQuery<Book>(
                collectionLink,
                new FeedOptions { MaxItemCount = 10 })
                .Where(b => b.Title == "War and Peace")
                .AsDocumentQuery();
            
            while (queryable.HasMoreResults) 
            {
                foreach(Book b in await queryable.ExecuteNextAsync<Book>())
                {
                    // Iterate through books
                }
            }
            ]]>
            </code>
            </example>
            <remarks>
            The DocumentDB LINQ provider compiles LINQ to SQL statements. Refer to http://azure.microsoft.com/documentation/articles/documentdb-sql-query/#linq-to-documentdb-sql for the list of expressions supported by the DocumentDB LINQ provider. ToString() on the generated IQueryable returns the translated SQL statement. The DocumentDB provider translates JSON.NET and DataContract serialization attributes for members to their JSON property names.
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Document"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.CreateDocumentQuery``1(Microsoft.Azure.Documents.Client.DocumentClient,System.String,System.String,Microsoft.Azure.Documents.Client.FeedOptions,System.Object)">
            <summary>
            Overloaded. This method creates a query for documents under a collection using a SQL statement. It returns an IQueryable{T}.
            </summary>
            <typeparam name="T">The type of object to query.</typeparam>
            <param name="client">The DocumentClient instance to execute the query.</param>
            <param name="documentsFeedOrDatabaseLink">The path link for the documents under a collection, e.g. dbs/db_rid/colls/coll_rid/docs/. 
            Alternatively, this can be a path link to the database when using an <see cref="T:Microsoft.Azure.Documents.Client.IPartitionResolver"/>, e.g. dbs/db_rid/</param>
            <param name="sqlExpression">The SQL statement.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <param name="partitionKey">Optional partition key that can be used with an <see cref="T:Microsoft.Azure.Documents.Client.IPartitionResolver"/>.</param>
            <returns>An IQueryable{T} that can evaluate the query.</returns>
            <example>
            This example below queries for some book documents.
            <code language="c#">
            <![CDATA[
            public class Book 
            {
                [JsonProperty("title")]
                public string Title {get; set;}
                
                public Author Author {get; set;}
                
                public int Price {get; set;}
            }
            
            public class Author
            {
                public string FirstName {get; set;}
                public string LastName {get; set;}
            }
            
            // Query by the Title property
            Book book = client.CreateDocumentQuery<Book>(collectionLink, 
                "SELECT * FROM books b WHERE b.title  = 'War and Peace'").AsEnumerable().FirstOrDefault();
            
            // Query a nested property
            Book otherBook = client.CreateDocumentQuery<Book>(collectionLink,
                "SELECT * FROM books b WHERE b.Author.FirstName = 'Leo'").AsEnumerable().FirstOrDefault();
            
            // Perform a range query (needs an IndexType.Range on price or FeedOptions.EnableScansInQuery)
            foreach (Book matchingBook in client.CreateDocumentQuery<Book>(
                collectionLink, "SELECT * FROM books b where b.Price > 1000"))
            {
                // Iterate through books
            }
            
            // Query asychronously. Optionally set FeedOptions.MaxItemCount to control page size
            var queryable = client.CreateDocumentQuery<Book>(collectionLink, 
                "SELECT * FROM books b WHERE b.title  = 'War and Peace'", 
                new FeedOptions { MaxItemCount = 10 }).AsDocumentQuery();
            
            while (queryable.HasMoreResults) 
            {
                foreach(Book b in await queryable.ExecuteNextAsync<Book>())
                {
                    // Iterate through books
                }
            }
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Document"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.CreateDocumentQuery``1(Microsoft.Azure.Documents.Client.DocumentClient,System.String,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions,System.Object)">
            <summary>
            Overloaded. This method creates a query for documents under a collection using a SQL statement with parameterized values.  It returns an IQueryable{T}.
             For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec"/>.
            </summary>
            <typeparam name="T">The type of object to query.</typeparam>
            <param name="client">The DocumentClient instance to execute the query.</param>
            <param name="documentsFeedOrDatabaseLink">The path link for the documents under a collection, e.g. dbs/db_rid/colls/coll_rid/docs/. 
            Alternatively, this can be a path link to the database when using an <see cref="T:Microsoft.Azure.Documents.Client.IPartitionResolver"/>, e.g. dbs/db_rid/</param>
            <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <param name="partitionKey">Optional partition key that can be used with an <see cref="T:Microsoft.Azure.Documents.Client.IPartitionResolver"/>.</param>
            <returns>An IQueryable{T} that can evaluate the query.</returns>
            <example>
            This example below queries for some book documents.
            <code language="c#">
            <![CDATA[
            public class Book 
            {
                [JsonProperty("title")]
                public string Title {get; set;}
                
                public Author Author {get; set;}
                
                public int Price {get; set;}
            }
            
            public class Author
            {
                public string FirstName {get; set;}
                public string LastName {get; set;}
            }
            
            // Query using Title
            Book book, otherBook;
            
            var query = new SqlQuerySpec(
                "SELECT * FROM books b WHERE b.title = @title", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@title", Value = "War and Peace" }}));
            book = client.CreateDocumentQuery<Book>(collectionLink, query).AsEnumerable().FirstOrDefault();
            
            // Query a nested property
            query = new SqlQuerySpec(
                "SELECT * FROM books b WHERE b.Author.FirstName = @firstName", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@firstName", Value = "Leo" }}));
            otherBook = client.CreateDocumentQuery<Book>(collectionLink, query).AsEnumerable().FirstOrDefault();
            
            // Perform a range query (needs an IndexType.Range on price or FeedOptions.EnableScansInQuery)
            query = new SqlQuerySpec(
                "SELECT * FROM books b WHERE b.Price > @minPrice", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@minPrice", Value = 1000 }}));
            foreach (Book b in client.CreateDocumentQuery<Book>(
                collectionLink, query))
            {
                // Iterate through books
            }
            
            // Query asychronously. Optionally set FeedOptions.MaxItemCount to control page size
            query = new SqlQuerySpec(
                "SELECT * FROM books b WHERE b.title = @title", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@title", Value = "War and Peace" }}));
                
            var queryable = client.CreateDocumentQuery<Book>(collectionLink, query, 
                new FeedOptions { MaxItemCount = 10 }).AsDocumentQuery();
            
            while (queryable.HasMoreResults) 
            {
                foreach(Book b in await queryable.ExecuteNextAsync<Book>())
                {
                    // Iterate through books
                }
            }
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Document"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.CreateDocumentQuery(Microsoft.Azure.Documents.Client.DocumentClient,System.String,Microsoft.Azure.Documents.Client.FeedOptions,System.Object)">
             <summary>
             Overloaded. This method creates a query for documents under a collection.  It returns IOrderedQueryable{Document}.
             </summary>
             <param name="client">The DocumentClient instance to execute the query.</param>
             <param name="documentsFeedOrDatabaseLink">The path link for the documents under a collection, e.g. dbs/db_rid/colls/coll_rid/docs/. 
             Alternatively, this can be a path link to the database when using an <see cref="T:Microsoft.Azure.Documents.Client.IPartitionResolver"/>, e.g. dbs/db_rid/</param>
             <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
             <param name="partitionKey">Optional partition key that can be used with an <see cref="T:Microsoft.Azure.Documents.Client.IPartitionResolver"/>.</param>
             <returns>An IOrderedQueryable{Document} that can evaluate the query.</returns>
             <example>
             This example below queries for documents by id.
             <code language="c#">
             <![CDATA[
             Document document = client.CreateDocumentQuery<Document>(collectionLink)
                 .Where(d => d.Id == "War and Peace").AsEnumerable().FirstOrDefault();
            
             ]]>
             </code>
             </example>
             <remarks>
             This overload should be used when the schema of the queried documents is unknown or when querying by ID and replacing/deleting documents.
             Since Document is a DynamicObject, it can be dynamically cast back to the original C# object.
             </remarks>
             <seealso cref="T:Microsoft.Azure.Documents.Document"/>
             <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.CreateDocumentQuery(Microsoft.Azure.Documents.Client.DocumentClient,System.String,System.String,Microsoft.Azure.Documents.Client.FeedOptions,System.Object)">
            <summary>
            Overloaded. This method creates a query for documents under a collection using a SQL statement. It returns an IQueryable{dynamic}.
            </summary>
            <param name="client">The DocumentClient instance to execute the query.</param>
            <param name="documentsFeedOrDatabaseLink">The path link for the documents under a collection, e.g. dbs/db_rid/colls/coll_rid/docs/. 
            Alternatively, this can be a path link to the database when using an <see cref="T:Microsoft.Azure.Documents.Client.IPartitionResolver"/>, e.g. dbs/db_rid/</param>
            <param name="sqlExpression">The SQL statement.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <param name="partitionKey">Optional partition key that can be used with an <see cref="T:Microsoft.Azure.Documents.Client.IPartitionResolver"/>.</param>
            <returns>an IQueryable{dynamic&gt; that can evaluate the query.</returns>
            <example>
            This example below queries for book documents.
            <code language="c#">
            <![CDATA[
            // SQL querying allows dynamic property access
            dynamic document = client.CreateDocumentQuery<dynamic>(collectionLink,
                "SELECT * FROM books b WHERE b.title == 'War and Peace'").AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Document"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.CreateDocumentQuery(Microsoft.Azure.Documents.Client.DocumentClient,System.String,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions,System.Object)">
            <summary>
            Overloaded. This method creates a query for documents under a collection using a SQL statement with parameterized values.  It returns an IQueryable{dynamic}.
            For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec"/>.
            </summary>
            <param name="client">The DocumentClient instance to execute the query.</param>
            <param name="documentsFeedOrDatabaseLink">The path link for the documents under a collection, e.g. dbs/db_rid/colls/coll_rid/docs/. 
            Alternatively, this can be a path link to the database when using an <see cref="T:Microsoft.Azure.Documents.Client.IPartitionResolver"/>, e.g. dbs/db_rid/</param>
            <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <param name="partitionKey">Optional partition key that can be used with an <see cref="T:Microsoft.Azure.Documents.Client.IPartitionResolver"/>.</param>
            <returns>an IQueryable{dynamic&gt; that can evaluate the query.</returns>
            <example>
            This example below queries for book documents.
            <code language="c#">
            <![CDATA[
            // SQL querying allows dynamic property access
            var query = new SqlQuerySpec(
                "SELECT * FROM books b WHERE b.title = @title", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@title", Value = "War and Peace" }}));
                
            dynamic document = client.CreateDocumentQuery<dynamic>(collectionLink, query).AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Document"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.CreateUserQuery(Microsoft.Azure.Documents.Client.DocumentClient,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for users under a database.  It returns IOrderedQueryable{User}.
            </summary>
            <param name="client">The DocumentClient instance to execute the query.</param>
            <param name="usersLink">The path link for the users under a database, e.g. dbs/db_rid/users/.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IOrderedQueryable{User} that can evaluate the query.</returns>
            <example>
            This example below queries for users by id.
            <code language="c#">
            <![CDATA[
            User user = client.CreateUserQuery(usersLink).Where(u => u.Id == "userid5").AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.User"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.CreateUserQuery(Microsoft.Azure.Documents.Client.DocumentClient,System.String,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for users under a database.  It returns IQueryable{dyanamic}.
            </summary>
            <param name="client">The DocumentClient instance to execute the query.</param>
            <param name="usersLink">The path link for the users under a database, e.g. dbs/db_rid/users/.</param>
            <param name="sqlExpression">The SQL statement.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>an IQueryable{dynamic} that can evaluate the query.</returns>
            <example>
            This example below queries for users by id.
            <code language="c#">
            <![CDATA[
            User user = client.CreateUserQuery(usersLink, "SELECT * FROM users u WHERE u.id = 'userid5'").AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.User"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.CreateUserQuery(Microsoft.Azure.Documents.Client.DocumentClient,System.String,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for users under a database using a SQL statement with parameterized values.  It returns an IQueryable{dynamic}.
            For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec"/>.
            </summary>
            <param name="client">The DocumentClient instance to execute the query.</param>
            <param name="usersLink">The path link for the users under a database, e.g. dbs/db_rid/users/.</param>
            <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>an IQueryable{dynamic&gt; that can evaluate the query.</returns>
            <example>
            This example below queries for users by id.
            <code language="c#">
            <![CDATA[
            var query = new SqlQuerySpec(
                "SELECT * FROM users u WHERE u.id = @id", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "userid5" }}));
                
            User user = client.CreateUserQuery(usersLink, query).AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.User"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.CreatePermissionQuery(Microsoft.Azure.Documents.Client.DocumentClient,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for permissions under a user.  It returns IOrderedQueryable{Permission}.
            </summary>
            <param name="client">The DocumentClient instance to execute the query.</param>
            <param name="permissionsLink">The path link for the persmissions under a user, e.g. dbs/db_rid/users/user_rid/permissions/.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IOrderedQueryable{Permission} that can evaluate the query.</returns>
            <example>
            This example below queries for permissions by id.
            <code language="c#">
            <![CDATA[
            Permission perm = client.CreatePermissionQuery(userLink).Where(p => p.id == "readonly").AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Permission"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.CreatePermissionQuery(Microsoft.Azure.Documents.Client.DocumentClient,System.String,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for permissions under a user using a SQL statement.  It returns IQueryable{dynamic}.
            </summary>
            <param name="client">The DocumentClient instance to execute the query.</param>
            <param name="permissionsLink">The path link for the persmissions under a user, e.g. dbs/db_rid/users/user_rid/permissions/.</param>
            <param name="sqlExpression">The SQL statement.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>an IQueryable{dynamic} that can evaluate the query.</returns>
            <example>
            This example below queries for permissions by id.
            <code language="c#">
            <![CDATA[
            Permission perm = client.CreatePermissionQuery(userLink, 
                "SELECT * FROM perms p WHERE p.id = 'readonly'").AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Permission"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.CreatePermissionQuery(Microsoft.Azure.Documents.Client.DocumentClient,System.String,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for permissions under a user using a SQL statement with parameterized values.  It returns an IQueryable{dynamic}.
            For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec"/>.
            </summary>
            <param name="client">The DocumentClient instance to execute the query.</param>
            <param name="permissionsLink">The path link for the persmissions under a user, e.g. dbs/db_rid/users/user_rid/permissions/.</param>
            <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>an IQueryable{dynamic} that can evaluate the query.</returns>
            <example>
            This example below queries for permissions by id.
            <code language="c#">
            <![CDATA[
            var query = new SqlQuerySpec(
                "SELECT * FROM perms p WHERE p.id = @id", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "readonly" }}));
                
            Permission perm = client.CreatePermissionQuery(usersLink, query).AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Permission"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.CreateOfferQuery(Microsoft.Azure.Documents.Client.DocumentClient,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for offers under an account.  It returns IOrderedQueryable{Offer}.
            </summary>
            <param name="client">The DocumentClient instance to execute the query.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>An IOrderedQueryable{Offer} that can evaluate the query.</returns>
            <example>
            This example below queries for offers
            <code language="c#">
            <![CDATA[
            // Find the first collection with the S3 offer type
            Offer offer = client.CreateOfferQuery().Where(o => o.OfferType == "S3").AsEnumerable().FirstOrDefault();
            
            // Find the offer for the collection by SelfLink
            Offer offer = client.CreateOfferQuery().Where(o => o.Resource == collectionSelfLink).AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Offer"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.CreateOfferQuery(Microsoft.Azure.Documents.Client.DocumentClient,System.String,Microsoft.Azure.Documents.Client.FeedOptions)">
            <summary>
            Overloaded. This method creates a query for offers under an account using a SQL statement.  It returns IQueryable{dynamic}.
            </summary>
            <param name="client">The DocumentClient instance to execute the query.</param>
            <param name="sqlExpression">The SQL statement.</param>
            <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions"/></param>
            <returns>an IQueryable{dynamic} that can evaluate the query.</returns>
            <example>
            This example below queries for offers
            <code language="c#">
            <![CDATA[
            // Find the first collection with the S3 offer type
            Offer offer = client.CreateOfferQuery("SELECT * FROM offers o WHERE o.offerType = 'S3'").AsEnumerable().FirstOrDefault();
            
            // Find the offer for the collection by SelfLink
            Offer offer = client.CreateOfferQuery(
                string.Format("SELECT * FROM offers o WHERE o.resource = '{0}'", collectionSelfLink)).AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Offer"/>
            <seealso cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.AsDocumentQuery``1(System.Linq.IQueryable{``0})">
            <summary>
            Converts an IQueryable to IDocumentQuery which supports pagination and asynchronous execution.
            </summary>
            <typeparam name="T">the type of object to query.</typeparam>
            <param name="query">the IQueryable{T} to be converted.</param>
            <returns>An IDocumentQuery{T} that can evaluate the query.</returns>
            <example>
            This example shows how to run a query asynchronously using the AsDocumentQuery() interface.
            
            <code language="c#">
            <![CDATA[
            var queryable = client.CreateDocumentQuery<Book>(
                collectionLink,
                new FeedOptions { MaxItemCount = 10 })
                .Where(b => b.Title == "War and Peace")
                .AsDocumentQuery();
            
            while (queryable.HasMoreResults) 
            {
                foreach(Book b in await queryable.ExecuteNextAsync<Book>())
                {
                    // Iterate through books
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.AsSQL``2(System.Linq.IOrderedQueryable{``0},Microsoft.Azure.Documents.SqlQuerySpec)">
            <summary>
            Extension method to create a SQL query.
            </summary>
            <typeparam name="TSource">the source type.</typeparam>
            <typeparam name="TResult">the result type.</typeparam>
            <param name="source">the source result set.</param>
            <param name="querySpec">the SQL query language expression.</param>
            <returns>the query result set.</returns>
            <remarks>Refer to the DocumentDB SQL query documentation for syntax and examples.</remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.DocumentQueryable.AsSQL``1(System.Linq.IOrderedQueryable{``0},Microsoft.Azure.Documents.SqlQuerySpec)">
            <summary>
            Extension method to create a SQL query.
            </summary>
            <typeparam name="TSource">the source type.</typeparam>
            <param name="source">the source result set.</param>
            <param name="querySpec">the SQL query language expression.</param>
            <returns>the query result set.</returns>
            <remarks>Refer to the DocumentDB SQL query documentation for syntax and examples.</remarks>
        </member>
        <member name="T:Microsoft.Azure.Documents.Linq.QueryUnderConstruction">
            <summary>
            Query that is being constructed.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.Linq.QueryUnderConstruction.inputQuery">
            <summary>
            Input subquery.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.QueryUnderConstruction.CreateFrom">
            <summary>
            Create a FROM clause from a set of FROM parameter bindings.
            </summary>
            <returns>The created FROM clause.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.QueryUnderConstruction.GetSqlQuery">
            <summary>
            Convert the entire query to a SQL Query.
            </summary>
            <returns>The corresponding SQL Query.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.QueryUnderConstruction.Flatten">
            <summary>
            Flatten subqueries into a single query by substituting their expressions in the current query.
            </summary>
            <returns>A flattened query.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.QueryUnderConstruction.AddSelectClause(Microsoft.Azure.Documents.Sql.SqlSelectClause,System.Type,System.Type,System.Collections.Generic.HashSet{System.Linq.Expressions.ParameterExpression})">
            <summary>
            Add a Select clause to a query; may need to create a new subquery.
            </summary>
            <param name="select">Select clause to add.</param>
            <param name="inputElementType">Type of element in the input collection.</param>
            <param name="outputElementType">Type of element in output collection.</param>
            <param name="inScope">Set of parameter names in scope.</param>
            <returns>A new query containing a select clause.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.QueryUnderConstruction.AddWhereClause(Microsoft.Azure.Documents.Sql.SqlWhereClause,System.Type,System.Collections.Generic.HashSet{System.Linq.Expressions.ParameterExpression})">
            <summary>
            Add a Where clause to a query; may need to create a new query.
            </summary>
            <param name="whereClause">Clause to add.</param>
            <param name="elementType">Type of element in input collection.</param>
            <param name="inScope">Set of parameter names in scope.</param>
            <returns>A new query containing the specified Where clause.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.QueryUnderConstruction.ToString">
            <summary>
            Debugging string.
            </summary>
            <returns>Query representation as a string (not legal SQL).</returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.Linq.QueryUnderConstruction.fromParameters">
            <summary>
            Binding for the FROM parameters.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.Linq.SqlTranslator">
            <summary>
            Wrapper class for translating LINQ to DocDB SQL.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.SqlTranslator.TranslateExpression(System.Linq.Expressions.Expression)">
            <summary>
            This function exists for testing only.
            </summary>
            <param name="inputExpression">Expression to translate.</param>
            <returns>A string describing the expression translation.</returns>
        </member>
        <member name="T:Microsoft.Azure.Documents.Linq.ParameterSubstitution">
            <summary>
            Maintains a map from parameters to expressions.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.Linq.FromParameterBindings">
            <summary>
            Bindings for a set of parameters used in a FROM expression.
            Each parameter is bound to a collection.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.Linq.FromParameterBindings.ParameterDefinitions">
            <summary>
            The list of parameter definitions.  This will generate a FROM clause of the shape:
            FROM ParameterDefinitions[0] JOIN ParameterDefinitions[1] ... ParameterDefinitions[n]
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.FromParameterBindings.#ctor">
            <summary>
            Create empty parameter bindings.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.FromParameterBindings.SetInputParameter(System.Type,System.String,System.Collections.Generic.HashSet{System.Linq.Expressions.ParameterExpression})">
            <summary>
            Sets the parameter which iterates over the outer collection.
            </summary> 
            <param name="parameterName">Hint for name.</param>
            <param name="parameterType">Parameter type.</param>
            <param name="inScope">List of parameter names currently in scope.</param>
            <returns>The name of the parameter which iterates over the outer collection.  
            If the name is already set it will return the existing name.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.FromParameterBindings.GetInputParameter">
            <summary>
            Get the input parameter.
            </summary>
            <returns>The input parameter.</returns>
        </member>
        <member name="T:Microsoft.Azure.Documents.Linq.FromParameterBindings.Binding">
            <summary>
            Binding for a single parameter.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.Linq.FromParameterBindings.Binding.Parameter">
            <summary>
            Parameter defined by FROM clause
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.Linq.FromParameterBindings.Binding.ParameterDefinition">
            <summary>
            How parameter is defined (may be null).  
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.Linq.FromParameterBindings.Binding.IsInCollection">
            <summary>
            If true this corresponds to the clause `Parameter IN ParameterDefinition'
            else this corresponds to the clause `ParameterDefinition Parameter'
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.Linq.TranslationContext">
            <summary>
            Used by the Expression tree visitor.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.Linq.TranslationContext.InScope">
            <summary>
            Set of parameters in scope at any point; used to generate fresh parameter names if necessary.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.Linq.TranslationContext.substitutions">
            <summary>
            If the FROM clause uses a parameter name, it will be substituted for the parameter used in 
            the lambda expressions for the WHERE and SELECT clauses.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.Linq.TranslationContext.methodStack">
            <summary>
            We are currently visiting these methods.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.Linq.TranslationContext.lambdaParametersStack">
            <summary>
            Stack of parameters from lambdas currently in scope.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.Linq.TranslationContext.collectionStack">
            <summary>
            Stack of collection-valued inputs.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.Linq.TranslationContext.currentQuery">
            <summary>
            Query that is being assembled.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.TranslationContext.PushParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Called when visiting a lambda with one parameter.
            Binds this parameter with the last collection visited.
            </summary>
            <param name="parameter">New parameter.</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.TranslationContext.PopParameter">
            <summary>
            Remove a parameter from the stack.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.TranslationContext.PushMethod(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Called when visiting a new MethodCall.
            </summary>
            <param name="method">Method that is being visited.</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.TranslationContext.PopMethod">
            <summary>
            Called when finished visiting a MethodCall.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.TranslationContext.PushCollection(Microsoft.Azure.Documents.Linq.Collection)">
            <summary>
            Called when visiting a LINQ Method call with the input collection of the method.
            </summary>
            <param name="collection">Collection that is the input to a LINQ method.</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.TranslationContext.SetInputParameter(System.Type,System.String)">
            <summary>
            Sets the parameter used to scan the input.
            </summary>
            <param name="name">Suggested name for the input parameter.</param>
            <param name="type">Type of the input parameter.</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.TranslationContext.SetFromParameter(System.Linq.Expressions.ParameterExpression,Microsoft.Azure.Documents.Sql.SqlCollection)">
            <summary>
            Sets the parameter used by the this.fromClause if it is not already set.
            </summary>
            <param name="parameter">Parameter to set for the FROM clause.</param>
            <param name="collection">Collection to bind parameter to.</param>
        </member>
        <member name="T:Microsoft.Azure.Documents.Linq.Collection">
            <summary>
            There are two types of collections: outer and inner.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.Collection.#ctor(System.String)">
            <summary>
            Creates an outer collection.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.TypeSystem.IsAnonymousType(System.Type)">
            <summary>
            True if type is anonymous.
            </summary>
            <param name="type">Type to check.</param>
            <returns>Trye if the type is anonymous.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.Utilities.SqlQuoteString(System.String)">
            <summary>
            Add quotation signs to a string.
            </summary>
            <param name="toQuote">String to quote.</param>
            <returns>A string properly quoted for embedding into SQL.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.Utilities.GetLambda(System.Linq.Expressions.Expression)">
            <summary>
            Get a lambda expression; may unpeel quotes.
            </summary> 
            <param name="expr">Expression to convert to a lambda.</param>
            <returns>The contained lambda expression, or an exception.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Linq.Utilities.NewParameter(System.String,System.Type,System.Collections.Generic.HashSet{System.Linq.Expressions.ParameterExpression})">
            <summary>
            Generate a new parameter.
            </summary>
            <param name="prefix">Prefix for the parameter name.</param>
            <param name="type">Parameter type.</param>
            <param name="inScope">Names to avoid.</param>
            <returns>The new parameter.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Partitioning.ConsistentHashRing.#ctor(Microsoft.Azure.Documents.Partitioning.IHashGenerator,System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>  
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Partitioning.ConsistentHashRing"/> class.
            </summary>  
            <param name="hashGenerator">A hash generation algorithm specified as an <see cref="T:Microsoft.Azure.Documents.Partitioning.IHashGenerator"/> implementation. </param>
            <param name="nodes">Collection of nodes. The node type (T) must have a stable implementation of <see cref="M:System.Object.GetHashCode"/></param>
            <param name="totalPartitions">Total number of desired partitions; must be greater than the number of nodes</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Partitioning.ConsistentHashRing.ConstructPartitions(Microsoft.Azure.Documents.Partitioning.IHashGenerator,System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>  
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Partitioning.ConsistentHashRing"/> class.
            </summary>  
            <param name="hashGenerator">A hash generation algorithm specified as an <see cref="T:Microsoft.Azure.Documents.Partitioning.IHashGenerator"/> implementation. </param>
            <param name="nodes">The nodes to use for the ring.</param>
            <param name="totalPartitions">Total number of partitions; must be &gt;= number of nodes</param>  
            <returns>Sorted array of Partition objects</returns>  
        </member>
        <member name="M:Microsoft.Azure.Documents.Partitioning.ConsistentHashRing.ComputePartition(System.String)">
            <summary>  
            Consistently hash the string key, and return the primary partition  
            </summary>  
            <param name="key">Key</param>  
            <returns>Primary partition index</returns>  
        </member>
        <member name="M:Microsoft.Azure.Documents.Partitioning.ConsistentHashRing.GetNode(System.Int32,System.Int32)">
            <summary>  
            Given a partition index, return the node hosting the Nth replica  
            </summary>  
            <param name="partition">Partition index</param>  
            <param name="replica">Desired replica (primary is 0)</param>  
            <returns>Node</returns>  
        </member>
        <member name="M:Microsoft.Azure.Documents.Partitioning.ConsistentHashRing.LowerBound(Microsoft.Azure.Documents.Partitioning.ConsistentHashRing.Partition[],System.Byte[])">
            <summary>  
            Return the partition with the lowest hash value that is equal  
            or greater to the hashValue parameter (lower bound)  
            </summary>  
            <param name="partitions">Array of partitions; must be sorted by their hash value</param>  
            <param name="hashValue">Hash value to lookup</param>  
            <returns>Index into the partition array, or partitions.Length if value is greater than last partition</returns>  
        </member>
        <member name="M:Microsoft.Azure.Documents.Partitioning.ConsistentHashRing.SkipRelicas(Microsoft.Azure.Documents.Partitioning.ConsistentHashRing.Partition[],System.Int32,System.Int32)">
            <summary>  
            Given a particular partition, skip "around" the circle until we find  
            the Nth partition, only counting unique nodes.  
            </summary>  
            <param name="partitions">Array of partitions</param>  
            <param name="partition">Starting index into the partition array</param>  
            <param name="replica">Nth partition requested (primary == 0)</param>  
            <returns>Index into the partition array</returns>  
        </member>
        <member name="T:Microsoft.Azure.Documents.Partitioning.HashPartitionResolver">
            <summary>
            HashPartitionResolver implements partitioning based on the value of a hash function, allowing you to evenly 
            distribute requests and data across a number of partitions. 
            </summary>
            <remarks>
            <para>
            The HashPartitionResolver class internally implements a consistent hash ring over the hash function specified in the 
            <see cref="T:Microsoft.Azure.Documents.Partitioning.IHashGenerator"/> interface. By default, the HashPartitionResolver provides an MD5 hash function, but this can be 
            swapped out with a different hashing implementation. The consistent hash ring creates 16 replicas for each collection in order 
            to achieve a more uniform distribution of documents across collections.
            </para>
            <para>
            The hash partitioning is most suitable for partitioning when the partition key has a high cardinality because it will distribute 
            the data evenly across collections. Typically hash partitioning uses the id property. A common use cases for hash partitioning is data 
            produced or consumed from a large number of distinct clients or for storing user profiles, catalog items, and telemetry data.
            </para>
            </remarks>
            <example>
            The following example shows to create a HashPartitionResolver.
            <code language="c#">
            <![CDATA[
            // Create some collections to partition data.
            DocumentCollection collection1 = await DocumentClientHelper.GetCollectionAsync(this.client, database, "Collection.HashBucket0");
            DocumentCollection collection2 = await DocumentClientHelper.GetCollectionAsync(this.client, database, "Collection.HashBucket1");
            
            // Initialize a partition resolver that users hashing, and register with DocumentClient. 
            HashPartitionResolver hashResolver = new HashPartitionResolver("UserId", new[] { collection1.SelfLink, collection2.SelfLink });
            this.client.PartitionResolvers[database.SelfLink] = hashResolver;
            ]]>
            </code>
            </example>
            <example>
            The following example shows how to create documents using a HashPartitionResolver.
            <code language="c#">
            <![CDATA[
            // The hash resolver will compute the hash of UserId in order to route the create to either of the collections.
            Document document = await this.client.CreateDocumentAsync(database.SelfLink, new UserProfile("J1", "@John", Region.UnitedStatesEast));
            ]]>
            </code>
            </example>
            <example>
            The following example shows how to query documents for a specific partition key.
            <code language="c#">
            <![CDATA[
            // Query for document by User. We can use the PartitionResolver to restrict the query to just the partition containing @John
            var query = this.client.CreateDocumentQuery<UserProfile>(database.SelfLink, null, partitionResolver.GetPartitionKey(johnProfile))
                .Where(u => u.UserName == "@John");
                
            UserProfile profile = query.AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <example>
            The following example shows to query documents across all partition keys.
            <code language="c#">
            <![CDATA[
            // Query for all Available users. Here since there is no partition key, the query is serially executed across each partition/collection. 
            query = this.client.CreateDocumentQuery<UserProfile>(database.SelfLink).Where(u => u.Status == UserStatus.Available);
            foreach (UserProfile activeUser in query)
            {
                Console.WriteLine(activeUser);
            }
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Client.IPartitionResolver"/>
        </member>
        <member name="T:Microsoft.Azure.Documents.Client.IPartitionResolver">
            <summary>
            This represents a partition resolver for a database. Given a partition key, return the collection link(s) matching the partition key
            </summary>
            <remarks>
            <para>
            DocumentClient allows you to create and register IPartitionResolvers implementations for each database. Once registered, you can perform 
            document operations directly against a database instead of a collection. IPartitionResolvers has just three methods 
            ExtractPartitionKey, ResolveForCreate and ResolveForRead.
            </para>
            <para>
            LINQ queries and ReadFeed iterators use the ResolveForRead internally to iterate over all the collections that match the partition key for 
            the request. Similarly, create operations use the ResolveForCreate to route creates to the right partition. There are no changes required for Replace,
            Delete and Read since they use the Document, which already contains the reference to the collection that holds the document.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Azure.Documents.Partitioning.HashPartitionResolver"/>
            <seealso cref="T:Microsoft.Azure.Documents.Partitioning.RangePartitionResolver`1"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.DocumentClient"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.IPartitionResolver.GetPartitionKey(System.Object)">
            <summary>
            Extracts the partition key from a document.
            </summary>
            <param name="document">A document object.</param>
            <returns>The partition key for the document.</returns>
            <remarks>
            Typical implementations will get the value of a single property from the document (e.g., user ID) or 
            extract a compound property, for e.g., version ID, device #) or implement custom logic based on the 
            type of the document, for e.g., extract value of id for users but extract userId for userMessages.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.IPartitionResolver.ResolveForCreate(System.Object)">
            <summary>
            Given a partition key, this returns the collection self-link for creating a document.
            </summary>
            <param name="partitionKey">The partition key used to determine the target collection for create operations.</param>
            <returns>A self-link for the collection to create documents in for the specified partition key.</returns>
            <remarks>
            The return value must be a valid collection self-link string in the format dbs/db_rid/colls/col_rid.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.IPartitionResolver.ResolveForRead(System.Object)">
            <summary>
            Given a partition key, this returns a list of collection self-links to read from.
            </summary>
            <param name="partitionKey">The partition key used to determine the target collections for reads, i.e., query or read-feed.</param>
            <returns>The self-links for the collections to perform read requests for the specified partition key.</returns>
            <remarks>
            The return value must be an IEnumerable of collection self-link strings in the format dbs/db_rid/colls/col_rid.
            Unlike ResolveForCreate, this is a 1:N as a single partition key might be created in different collections over 
            time or because you are performing data migration of partition key between collections.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Partitioning.HashPartitionResolver.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String},System.Int32,Microsoft.Azure.Documents.Partitioning.IHashGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Partitioning.HashPartitionResolver"/> using the specified <paramref name="partitionKeyPropertyName"/> value.
            </summary>
            <param name="partitionKeyPropertyName">The name of the property in the document to execute the hashing on.</param>
            <param name="collectionLinks">The list of collection links used for hashing.</param>
            <param name="numberOfVirtualNodesPerCollection">The number of virtual nodes per collection in the conisistent hash ring.</param>
            <param name="hashGenerator">The <see cref="T:Microsoft.Azure.Documents.Partitioning.IHashGenerator"/> to use in consistent hashing. If null, the default MD5 hash generator is used.</param>
            <remarks>
            Use when you want to partition based on a single property name. For other partitioning schemes, use the constructor 
            with partitionKeyExtractor instead.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Partitioning.HashPartitionResolver.#ctor(System.Func{System.Object,System.String},System.Collections.Generic.IEnumerable{System.String},System.Int32,Microsoft.Azure.Documents.Partitioning.IHashGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Partitioning.HashPartitionResolver"/> using the specified <paramref name="partitionKeyExtractor"/> value.
            </summary>
            <param name="partitionKeyExtractor">A function to extract the partitionKey from the document</param>
            <param name="collectionLinks">The list of collection links used for hashing.</param>
            <param name="numberOfVirtualNodesPerCollection">The number of virtual nodes per collection in the conisistent hash ring.</param>
            <param name="hashGenerator">The <see cref="T:Microsoft.Azure.Documents.Partitioning.IHashGenerator"/> to use in consistent hashing. If null, the default MD5 hash generator is used.</param>
        </member>
        <member name="M:Microsoft.Azure.Documents.Partitioning.HashPartitionResolver.Finalize">
            <summary>
            Class destructor.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Partitioning.HashPartitionResolver.GetPartitionKey(System.Object)">
            <summary>
            Extracts the partition key from the specified document using the specified <see cref="P:Microsoft.Azure.Documents.Partitioning.HashPartitionResolver.PartitionKeyPropertyName"/> 
            property or <see cref="P:Microsoft.Azure.Documents.Partitioning.HashPartitionResolver.PartitionKeyExtractor"/> function in order of preference.
            </summary>
            <param name="document">A document object</param>
            <returns>object used as the partition key.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if unable to extract the partition key.</exception>
        </member>
        <member name="M:Microsoft.Azure.Documents.Partitioning.HashPartitionResolver.ResolveForCreate(System.Object)">
            <summary>
            Given a partition key, returns the collection self-link for creating a document.
            </summary>
            <param name="partitionKey">The partition key used to determine the target collection for creates.</param>
            <returns>The target collection link that will be used for document creation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the specified <paramref name="partitionKey"/> is null.</exception>
        </member>
        <member name="M:Microsoft.Azure.Documents.Partitioning.HashPartitionResolver.ResolveForRead(System.Object)">
            <summary>
            Given a partition key, returns a list of collection links to read from using its hash.
            </summary>
            <param name="partitionKey">The partition key used to determine the target collections for reading. Must be a string.</param>
            <returns>The list of target collection links.</returns>
            <remarks>
            If partitionKey is null, then all collections are returned. The HashPartitionResolver supports only strings as partitionKeys.
            For other types, use ToString() or JsonConvert.SerializeObject() to convert to string.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if the partition key is not a string.</exception>
        </member>
        <member name="M:Microsoft.Azure.Documents.Partitioning.HashPartitionResolver.Dispose">
            <summary>
            Disposes the resolver.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.Documents.Partitioning.HashPartitionResolver.Dispose(System.Boolean)">
            <summary>
            Disposes the resources.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Partitioning.HashPartitionResolver.HashGenerator">
            <summary>
            Gets the HashGenerator used in consistent hashing.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Partitioning.HashPartitionResolver.PartitionKeyPropertyName">
            <summary>
            Gets the name of the property in the document to execute the hashing on.
            </summary>
            <value>The name of the property in the document to execute the hashing on.</value>
            <remarks>
            HashPartitionResolver supports two modes - one using PartitionKeyPropertyName and the other using PartitionKeyExtractor.
            PartitionKeyPropertyName is extracted using Reflection, so use the C# property name, not the JSON representation.
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.Documents.Partitioning.HashPartitionResolver.CollectionLinks">
            <summary>
            Gets the IEnumerable of collection links used for hashing.
            </summary>
            <value>The IEnumerable of collection links used for hashing.</value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Partitioning.HashPartitionResolver.PartitionKeyExtractor">
            <summary>
            Gets the function to extract the partition key from an object.
            </summary>
            <value>The function to extract the partition key from an object.</value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Partitioning.HashPartitionResolver.NumberOfVirtualNodesPerCollection">
            <summary>
            The number of virtual nodes per collection in the conisistent hash ring. This controls the compromise of skewness of documents accross collections vs the consistent hashing latency.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.Partitioning.IHashGenerator">
            <summary>
            An interface used by the <see cref="T:Microsoft.Azure.Documents.Partitioning.HashPartitionResolver"/> to partition data using consistent hashing.
            </summary>
            <seealso cref="T:Microsoft.Azure.Documents.Partitioning.HashPartitionResolver"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Partitioning.IHashGenerator.ComputeHash(System.Byte[])">
            <summary>
            Hashes an array of bytes into a new array of bytes that represents the output hash.
            </summary>
            <param name="key">A key represented by an array of bytes</param>
            <returns>An array of bytes that represents the output hash.</returns>
        </member>
        <member name="T:Microsoft.Azure.Documents.Partitioning.RangePartitionResolver`1">
            <summary>
            RangePartitionResolver implements partitioning using a partition map of ranges of values to a collection self-link.
            This works well when the data is naturally ordered and commonly queried upon using ranges of values, e.g., for 
            time series data or alphabetical ranges of strings.
            </summary>
            <typeparam name="T">The type of value to use for range partitioning.</typeparam>
            <remarks>
            <para>
            In range partitioning, partitions are assigned based on whether the partition key is within a certain range. The 
            RangePartitionResolver class helps you maintain a mapping between a <see cref="T:Microsoft.Azure.Documents.Partitioning.Range`1"/> and collection self-link.
            </para>
            <para>
            <see cref="T:Microsoft.Azure.Documents.Partitioning.Range`1"/> is a simple class for specifying ranges of any types that implement <see cref="T:System.IComparable`1"/> and <see cref="T:System.IEquatable`1"/> 
            like strings or numbers. For reads and creates, you can pass in any arbitrary range, and the resolver identifies all the candidate collections by 
            identifying the ranges of the partitions that intersect twith the requested range.
            </para>
            <para>
            A special case of range partitioning is when the range is just a single discrete value, sometimes called Lookup Partitioning. This is commonly used 
            for partitioning by discrete values like Region or Type or for partitioning tenants in a multi-tenant application.
            </para>
            </remarks>
            <example>
            The following example shows to create a RangePartitionResolver.
            <code language="c#">
            <![CDATA[
            // Create some collections to partition data.
            DocumentCollection collection1 = await DocumentClientHelper.GetCollectionAsync(this.client, database, "Collection.A-M");
            DocumentCollection collection2 = await DocumentClientHelper.GetCollectionAsync(this.client, database, "Collection.N-Z");
            
            // Initialize a partition resolver that assigns users (A-M) -> collection1, and (N-Z) -> collection2 and register with DocumentClient.
            RangePartitionResolver<string> rangeResolver = new RangePartitionResolver<string>(
                "UserId",
                new Dictionary<Range<string>, string>() 
                {
                    { new Range<string>("A", "M\uffff"), collection1.SelfLink },
                    { new Range<string>("N", "Z\uffff"), collection2.SelfLink },
                });
                
            this.client.PartitionResolvers[database.SelfLink] = rangeResolver;
            ]]>
            </code>
            </example>
            <example>
            The following example shows how to create documents using a RangePartitionResolver.
            <code language="c#">
            <![CDATA[
            // The range resolver maps J1 to the range A-M.
            Document document = await this.client.CreateDocumentAsync(database.SelfLink, new UserProfile("J1", "@John", Region.UnitedStatesEast));
            ]]>
            </code>
            </example>
            <example>
            The following example shows how to query documents for a specific partition key.
            <code language="c#">
            <![CDATA[
            // Query for document by UserName. We can use the PartitionResolver to restrict the query to just the partition containing @John
            var query = this.client.CreateDocumentQuery<UserProfile>(database.SelfLink, null, partitionResolver.GetPartitionKey(johnProfile))
                .Where(u => u.UserName == "@John");
                
            UserProfile profile = query.AsEnumerable().FirstOrDefault();
            ]]>
            </code>
            </example>
            <example>
            The following example shows to query documents across all partition keys.
            <code language="c#">
            <![CDATA[
            // Query for all Available users. Here since there is no partition key, the query is serially executed across each partition/collection. 
            query = this.client.CreateDocumentQuery<UserProfile>(database.SelfLink).Where(u => u.Status == UserStatus.Available);
            foreach (UserProfile activeUser in query)
            {
                Console.WriteLine(activeUser);
            }
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Client.IPartitionResolver"/>
            <seealso cref="T:Microsoft.Azure.Documents.Partitioning.Range`1"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Partitioning.RangePartitionResolver`1.#ctor(System.String,System.Collections.Generic.IDictionary{Microsoft.Azure.Documents.Partitioning.Range{`0},System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Partitioning.RangePartitionResolver`1"/> class using the specified <paramref name="partitionKeyPropertyName"/> value.
            </summary>
            <param name="partitionKeyPropertyName">The name of the property in the document to execute the hashing on.</param>
            <param name="partitionMap">A map from range to collection-link that is used for partitioning requests.</param>
            <remarks>
            Use when you want to partition based on a single property name. For other partitioning schemes, use the constructor 
            with partitionKeyExtractor instead.
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if one of the parameters is null.</exception>
        </member>
        <member name="M:Microsoft.Azure.Documents.Partitioning.RangePartitionResolver`1.#ctor(System.Func{System.Object,System.Object},System.Collections.Generic.IDictionary{Microsoft.Azure.Documents.Partitioning.Range{`0},System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Partitioning.HashPartitionResolver"/> using the specified <paramref name="partitionKeyExtractor"/> value.
            </summary>
            <param name="partitionKeyExtractor">The name of the property in the document to execute the hashing on.</param>
            <param name="partitionMap">A map from range to collection-link that is used for partitioning requests.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if one of the parameters is null.</exception>
        </member>
        <member name="M:Microsoft.Azure.Documents.Partitioning.RangePartitionResolver`1.GetPartitionKey(System.Object)">
            <summary>
            Extracts the partition key from the specified document using the specified <see cref="P:Microsoft.Azure.Documents.Partitioning.HashPartitionResolver.PartitionKeyPropertyName"/> 
            property or <see cref="P:Microsoft.Azure.Documents.Partitioning.HashPartitionResolver.PartitionKeyExtractor"/> function in order of preference.
            </summary>
            <param name="document">A document object</param>
            <returns>object used as the partition key.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if unable to extract the partition key.</exception>
        </member>
        <member name="M:Microsoft.Azure.Documents.Partitioning.RangePartitionResolver`1.ResolveForCreate(System.Object)">
            <summary>
            Given a partition key, returns the correct collection self-link for creating a document using the range partition map.
            </summary>
            <param name="partitionKey">The partition key used to determine the target collection for create</param>
            <returns>The target collection link that will be used for document creation.</returns>
            <remarks>
            If multiple ranges match the specified partitionKey, then the resolver returns one of the matching ranges. If none of the
            ranges match, then the method throws a <see cref="T:System.InvalidOperationException"/>. If partitionKey is null, then all collections
            are returned.
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="partitionKey"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the <paramref name="partitionKey"/> is an invalid type or if none of the ranges match the specified partition key.
            </exception>
        </member>
        <member name="M:Microsoft.Azure.Documents.Partitioning.RangePartitionResolver`1.ResolveForRead(System.Object)">
            <summary>
            Given a partition key, returns a list of collection links to read from using the range partition map.
            </summary>
            <param name="partitionKey">The partition key used to determine the target collections for query</param>
            <returns>The list of target collection links.</returns>
            <remarks>
            The <paramref name="partitionKey"/> must be an instance of <typeparamref name="T"/>, <see cref="T:Microsoft.Azure.Documents.Partitioning.Range`1"/> or an <see cref="T:System.Collections.Generic.IEnumerable`1"/>."/&gt;. 
            This method returns all the collections corresponding to the ranges that intersect with the specified <paramref name="partitionKey"/>.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the <paramref name="partitionKey"/> is an invalid type.
            </exception>
        </member>
        <member name="P:Microsoft.Azure.Documents.Partitioning.RangePartitionResolver`1.PartitionKeyPropertyName">
            <summary>
            The name of the property in the document to execute the hashing on.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.Documents.Partitioning.RangePartitionResolver`1.PartitionMap">
            <summary>
            Gets the map from range to collection-link that is used for partitioning requests.
            </summary>
            <value>
            The map from range to collection-link that is used for partitioning requests.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Partitioning.RangePartitionResolver`1.PartitionKeyExtractor">
            <summary>
            Gets the function to extract the partition key from any object.
            </summary>
            <value>
            The function to extract the partition key from any object.
            </value>
        </member>
        <member name="T:Microsoft.Azure.Documents.Partitioning.Range`1">
            <summary>
            A class that represents a range used by the <see cref="T:Microsoft.Azure.Documents.Partitioning.RangePartitionResolver`1"/> class.
            </summary>
            <typeparam name="T">Any type that can be used for range comparison.</typeparam>
            <seealso cref="T:Microsoft.Azure.Documents.Partitioning.RangePartitionResolver`1"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Partitioning.Range`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Partitioning.Range`1"/> class using the specified low and high values.
            </summary>
            <param name="low">The low value in the range.</param>
            <param name="high">The high value in the range.</param>
            <exception cref="T:System.ArgumentException">Throws an exception if the range is invalid (low is greater than high).</exception>
        </member>
        <member name="M:Microsoft.Azure.Documents.Partitioning.Range`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Partitioning.Range`1"/> class for a single value.
            </summary>
            <param name="point">A value that is used to create the range.</param>
            <remarks>
            Use this constructor for building a partitioning scheme for discrete/single values.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.Documents.Partitioning.Range`1.Equals(Microsoft.Azure.Documents.Partitioning.Range{`0})">
            <summary>
            Checks if two ranges are equal.
            </summary>
            <param name="other">the input range to be compared with this range.</param>
            <returns>Returns true if the input range is equal to this range.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Partitioning.Range`1.CompareTo(Microsoft.Azure.Documents.Partitioning.Range{`0})">
            <summary>
            Compares two ranges.
            </summary>
            <param name="other">The other range to compare to.</param>
            <returns>Returns -1 if the range is smaller than the passed range, 1 if bigger and 0 if equal.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Partitioning.Range`1.Contains(`0)">
            <summary>
            Checks if the range contains a key.
            </summary>
            <param name="point">The key to be checked if in the range.</param>
            <returns>Returns true if the key is in the range.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Partitioning.Range`1.Contains(Microsoft.Azure.Documents.Partitioning.Range{`0})">
            <summary>
            Checks if the range contains another range..
            </summary>
            <param name="other">The input range to be checked if it's contained in this range.</param>
            <returns>Returns true if the input range is contained in the range.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Partitioning.Range`1.GetHashCode">
            <summary>
            Creates the hashcode for the range.
            </summary>
            <returns>Returns the hashcode for the range.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Partitioning.Range`1.Intersect(Microsoft.Azure.Documents.Partitioning.Range{`0})">
            <summary>
            Checks if the range <paramref name="other"/> intersects with this range.
            </summary>
            <param name="other">the input <see cref="T:Microsoft.Azure.Documents.Partitioning.Range`1"/> to be compared with this range.</param>
            <returns>Returns true if the two ranges intersect with each other.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Partitioning.Range`1.ToString">
            <summary>
            Converts the range to a string in the form of "low,high"
            </summary>
            <returns>Returns A string representation of the range.</returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.Partitioning.Range`1.Low">
            <summary>
            Gets the low value in the range.
            </summary>
            <value>
            The low value in the range.
            </value>
        </member>
        <member name="P:Microsoft.Azure.Documents.Partitioning.Range`1.High">
            <summary>
            Gets the high value in the range.
            </summary>
            <value>
            The high value in the range.
            </value>
        </member>
        <member name="T:Microsoft.Azure.Documents.Client.MediaReadMode">
            <summary> 
            Represents the mode for use with downloading attachment content (a.k.a. media).
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.Client.MediaReadMode.Buffered">
            <summary>
            Content is buffered at the client and not directly streamed from the content store. Use Buffered to reduce the time taken to read and write media files.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.Documents.Client.MediaReadMode.Streamed">
            <summary>
            Content is directly streamed from the content store without any buffering at the client. Use Streamed to reduce the client memory overhead of reading and writing media files.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.Documents.Client.ResourceFeedReader`1">
            <summary>
            ResourceFeedReader can be used to iterate through the resources of the specified type under a DocumentDB feed, e.g., collections under a database or 
            documents under a collection. Supports paginated read of results.
            </summary>
            <typeparam name="T">Resource type</typeparam>
            <remarks>
            <para>
            The database entities that DocumentDB manages like databases, collections and documents are referred to as resources, and each set 
            of resources is referred to as a feed. For example, a collection has a feed of documents, as well as a feed of stored procedures.
            <see cref="T:Microsoft.Azure.Documents.Client.ResourceFeedReader`1"/> objects can be used to perform a "read feed", i.e, enumerate the specified resources under the 
            specified DocumentDB feed link. For more details, refer to <a href="http://azure.microsoft.com/documentation/articles/documentdb-resources/">
            DocumentDB resource model and concepts</a>.
            </para>
            <para>
            <see cref="T:Microsoft.Azure.Documents.Client.ResourceFeedReader`1"/> can be used to iterate through documents under all collections under a database using its registered 
            <see cref="T:Microsoft.Azure.Documents.Client.IPartitionResolver"/> implementation.
            </para>
            </remarks>
            <example>
            The following example shows how to create a ResourceFeedReader to read all documents in a collection using the default page size.
            <code style="c#">
            <![CDATA[
            var feedReader = client.CreateDocumentFeedReader(collection1.SelfLink);
            var count = 0;
            while (feedReader.HasMoreResults)
            {
                count += feedReader.ExecuteNextAsync().Result.Count;
            }
            ]]>
            </code>
            </example>
            <example>
            The following example shows how to create a ResourceFeedReader for documents against a partitioned database using a Range partition key, and 
            a custom page size.
            <code style="c#">
            <![CDATA[
            feedCount = 0;
            ResourceFeedReader<Document> feedReader = client.CreateDocumentFeedReader(
                databaseLink, 
                new FeedOptions() { MaxItemCount = 1 }, 
                new Range<long>(0, 800));
            
            while (feedReader.HasMoreResults)
            {
                var feed = feedReader.ExecuteNextAsync().Result;
                feedCount += feed.Count;
            }
            ]]>
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.Documents.Resource"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.DocumentClient"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.IPartitionResolver"/>
            <seealso cref="T:Microsoft.Azure.Documents.Client.ResourceFeedReaderClientExtensions"/>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.ResourceFeedReader`1.GetEnumerator">
            <summary>
            Retrieves an <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate over the resources.
            </summary>
            <remarks>
            This call results in all pages for the feed being fetched synchronously.
            </remarks>
            <returns>An enumerator for the feed.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.ResourceFeedReader`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Retrieves an <see cref="T:System.Collections.IEnumerator"/> that can be used to iterate over the resources.
            </summary>
            <returns>An enumerator for the feed.</returns>
        </member>
        <member name="M:Microsoft.Azure.Documents.Client.ResourceFeedReader`1.ExecuteNextAsync">
            <summary>
            Retrieves the next page of results.
            </summary>
            <returns>The response from a single call to ReadFeed for the specified resource.</returns>
        </member>
        <member name="P:Microsoft.Azure.Documents.Client.ResourceFeedReader`1.HasMoreResults">
            <summary>
            Gets a Boolean value indicating whether there are additional results to retrieve. 
            </summary>
            <returns>Returns true if there are additional results to retrieve. Returns false otherwise.</returns>
        </member>
        <member name="T:AssemblyRef">
            <summary>
            Sets public key string for friend assemblies.
            </summary>
        </member>
        <member name="F:AssemblyRef.ProductPublicKey">
            <summary>ProductPublicKey is an official MS supported public key for external releases. TestPublicKey is an unsupported strong key for testing and internal use only</summary>
        </member>
    </members>
</doc>
